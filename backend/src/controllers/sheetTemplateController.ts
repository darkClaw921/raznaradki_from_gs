import { Request, Response } from 'express';
import { Op } from 'sequelize';
import { SheetTemplate, Sheet, UserSheet, Cell, ReportSource } from '../models';

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
export const getTemplates = async (req: Request, res: Response) => {
  try {
    const templates = await SheetTemplate.findAll({
      where: { isActive: true },
      order: [['category', 'ASC'], ['name', 'ASC']]
    });

    const groupedTemplates = templates.reduce((acc: any, template: any) => {
      const category = template.category;
      if (!acc[category]) {
        acc[category] = [];
      }
      acc[category].push(template);
      return acc;
    }, {});

    res.json({
      templates: groupedTemplates,
      total: templates.length
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
export const getTemplate = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    
    const template = await SheetTemplate.findByPk(id);
    
    if (!template) {
      return res.status(404).json({
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      message: '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
      template
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
export const createSheetFromTemplate = async (req: Request, res: Response) => {
  console.log('üìã ENTER createSheetFromTemplate:', { params: req.params, body: req.body });
  try {
    // templateId –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL –∏–ª–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    const templateId = req.params.templateId || req.body.templateId;
    const { name, description, sourceSheetId, sourceSheetIds } = req.body;
    const userId = req.user.id;

    console.log('üîß Creating sheet from template:', { templateId, name, sourceSheetId });

    if (!templateId || !name) {
      return res.status(400).json({
        error: 'ID —à–∞–±–ª–æ–Ω–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    const template = await SheetTemplate.findByPk(parseInt(templateId));
    if (!template) {
      return res.status(404).json({
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (sourceSheetId) {
      const sourceSheet = await Sheet.findByPk(sourceSheetId);
      if (!sourceSheet) {
        return res.status(404).json({
          error: '–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      const hasAccessToSource = sourceSheet.createdBy === userId || sourceSheet.isPublic;
      if (!hasAccessToSource) {
        const userSheet = await UserSheet.findOne({
          where: { userId, sheetId: sourceSheetId }
        });
        if (!userSheet) {
          return res.status(403).json({
            error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ'
          });
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    const sheet = await Sheet.create({
      name,
      description: description || template.description,
      createdBy: userId,
      rowCount: template.rowCount,
      columnCount: template.columnCount,
      templateId: template.id,
      sourceSheetId: sourceSheetId || null,
      isPublic: false
    });

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å —Ç–∞–±–ª–∏—Ü–µ–π
    await UserSheet.create({
      userId,
      sheetId: sheet.id,
      permission: 'admin'
    });

    // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∞–±–ª–æ–Ω–∞
    const structure = template.structure;
    const cellsToCreate = [];

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (structure.headers && Array.isArray(structure.headers)) {
      for (const header of structure.headers) {
        cellsToCreate.push({
          sheetId: sheet.id,
          row: header.row,
          column: header.column,
          value: header.value,
          format: header.format || null
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è"
    if (template.name?.includes('–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è')) {
      console.log('üé® –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è');
      
      // –ñ–∏—Ä–Ω–∞—è –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ C (2) - –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ "–í—ã—Å–µ–ª–µ–Ω–∏–µ"
      // –ñ–∏—Ä–Ω–∞—è –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ G (6) - –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏ "–ó–∞—Å–µ–ª–µ–Ω–∏–µ"
      const standardBorder = {
        style: 'solid',
        width: 1,
        color: '#e0e0e0'
      };
      
      const thickLeftBorder = {
        style: 'solid',
        width: 2,
        color: '#000000'
      };

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Å—Ç–æ–ª–±—Ü–æ–≤ C –∏ G
      const maxRows = template.rowCount || 30;
      for (let row = 0; row < maxRows; row++) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —è—á–µ–π–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö C (2) –∏ G (6)
        const existingCellC = cellsToCreate.find(cell => cell.row === row && cell.column === 2);
        const existingCellG = cellsToCreate.find(cell => cell.row === row && cell.column === 6);
        
        // –°—Ç–æ–ª–±–µ—Ü C (2) - –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "–í—ã—Å–µ–ª–µ–Ω–∏–µ"
        if (existingCellC) {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–æ–π
          existingCellC.format = {
            ...existingCellC.format,
            borders: {
              top: standardBorder,
              right: standardBorder,
              bottom: standardBorder,
              left: thickLeftBorder, // –ñ–∏—Ä–Ω–∞—è –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
              ...existingCellC.format?.borders
            }
          };
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
          cellsToCreate.push({
            sheetId: sheet.id,
            row: row,
            column: 2,
            value: '',
            format: { 
              borders: {
                top: standardBorder,
                right: standardBorder,
                bottom: standardBorder,
                left: thickLeftBorder // –ñ–∏—Ä–Ω–∞—è –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
              }
            }
          });
        }
        
        // –°—Ç–æ–ª–±–µ—Ü G (6) - –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "–ó–∞—Å–µ–ª–µ–Ω–∏–µ"
        if (existingCellG) {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–æ–π
          existingCellG.format = {
            ...existingCellG.format,
            borders: {
              top: standardBorder,
              right: standardBorder,
              bottom: standardBorder,
              left: thickLeftBorder, // –ñ–∏—Ä–Ω–∞—è –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
              ...existingCellG.format?.borders
            }
          };
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
          cellsToCreate.push({
            sheetId: sheet.id,
            row: row,
            column: 6,
            value: '',
            format: { 
              borders: {
                top: standardBorder,
                right: standardBorder,
                bottom: standardBorder,
                left: thickLeftBorder // –ñ–∏—Ä–Ω–∞—è –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
              }
            }
          });
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if (!sourceSheetId && structure.sampleData && Array.isArray(structure.sampleData)) {
      for (const sample of structure.sampleData) {
        cellsToCreate.push({
          sheetId: sheet.id,
          row: sample.row,
          column: sample.column,
          value: sample.value,
          format: sample.format || null
        });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    if (cellsToCreate.length > 0) {
      await Cell.bulkCreate(cellsToCreate);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –∂—É—Ä–Ω–∞–ª–∞–º–∏
    const sourcesToLink = sourceSheetIds && Array.isArray(sourceSheetIds) ? sourceSheetIds : (sourceSheetId ? [sourceSheetId] : []);
    
    if (sourcesToLink.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ report_sources
      const reportSources = sourcesToLink.map(sourceId => ({
        reportSheetId: sheet.id,
        sourceSheetId: sourceId
      }));
      
      await ReportSource.bulkCreate(reportSources);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∂—É—Ä–Ω–∞–ª–∞–º–∏
      await syncLinkedSheetDataFromMultipleSources(sheet.id);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const createdSheet = await Sheet.findByPk(sheet.id, {
      include: [
        {
          model: SheetTemplate,
          as: 'template',
          attributes: ['id', 'name', 'category']
        }
      ]
    });

    res.status(201).json({
      message: '–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞',
      sheet: createdSheet
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞'
    });
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
export const syncLinkedSheetDataFromMultipleSources = async (reportSheetId: number, targetDate?: string) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const reportSources = await ReportSource.findAll({
      where: { reportSheetId },
      include: [
        {
          model: Sheet,
          as: 'sourceSheet',
          attributes: ['id', 'name']
        }
      ]
    });

    if (reportSources.length === 0) {
      console.log('üìÖ –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞', reportSheetId);
      return true;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—á–µ—Ç–∞
    const reportSheet = await Sheet.findByPk(reportSheetId);
    if (!reportSheet) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–∞
    const reportDate = targetDate || reportSheet.reportDate;
    
    if (!reportDate) {
      console.log('üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return true;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤
    let allFilteredData: any[] = [];
    
    for (const reportSource of reportSources) {
      const sourceSheet = (reportSource as any).sourceSheet;
      console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∂—É—Ä–Ω–∞–ª–æ–º ${sourceSheet?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${reportSource.sourceSheetId})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞
      const sourceCells = await Cell.findAll({
        where: { sheetId: reportSource.sourceSheetId },
        order: [['row', 'ASC'], ['column', 'ASC']]
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –¥–∞—Ç–µ –æ—Ç—á–µ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
      const filteredData = filterJournalDataByReportDate(sourceCells, reportDate);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∫ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ
      const dataWithSource = filteredData.map(cell => ({
        ...cell,
        sourceSheetId: reportSource.sourceSheetId,
        sourceSheetName: sourceSheet?.name
      }));
      
      allFilteredData = allFilteredData.concat(dataWithSource);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
    const reportCells = await transformJournalToReport(allFilteredData, reportSheetId, reportDate);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    const columnFormats: any = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç–æ–ª—å–∫–æ –≥–¥–µ –µ—Å—Ç—å format –∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ)
    const existingFormattedCells = await Cell.findAll({
      where: {
        sheetId: reportSheetId,
        format: { [Op.ne]: null }
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ (—è—á–µ–π–∫–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
    existingFormattedCells.forEach(cell => {
      if (cell.row <= 1 || !cell.value || cell.value === '') {
        const key = `${cell.row}-${cell.column}`;
        columnFormats[key] = {
          row: cell.row,
          column: cell.column,
          format: cell.format,
          value: cell.value || '',
          isLocked: cell.isLocked
        };
      }
    });

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - —Å—Ç—Ä–æ–∫–∏ 0 –∏ 1)
    await Cell.destroy({
      where: {
        sheetId: reportSheetId,
        row: { [Op.gt]: 1 } // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å—Ç—Ä–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      }
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    const cellsToRestore = [];
    Object.values(columnFormats).forEach((cellData: any) => {
      if (cellData.row > 1) { // –¢–æ–ª—å–∫–æ –¥–ª—è —è—á–µ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        cellsToRestore.push({
          sheetId: reportSheetId,
          row: cellData.row,
          column: cellData.column,
          value: cellData.value,
          format: cellData.format,
          isLocked: cellData.isLocked || false
        });
      }
    });

    if (cellsToRestore.length > 0) {
      await Cell.bulkCreate(cellsToRestore);
      console.log(`üé® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${cellsToRestore.length} —è—á–µ–µ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –≤ —è—á–µ–π–∫–µ A1 (row=0, column=0)
    const reportDateCell = await Cell.findOne({
      where: { sheetId: reportSheetId, row: 0, column: 0 }
    });

    if (reportDateCell) {
      await reportDateCell.update({ value: reportDate });
    } else {
      await Cell.create({
        sheetId: reportSheetId,
        row: 0,
        column: 0,
        value: reportDate,
        format: { fontWeight: 'bold', fontSize: '16px', textAlign: 'center' }
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —è—á–µ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    if (reportCells.length > 0) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ —è—á–µ–µ–∫ –¥–ª—è upsert
      const cellsForUpsert = reportCells.map(cell => ({
        ...cell,
        uniqueKey: `${cell.sheetId}-${cell.row}-${cell.column}`
      }));

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º bulkCreate —Å –æ–ø—Ü–∏–µ–π updateOnDuplicate
      await Cell.bulkCreate(cellsForUpsert, {
        updateOnDuplicate: ['value', 'formula', 'format', 'isLocked', 'updatedAt'],
        fields: ['sheetId', 'row', 'column', 'value', 'formula', 'format', 'isLocked'],
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ reportDate –≤ –º–æ–¥–µ–ª–∏ Sheet
    await reportSheet.update({ reportDate });

    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ${reportSheetId} —Å ${reportSources.length} –∂—É—Ä–Ω–∞–ª–∞–º–∏ –Ω–∞ –¥–∞—Ç—É ${reportDate} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:', error);
    throw error;
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export const syncLinkedSheetData = async (reportSheetId: number, sourceSheetId: number, targetDate?: string) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—á–µ—Ç–∞
    const reportSheet = await Sheet.findByPk(reportSheetId);
    if (!reportSheet) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–∞
    const reportDate = targetDate || reportSheet.reportDate;
    
    if (!reportDate) {
      console.log('üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return true;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    const sourceCells = await Cell.findAll({
      where: { sheetId: sourceSheetId },
      order: [['row', 'ASC'], ['column', 'ASC']]
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –¥–∞—Ç–µ –æ—Ç—á–µ—Ç–∞
    const filteredData = filterJournalDataByReportDate(sourceCells, reportDate);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
    const reportCells = await transformJournalToReport(filteredData, reportSheetId, reportDate);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    const columnFormats: any = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç–æ–ª—å–∫–æ –≥–¥–µ –µ—Å—Ç—å format –∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ)
    const existingFormattedCells = await Cell.findAll({
      where: {
        sheetId: reportSheetId,
        format: { [Op.ne]: null }
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ (—è—á–µ–π–∫–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
    existingFormattedCells.forEach(cell => {
      if (cell.row <= 1 || !cell.value || cell.value === '') {
        const key = `${cell.row}-${cell.column}`;
        columnFormats[key] = {
          row: cell.row,
          column: cell.column,
          format: cell.format,
          value: cell.value || '',
          isLocked: cell.isLocked
        };
      }
    });

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - —Å—Ç—Ä–æ–∫–∏ 0 –∏ 1)
    await Cell.destroy({
      where: {
        sheetId: reportSheetId,
        row: { [Op.gt]: 1 } // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å—Ç—Ä–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      }
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    const cellsToRestore = [];
    Object.values(columnFormats).forEach((cellData: any) => {
      if (cellData.row > 1) { // –¢–æ–ª—å–∫–æ –¥–ª—è —è—á–µ–µ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        cellsToRestore.push({
          sheetId: reportSheetId,
          row: cellData.row,
          column: cellData.column,
          value: cellData.value,
          format: cellData.format,
          isLocked: cellData.isLocked || false
        });
      }
    });

    if (cellsToRestore.length > 0) {
      await Cell.bulkCreate(cellsToRestore);
      console.log(`üé® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${cellsToRestore.length} —è—á–µ–µ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ª–±—Ü–æ–≤`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –≤ —è—á–µ–π–∫–µ A1 (row=0, column=0)
    const reportDateCell = await Cell.findOne({
      where: { sheetId: reportSheetId, row: 0, column: 0 }
    });

    if (reportDateCell) {
      await reportDateCell.update({ value: reportDate });
    } else {
      await Cell.create({
        sheetId: reportSheetId,
        row: 0,
        column: 0,
        value: reportDate,
        format: { fontWeight: 'bold', fontSize: '16px', textAlign: 'center' }
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —è—á–µ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    if (reportCells.length > 0) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ —è—á–µ–µ–∫ –¥–ª—è upsert
      const cellsForUpsert = reportCells.map(cell => ({
        ...cell,
        uniqueKey: `${cell.sheetId}-${cell.row}-${cell.column}`
      }));

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º bulkCreate —Å –æ–ø—Ü–∏–µ–π updateOnDuplicate
      await Cell.bulkCreate(cellsForUpsert, {
        updateOnDuplicate: ['value', 'formula', 'format', 'isLocked', 'updatedAt'],
        fields: ['sheetId', 'row', 'column', 'value', 'formula', 'format', 'isLocked'],
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ reportDate –≤ –º–æ–¥–µ–ª–∏ Sheet
    await reportSheet.update({ reportDate });

    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ${reportSheetId} —Å –∂—É—Ä–Ω–∞–ª–æ–º ${sourceSheetId} –Ω–∞ –¥–∞—Ç—É ${reportDate} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  }
};

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –¥–∞—Ç–µ –æ—Ç—á–µ—Ç–∞
const filterJournalDataByReportDate = (cells: any[], reportDate: string) => {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  const rowsData: any = {};
  cells.forEach(cell => {
    if (cell.row === 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    
    if (!rowsData[cell.row]) {
      rowsData[cell.row] = {};
    }
    rowsData[cell.row][cell.column] = cell;
  });

  const filteredRows: any[] = [];
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
  const convertToISO = (dateStr: string) => {
    if (!dateStr || typeof dateStr !== 'string') return '';
    
    const cleanDate = dateStr.trim();
    const match = cleanDate.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
    
    if (match) {
      const [, day, month, year] = match;
      const paddedDay = day.padStart(2, '0');
      const paddedMonth = month.padStart(2, '0');
      return `${year}-${paddedMonth}-${paddedDay}`;
    }
    
    return '';
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞—Ç–µ –æ—Ç—á–µ—Ç–∞
  Object.keys(rowsData).forEach(rowIndex => {
    const row = rowsData[rowIndex];
    const checkinDate = row[1]?.value; // –ö–æ–ª–æ–Ω–∫–∞ 1: "–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è"
    const checkoutDate = row[3]?.value; // –ö–æ–ª–æ–Ω–∫–∞ 3: "–î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è"

    const isoCheckin = convertToISO(checkinDate);
    const isoCheckout = convertToISO(checkoutDate);
    const isoReportDate = reportDate; // reportDate —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏: –∑–∞—Å–µ–ª–µ–Ω–∏–µ="${checkinDate}" -> "${isoCheckin}", –≤—ã—Å–µ–ª–µ–Ω–∏–µ="${checkoutDate}" -> "${isoCheckout}", –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞="${isoReportDate}"`);

    // –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã—Å–µ–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞—Ç–æ–π –æ—Ç—á–µ—Ç–∞
    if (isoCheckin === isoReportDate || isoCheckout === isoReportDate) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞—Ç—ã ${isoReportDate}`);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
      Object.keys(row).forEach(colIndex => {
        const cell = row[colIndex];
        if (cell) {
          console.log(`üîß –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ [${rowIndex},${colIndex}]: –∏—Å—Ö–æ–¥–Ω–æ–µ value="${cell.value}"`);
          const copiedCell = {
            ...cell,
            row: parseInt(rowIndex),
            column: parseInt(colIndex),
            value: cell.value // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          };
          console.log(`üîß –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞: value="${copiedCell.value}"`);
          filteredRows.push(copiedCell);
        }
      });
    }
  });

  return filteredRows;
};

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
const transformJournalToReport = async (journalCells: any[], reportSheetId: number, reportDate: string) => {
  const reportCells: any[] = [];
  
  console.log(`üîß transformJournalToReport: –ø–æ–ª—É—á–µ–Ω–æ ${journalCells.length} —è—á–µ–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤)
  const rowsData: any = {};
  journalCells.forEach(cell => {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: sourceSheetId:row –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    const uniqueRowKey = `${cell.sourceSheetId}:${cell.row}`;
    if (!rowsData[uniqueRowKey]) {
      rowsData[uniqueRowKey] = {};
    }
    rowsData[uniqueRowKey][cell.column] = cell;
  });
  
  console.log(`üîß transformJournalToReport: —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${Object.keys(rowsData).length} —Å—Ç—Ä–æ–∫`);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const convertToISO = (dateStr: string) => {
    if (!dateStr || typeof dateStr !== 'string') return '';
    
    const cleanDate = dateStr.trim();
    const match = cleanDate.match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
    
    if (match) {
      const [, day, month, year] = match;
      const paddedDay = day.padStart(2, '0');
      const paddedMonth = month.padStart(2, '0');
      return `${year}-${paddedMonth}-${paddedDay}`;
    }
    
    return '';
  };

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
  const getJournalNamesForAddresses = async () => {
    try {
      const addressMap: { [key: string]: string } = {};
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
      const reportSources = await ReportSource.findAll({
        where: { reportSheetId },
        include: [
          {
            model: Sheet,
            as: 'sourceSheet',
            attributes: ['id', 'name']
          }
        ]
      });

      for (const reportSource of reportSources) {
                  const sourceSheet = (reportSource as any).sourceSheet;
          if (sourceSheet?.name) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∫–∞–∫ –∞–¥—Ä–µ—Å —Ç–∞–±–ª–∏—Ü—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
            addressMap[reportSource.sourceSheetId] = sourceSheet.name;
          }
      }

      return addressMap;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∂—É—Ä–Ω–∞–ª–æ–≤:', error);
      return {};
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID –∂—É—Ä–Ω–∞–ª–∞ -> –∞–¥—Ä–µ—Å
  const journalAddressMap = await getJournalNamesForAddresses();

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ + –§–ò–û –≥–æ—Å—Ç—è
  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤
  const addressGroups: any = {};

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
  Object.keys(rowsData).forEach(uniqueRowKey => {
    const row = rowsData[uniqueRowKey];
    
    console.log(`üîß –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫–∏ ${uniqueRowKey}:`);
    console.log(`üîß   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ: ${Object.keys(row).length}`);
    Object.keys(row).slice(0, 2).forEach(colIndex => {
      const cell = row[colIndex];
      console.log(`üîß   - –Ø—á–µ–π–∫–∞ [${uniqueRowKey},${colIndex}]: value="${cell?.value}", sourceSheetId=${cell?.sourceSheetId}, sourceSheetName="${cell?.sourceSheetName}"`);
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    const sourceSheetId = row[0]?.sourceSheetId || row[1]?.sourceSheetId; // –ë–µ—Ä–µ–º sourceSheetId –∏–∑ –ª—é–±–æ–π —è—á–µ–π–∫–∏ —Å—Ç—Ä–æ–∫–∏
    const sourceSheetName = row[0]?.sourceSheetName || row[1]?.sourceSheetName; // –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const tableName = sourceSheetName || journalAddressMap[sourceSheetId] || '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    console.log(`üîß –†–µ–∑—É–ª—å—Ç–∞—Ç: sourceSheetId=${sourceSheetId}, sourceSheetName="${sourceSheetName}", tableName="${tableName}"`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    const month = row[0]?.value || ''; // –ú–µ—Å—è—Ü
    const checkinDate = row[1]?.value || ''; // –î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    const dayCount = row[2]?.value || ''; // –ö–æ–ª-–≤–æ –¥–Ω–µ–π
    const checkoutDate = row[3]?.value || ''; // –î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è
    const guestName = row[4]?.value || ''; // –§–ò–û
    const phone = row[5]?.value || ''; // –¢–µ–ª–µ—Ñ–æ–Ω
    const totalAmount = row[6]?.value || ''; // –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
    const prepayment = row[7]?.value || ''; // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (—Å—É–º–º–∞ –∞–≤–∞–Ω—Å–∞)
    const additionalPayment = row[8]?.value || ''; // –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –∑–∞—Å–µ–ª–µ–Ω–∏—è
    const houseStatus = row[9]?.value || ''; // –°—Ç–∞—Ç—É—Å –¥–æ–º–∞
    const source = row[10]?.value || ''; // –ò—Å—Ç–æ—á–Ω–∏–∫
    const comment = row[11]?.value || ''; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ –∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é
    const dayComments = row[12]?.value || ''; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é –≤ –¥–µ–Ω—å –∑–∞—Å–µ–ª–µ–Ω–∏—è

    const isCheckout = convertToISO(checkoutDate) === reportDate;
    const isCheckin = convertToISO(checkinDate) === reportDate;

    if (isCheckout || isCheckin) {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã + –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—ã—Å–µ–ª–µ–Ω–∏–µ –∏ –∑–∞—Å–µ–ª–µ–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –Ω–∞ –æ–¥–Ω—É –¥–∞—Ç—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
      const uniqueKey = `${sourceSheetId}:${tableName}:${reportDate}`;
      
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏: –∏—Å—Ç–æ—á–Ω–∏–∫="${tableName}" (ID: ${sourceSheetId}), –≥–æ—Å—Ç—å="${guestName}", –∑–∞—Å–µ–ª–µ–Ω–∏–µ="${isCheckin}", –≤—ã—Å–µ–ª–µ–Ω–∏–µ="${isCheckout}"`);
      
      if (!addressGroups[uniqueKey]) {
        addressGroups[uniqueKey] = {
          address: tableName, // –¢–µ–ø–µ—Ä—å –∞–¥—Ä–µ—Å = –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
          houseStatus: '',
          checkout: null,
          checkin: null
        };
      }

      if (isCheckout) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Å–µ–ª–µ–Ω–∏–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—Å–µ–ª–µ–Ω–∏–π)
        if (addressGroups[uniqueKey].checkout) {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—ã—Å–µ–ª–µ–Ω–∏—è—Ö
          addressGroups[uniqueKey].checkout.guestName += `, ${guestName}`;
          addressGroups[uniqueKey].checkout.phone += `, ${phone}`;
          addressGroups[uniqueKey].checkout.comment += `; ${comment}`;
        } else {
          addressGroups[uniqueKey].checkout = {
            guestName,
            phone,
            comment
          };
        }
      }

      if (isCheckin) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Å–µ–ª–µ–Ω–∏–∏, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—Å–µ–ª–µ–Ω–∏–π)
        if (addressGroups[uniqueKey].checkin) {
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞—Å–µ–ª–µ–Ω–∏—è—Ö
          addressGroups[uniqueKey].checkin.guestName += `, ${guestName}`;
          addressGroups[uniqueKey].checkin.phone += `, ${phone}`;
          addressGroups[uniqueKey].checkin.comment += `; ${comment}`;
          if (dayComments) {
            addressGroups[uniqueKey].checkin.dayComments += `; ${dayComments}`;
          }
          // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Å—É–º–º–∏—Ä—É–µ–º
          if (totalAmount && !isNaN(parseFloat(totalAmount.toString().replace(/\s/g, '')))) {
            const currentTotal = parseFloat(addressGroups[uniqueKey].checkin.totalAmount?.toString().replace(/\s/g, '') || '0');
            const newTotal = parseFloat(totalAmount.toString().replace(/\s/g, ''));
            addressGroups[uniqueKey].checkin.totalAmount = (currentTotal + newTotal).toLocaleString();
          }
        } else {
          addressGroups[uniqueKey].checkin = {
            guestName,
            phone,
            checkoutDate,
            dayCount,
            totalAmount,
            prepayment,
            additionalPayment,
            comment,
            dayComments
          };
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
      if (addressGroups[uniqueKey].checkout && addressGroups[uniqueKey].checkin) {
        addressGroups[uniqueKey].houseStatus = '–í—ã—Å/–ó–∞—Å'; // –ò –≤—ã—Å–µ–ª–µ–Ω–∏–µ –∏ –∑–∞—Å–µ–ª–µ–Ω–∏–µ
      } else if (addressGroups[uniqueKey].checkout) {
        addressGroups[uniqueKey].houseStatus = '–í—ã—Å–µ–ª–µ–Ω–∏–µ';
      } else if (addressGroups[uniqueKey].checkin) {
        addressGroups[uniqueKey].houseStatus = '–ó–∞—Å–µ–ª–µ–Ω–∏–µ';
      }
    }
  });

  // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏ –æ—Ç—á–µ—Ç–∞ - –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∞–¥—Ä–µ—Å
  let currentReportRow = 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏ (0 - –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞, 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
  
  Object.values(addressGroups).forEach((group: any) => {
    // –ö–æ–ª–æ–Ω–∫–∞ 0: –ê–¥—Ä–µ—Å
    reportCells.push({
      sheetId: reportSheetId,
      row: currentReportRow,
      column: 0,
      value: group.address
    });

    // –ö–æ–ª–æ–Ω–∫–∞ 1: –°—Ç–∞—Ç—É—Å –¥–æ–º–∞
    reportCells.push({
      sheetId: reportSheetId,
      row: currentReportRow,
      column: 1,
      value: group.houseStatus
    });

    // –°–µ–∫—Ü–∏—è –í–´–°–ï–õ–ï–ù–ò–ï (–∫–æ–ª–æ–Ω–∫–∏ 2-5)
    if (group.checkout) {
      reportCells.push(
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 2, // –§–ò–û –≤—ã—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
          value: group.checkout.guestName
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 3, // –¢–µ–ª–µ—Ñ–æ–Ω –≤—ã—Å–µ–ª—è—é—â–µ–≥–æ—Å—è  
          value: group.checkout.phone
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 4, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è
          value: group.checkout.comment
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 5, // –í—Ä–µ–º—è –≤—ã—Å–µ–ª–µ–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
          value: ''
        }
      );
    } else {
      // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –≤—ã—Å–µ–ª–µ–Ω–∏—è
      for (let col = 2; col <= 5; col++) {
        reportCells.push({
          sheetId: reportSheetId,
          row: currentReportRow,
          column: col,
          value: ''
        });
      }
    }

    // –°–µ–∫—Ü–∏—è –ó–ê–°–ï–õ–ï–ù–ò–ï (–∫–æ–ª–æ–Ω–∫–∏ 6-15)
    if (group.checkin) {
      reportCells.push(
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 6, // –§–ò–û –∑–∞—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
          value: group.checkin.guestName
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 7, // –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
          value: group.checkin.phone
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 8, // –í—Ä–µ–º—è –∑–∞—Å–µ–ª–µ–Ω–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
          value: ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 9, // –î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è
          value: group.checkin.checkoutDate
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 10, // –ö–æ–ª-–≤–æ –¥–Ω–µ–π
          value: group.checkin.dayCount
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 11, // –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
          value: group.checkin.totalAmount
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 12, // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (—Å—É–º–º–∞ –∞–≤–∞–Ω—Å–∞)
          value: group.checkin.prepayment
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 13, // –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –∑–∞—Å–µ–ª–µ–Ω–∏—è
          value: group.checkin.additionalPayment
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 14, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è
          value: group.checkin.comment
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 15, // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
          value: ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 16, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é –≤ –¥–µ–Ω—å –∑–∞—Å–µ–ª–µ–Ω–∏—è
          value: group.checkin.dayComments || ''
        }
      );
    } else {
      // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞—Å–µ–ª–µ–Ω–∏—è
      for (let col = 6; col <= 16; col++) {
        reportCells.push({
          sheetId: reportSheetId,
          row: currentReportRow,
          column: col,
          value: ''
        });
      }
    }

    currentReportRow++;
  });

  console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${reportCells.length} —è—á–µ–µ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ –¥–∞—Ç—É ${reportDate} (${Object.keys(addressGroups).length} –∞–¥—Ä–µ—Å–æ–≤)`);
  return reportCells;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞
export const updateLinkedReports = async (sourceSheetId: number) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º –∂—É—Ä–Ω–∞–ª–æ–º —á–µ—Ä–µ–∑ report_sources
    const reportSources = await ReportSource.findAll({
      where: { sourceSheetId: sourceSheetId }
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç
    for (const reportSource of reportSources) {
      await syncLinkedSheetDataFromMultipleSources(reportSource.reportSheetId);
    }

    // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ sourceSheetId (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const linkedReports = await Sheet.findAll({
      where: { sourceSheetId: sourceSheetId }
    });

    for (const report of linkedReports) {
      await syncLinkedSheetData(report.id, sourceSheetId);
    }

    return reportSources.length + linkedReports.length;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
export const updateReportDate = async (req: Request, res: Response) => {
  try {
    const { sheetId } = req.params;
    const { reportDate } = req.body;

    console.log('üìã Template route: PUT /update-report-date/' + sheetId);
    console.log('üìã Headers:', req.headers.authorization ? 'Authorization present' : 'No authorization');
    console.log('üìã Body:', req.body);

    // –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á–µ—Ç–∞
    const reportSheet = await Sheet.findByPk(sheetId);
    if (!reportSheet) {
      return res.status(404).json({
        error: '–¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞
    await reportSheet.update({ reportDate });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    await syncLinkedSheetDataFromMultipleSources(parseInt(sheetId), reportDate);

    res.json({
      message: '–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      reportDate
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞
export const getReportSources = async (req: Request, res: Response) => {
  try {
    const { sheetId } = req.params;

    const reportSources = await ReportSource.findAll({
      where: { reportSheetId: sheetId },
      include: [
        {
          model: Sheet,
          as: 'sourceSheet',
          attributes: ['id', 'name', 'description']
        }
      ]
    });

    res.json({
      message: '–°–≤—è–∑–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
      sources: reportSources
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤'
    });
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –∂—É—Ä–Ω–∞–ª–∞ —Å –æ—Ç—á–µ—Ç–æ–º
export const addReportSource = async (req: Request, res: Response) => {
  try {
    const { sheetId } = req.params;
    const { sourceSheetId } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const reportSheet = await Sheet.findByPk(sheetId);
    const sourceSheet = await Sheet.findByPk(sourceSheetId);

    if (!reportSheet || !sourceSheet) {
      return res.status(404).json({
        error: '–û–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const [reportSource, created] = await ReportSource.findOrCreate({
      where: { reportSheetId: parseInt(sheetId), sourceSheetId: parseInt(sourceSheetId) },
      defaults: { reportSheetId: parseInt(sheetId), sourceSheetId: parseInt(sourceSheetId) }
    });

    if (!created) {
      return res.status(400).json({
        error: '–°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await syncLinkedSheetDataFromMultipleSources(parseInt(sheetId));

    res.status(201).json({
      message: '–ñ—É—Ä–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –æ—Ç—á–µ—Ç—É',
      reportSource
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –∫ –æ—Ç—á–µ—Ç—É:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ –∫ –æ—Ç—á–µ—Ç—É'
    });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –∂—É—Ä–Ω–∞–ª–∞ —Å –æ—Ç—á–µ—Ç–æ–º
export const removeReportSource = async (req: Request, res: Response) => {
  try {
    const { sheetId, sourceSheetId } = req.params;

    const deletedCount = await ReportSource.destroy({
      where: { reportSheetId: parseInt(sheetId), sourceSheetId: parseInt(sourceSheetId) }
    });

    if (deletedCount === 0) {
      return res.status(404).json({
        error: '–°–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏
    await syncLinkedSheetDataFromMultipleSources(parseInt(sheetId));

    res.json({
      message: '–ñ—É—Ä–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –æ—Ç—á–µ—Ç–∞'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ –∂—É—Ä–Ω–∞–ª–∞ —Å –æ—Ç—á–µ—Ç–æ–º:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏ –∂—É—Ä–Ω–∞–ª–∞ —Å –æ—Ç—á–µ—Ç–æ–º'
    });
  }
}; 