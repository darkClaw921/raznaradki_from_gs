import { Request, Response } from 'express';
import { SheetTemplate, Sheet, UserSheet, Cell } from '../models';

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
export const getTemplates = async (req: Request, res: Response) => {
  try {
    console.log('üîç getTemplates –≤—ã–∑–≤–∞–Ω');
    const templates = await SheetTemplate.findAll({
      where: { isActive: true },
      order: [['category', 'ASC'], ['name', 'ASC']]
    });
    console.log('‚úÖ –®–∞–±–ª–æ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã:', templates.length);

    res.json({
      message: '–®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
      templates
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
export const getTemplate = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    
    const template = await SheetTemplate.findByPk(id);
    
    if (!template) {
      return res.status(404).json({
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      message: '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
      template
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
export const createSheetFromTemplate = async (req: Request, res: Response) => {
  try {
    const { templateId } = req.params;
    const { name, description } = req.body;
    const userId = req.user.id;

    if (!name) {
      return res.status(400).json({
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    const template = await SheetTemplate.findByPk(templateId);
    if (!template) {
      return res.status(404).json({
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
    const sheet = await Sheet.create({
      name,
      description: description || template.description,
      createdBy: userId,
      rowCount: template.rowCount,
      columnCount: template.columnCount,
      isPublic: false,
      settings: {
        columnWidths: template.structure.columnWidths || {},
        rowHeights: {},
        frozenRows: 0,
        frozenColumns: 0
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å —Ç–∞–±–ª–∏—Ü–µ–π
    await UserSheet.create({
      userId,
      sheetId: sheet.id,
      permission: 'admin'
    });

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    const cellsToCreate = [];
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    if (template.structure.headers) {
      for (const header of template.structure.headers) {
        cellsToCreate.push({
          sheetId: sheet.id,
          row: header.row,
          column: header.column,
          value: header.value,
          format: header.format || {},
          isLocked: false
        });
      }
    }

    // –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    if (template.structure.sampleData) {
      for (const sampleCell of template.structure.sampleData) {
        cellsToCreate.push({
          sheetId: sheet.id,
          row: sampleCell.row,
          column: sampleCell.column,
          value: sampleCell.value,
          format: sampleCell.format || {},
          isLocked: false
        });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Ä–∞–∑–æ–º
    if (cellsToCreate.length > 0) {
      await Cell.bulkCreate(cellsToCreate);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const createdSheet = await Sheet.findByPk(sheet.id, {
      include: [
        {
          model: SheetTemplate,
          as: 'template',
          attributes: ['id', 'name', 'category']
        }
      ]
    });

    res.status(201).json({
      message: '–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞',
      sheet: createdSheet
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞'
    });
  }
}; 