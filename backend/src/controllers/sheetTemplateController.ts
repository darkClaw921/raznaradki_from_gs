import { Request, Response } from 'express';
import { SheetTemplate, Sheet, UserSheet, Cell } from '../models';

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
export const getTemplates = async (req: Request, res: Response) => {
  try {
    const templates = await SheetTemplate.findAll({
      where: { isActive: true },
      order: [['category', 'ASC'], ['name', 'ASC']]
    });

    const groupedTemplates = templates.reduce((acc: any, template: any) => {
      const category = template.category;
      if (!acc[category]) {
        acc[category] = [];
      }
      acc[category].push(template);
      return acc;
    }, {});

    res.json({
      templates: groupedTemplates,
      total: templates.length
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
export const getTemplate = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    
    const template = await SheetTemplate.findByPk(id);
    
    if (!template) {
      return res.status(404).json({
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      message: '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
      template
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞'
    });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
export const createSheetFromTemplate = async (req: Request, res: Response) => {
  console.log('üìã ENTER createSheetFromTemplate:', { params: req.params, body: req.body });
  try {
    // templateId –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL –∏–ª–∏ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    const templateId = req.params.templateId || req.body.templateId;
    const { name, description, sourceSheetId } = req.body;
    const userId = req.user.id;

    console.log('üîß Creating sheet from template:', { templateId, name, sourceSheetId });

    if (!templateId || !name) {
      return res.status(400).json({
        error: 'ID —à–∞–±–ª–æ–Ω–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    const template = await SheetTemplate.findByPk(parseInt(templateId));
    if (!template) {
      return res.status(404).json({
        error: '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (sourceSheetId) {
      const sourceSheet = await Sheet.findByPk(sourceSheetId);
      if (!sourceSheet) {
        return res.status(404).json({
          error: '–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      const hasAccessToSource = sourceSheet.createdBy === userId || sourceSheet.isPublic;
      if (!hasAccessToSource) {
        const userSheet = await UserSheet.findOne({
          where: { userId, sheetId: sourceSheetId }
        });
        if (!userSheet) {
          return res.status(403).json({
            error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ'
          });
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    const sheet = await Sheet.create({
      name,
      description: description || template.description,
      createdBy: userId,
      rowCount: template.rowCount,
      columnCount: template.columnCount,
      templateId: template.id,
      sourceSheetId: sourceSheetId || null,
      isPublic: false
    });

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å —Ç–∞–±–ª–∏—Ü–µ–π
    await UserSheet.create({
      userId,
      sheetId: sheet.id,
      permission: 'admin'
    });

    // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∞–±–ª–æ–Ω–∞
    const structure = template.structure;
    const cellsToCreate = [];

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (structure.headers && Array.isArray(structure.headers)) {
      for (const header of structure.headers) {
        cellsToCreate.push({
          sheetId: sheet.id,
          row: header.row,
          column: header.column,
          value: header.value,
          format: header.format || null
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if (!sourceSheetId && structure.sampleData && Array.isArray(structure.sampleData)) {
      for (const sample of structure.sampleData) {
        cellsToCreate.push({
          sheetId: sheet.id,
          row: sample.row,
          column: sample.column,
          value: sample.value,
          format: sample.format || null
        });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    if (cellsToCreate.length > 0) {
      await Cell.bulkCreate(cellsToCreate);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (sourceSheetId) {
      await syncLinkedSheetData(sheet.id, sourceSheetId);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const createdSheet = await Sheet.findByPk(sheet.id, {
      include: [
        {
          model: SheetTemplate,
          as: 'template',
          attributes: ['id', 'name', 'category']
        }
      ]
    });

    res.status(201).json({
      message: '–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞',
      sheet: createdSheet
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞'
    });
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
export const syncLinkedSheetData = async (reportSheetId: number, sourceSheetId: number, targetDate?: string) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    const sourceCells = await Cell.findAll({
      where: { sheetId: sourceSheetId },
      order: [['row', 'ASC'], ['column', 'ASC']]
    });

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const filteredData = filterJournalDataByDate(sourceCells, targetDate);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
    const reportCells = transformJournalToReport(filteredData, reportSheetId, targetDate);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    await Cell.destroy({
      where: {
        sheetId: reportSheetId,
        row: { [require('sequelize').Op.gt]: 0 } // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —è—á–µ–π–∫–∏ –æ—Ç—á–µ—Ç–∞
    if (reportCells.length > 0) {
      await Cell.bulkCreate(reportCells);
    }

    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
    throw error;
  }
};

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –¥–∞—Ç–µ
const filterJournalDataByDate = (cells: any[], targetDate?: string) => {
  if (!targetDate) return cells;

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  const rowsData: any = {};
  cells.forEach(cell => {
    if (!rowsData[cell.row]) {
      rowsData[cell.row] = {};
    }
    rowsData[cell.row][cell.column] = cell;
  });

  const filteredRows: any[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞—Ç–µ
  Object.keys(rowsData).forEach(rowIndex => {
    const row = rowsData[rowIndex];
    const checkinDate = row[1]?.value; // –ö–æ–ª–æ–Ω–∫–∞ "–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è"
    const checkoutDate = row[3]?.value; // –ö–æ–ª–æ–Ω–∫–∞ "–î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è"

    // –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –¥–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã—Å–µ–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–æ–π
    if (checkinDate === targetDate || checkoutDate === targetDate) {
      Object.values(row).forEach((cell: any) => filteredRows.push(cell));
    }
  });

  return filteredRows;
};

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
const transformJournalToReport = (journalCells: any[], reportSheetId: number, targetDate?: string) => {
  const reportCells: any[] = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  const rowsData: any = {};
  journalCells.forEach(cell => {
    if (!rowsData[cell.row]) {
      rowsData[cell.row] = {};
    }
    rowsData[cell.row][cell.column] = cell;
  });

  let currentReportRow = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1 —Å—Ç—Ä–æ–∫–∏ (0 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∂—É—Ä–Ω–∞–ª–∞
  Object.keys(rowsData).forEach(rowIndex => {
    const row = rowsData[rowIndex];
    const checkinDate = row[1]?.value; // –î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    const checkoutDate = row[3]?.value; // –î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è
    const guestName = row[4]?.value; // –§–ò–û
    const phone = row[5]?.value; // –¢–µ–ª–µ—Ñ–æ–Ω
    const totalAmount = row[6]?.value; // –û–±—â–∞—è —Å—É–º–º–∞
    const prepayment = row[7]?.value; // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
    const additionalPayment = row[8]?.value; // –î–æ–ø–ª–∞—Ç–∞
    const houseStatus = row[9]?.value; // –°—Ç–∞—Ç—É—Å –¥–æ–º–∞
    const comment = row[11]?.value; // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å (–ø–æ–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º)
    reportCells.push({
      sheetId: reportSheetId,
      row: currentReportRow,
      column: 0, // –ê–¥—Ä–µ—Å
      value: '29'
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∑–∞—Å–µ–ª–µ–Ω–∏–µ/–≤—ã—Å–µ–ª–µ–Ω–∏–µ)
    const isCheckout = checkoutDate === targetDate;
    const isCheckin = checkinDate === targetDate;

    if (isCheckout) {
      // –î–∞–Ω–Ω—ã–µ –≤—ã—Å–µ–ª–µ–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∏ 1-5)
      reportCells.push(
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 1, // –°—Ç–∞—Ç—É—Å –¥–æ–º–∞
          value: houseStatus || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 2, // –§–ò–û –≤—ã—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
          value: guestName || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 3, // –¢–µ–ª–µ—Ñ–æ–Ω –≤—ã—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
          value: phone || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 4, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –∂—É—Ä–Ω–∞–ª–∞
          value: comment || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 5, // –í—Ä–µ–º—è –≤—ã—Å–µ–ª–µ–Ω–∏—è
          value: '' // –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
        }
      );
    }

    if (isCheckin) {
      // –î–∞–Ω–Ω—ã–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∏ 6-15)
      reportCells.push(
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 6, // –§–ò–û –∑–∞—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
          value: guestName || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 7, // –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
          value: phone || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 8, // –í—Ä–µ–º—è –∑–∞—Å–µ–ª–µ–Ω–∏—è
          value: '' // –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 9, // –î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è
          value: checkoutDate || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 10, // –ö–æ–ª-–≤–æ –¥–Ω–µ–π
          value: row[2]?.value || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 11, // –û–±—â–∞—è —Å—É–º–º–∞
          value: totalAmount || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 12, // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
          value: prepayment || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 13, // –î–æ–ø–ª–∞—Ç–∞
          value: additionalPayment || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 14, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –∂—É—Ä–Ω–∞–ª–∞
          value: comment || ''
        },
        {
          sheetId: reportSheetId,
          row: currentReportRow,
          column: 15, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
          value: '' // –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
        }
      );
    }

    currentReportRow++;
  });

  return reportCells;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞
export const updateLinkedReports = async (sourceSheetId: number) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º –∂—É—Ä–Ω–∞–ª–æ–º
    const linkedReports = await Sheet.findAll({
      where: { sourceSheetId: sourceSheetId }
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç—á–µ—Ç
    for (const report of linkedReports) {
      await syncLinkedSheetData(report.id, sourceSheetId);
    }

    return linkedReports.length;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
    throw error;
  }
}; 