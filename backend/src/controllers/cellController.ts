import { Request, Response } from 'express';
import { Cell, Sheet, UserSheet, CellHistory, User, ReportSource, SheetTemplate } from '../models';
import { Op } from 'sequelize';
import { updateLinkedReports } from './sheetTemplateController';

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –æ—Ç—á–µ—Ç–∞ –≤ –∂—É—Ä–Ω–∞–ª
const handleReverseSync = async (sheetId: number, row: number, column: number, value: string, userId: number) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç—á–µ—Ç–æ–º –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è –∏ —Å—Ç–æ–ª–±—Ü–æ–º 16
    const currentSheet = await Sheet.findByPk(sheetId);

    if (!currentSheet) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å—Ç–æ–ª–±–µ—Ü 16
    const isReport = currentSheet.templateId === 2; // –®–∞–±–ª–æ–Ω "–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage"
    const isDayCommentsColumn = column === 16;

    if (!isReport || !isDayCommentsColumn) return;

    console.log(`üîÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –æ—Ç—á–µ—Ç ${sheetId}, —Å—Ç—Ä–æ–∫–∞ ${row}, —Å—Ç–æ–ª–±–µ—Ü ${column}, –∑–Ω–∞—á–µ–Ω–∏–µ "${value}"`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ
    const reportRowCells = await Cell.findAll({
      where: { sheetId, row },
      order: [['column', 'ASC']]
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ
    let guestName = '';
    let address = '';
    
    reportRowCells.forEach(cell => {
      if (cell.column === 0) address = cell.value || ''; // –ê–¥—Ä–µ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞)
      if (cell.column === 6) guestName = cell.value || ''; // –§–ò–û –∑–∞—Å–µ–ª—è—é—â–µ–≥–æ—Å—è
    });

    if (!guestName || !address) {
      console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: guestName="${guestName}", address="${address}"`);
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã
    const reportSources = await ReportSource.findAll({
      where: { reportSheetId: sheetId },
      include: [
        {
          model: Sheet,
          as: 'sourceSheet',
          attributes: ['id', 'name']
        }
      ]
    });

    // –ò—â–µ–º –∂—É—Ä–Ω–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–∞–¥—Ä–µ—Å—É)
    const matchingSource = reportSources.find(source => {
      const sourceSheet = (source as any).sourceSheet;
      return sourceSheet?.name === address;
    });

    if (!matchingSource) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∂—É—Ä–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${address}"`);
      return;
    }

    const sourceSheetId = matchingSource.sourceSheetId;
    console.log(`üîç –ù–∞–π–¥–µ–Ω –∂—É—Ä–Ω–∞–ª: ${address} (ID: ${sourceSheetId})`);

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ –∂—É—Ä–Ω–∞–ª–µ –ø–æ –§–ò–û –≥–æ—Å—Ç—è
    const journalCells = await Cell.findAll({
      where: { 
        sheetId: sourceSheetId,
        column: 4, // –°—Ç–æ–ª–±–µ—Ü –§–ò–û –≤ –∂—É—Ä–Ω–∞–ª–µ
        value: guestName
      }
    });

    if (journalCells.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –§–ò–û "${guestName}" –≤ –∂—É—Ä–Ω–∞–ª–µ ${sourceSheetId}`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü 12 (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ) –≤ –∂—É—Ä–Ω–∞–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    for (const guestCell of journalCells) {
      const journalRow = guestCell.row;
      const linkedBookingId = guestCell.bookingId || null;
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –≤ —Å—Ç–æ–ª–±—Ü–µ 12 –∂—É—Ä–Ω–∞–ª–∞
      let dayCommentsCell = await Cell.findOne({
        where: { 
          sheetId: sourceSheetId, 
          row: journalRow, 
          column: 12 
        }
      });

      if (dayCommentsCell) {
        const updatePayload: any = { value };
        if (linkedBookingId && !dayCommentsCell.bookingId) {
          updatePayload.bookingId = linkedBookingId;
        }
        await dayCommentsCell.update(updatePayload);
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ [${journalRow}, 12] –≤ —Ç–∞–±–ª–∏—Ü–µ ${sourceSheetId}: "${value}"`);
      } else {
        dayCommentsCell = await Cell.create({
          sheetId: sourceSheetId,
          row: journalRow,
          column: 12,
          value,
          formula: null,
          format: null,
          isLocked: false,
          bookingId: linkedBookingId || undefined
        });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —è—á–µ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ [${journalRow}, 12] –≤ —Ç–∞–±–ª–∏—Ü–µ ${sourceSheetId}: "${value}"`);
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∂—É—Ä–Ω–∞–ª–∞
      await CellHistory.create({
        cellId: dayCommentsCell.id,
        sheetId: sourceSheetId,
        row: journalRow,
        column: 12,
        oldValue: dayCommentsCell.value === value ? '' : dayCommentsCell.value,
        newValue: value,
        oldFormula: null,
        newFormula: null,
        oldFormat: null,
        newFormat: null,
        changedBy: userId,
        changeType: 'value'
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ handleReverseSync:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏
export const updateCell = async (req: Request, res: Response) => {
  try {
    const { sheetId, row, column } = req.params;
    const { value, formula, format } = req.body;
    const userId = req.user.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
    const sheet = await Sheet.findByPk(sheetId);
    if (!sheet) {
      return res.status(404).json({
        error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const userSheet = await UserSheet.findOne({
      where: { userId, sheetId }
    });

    const hasWriteAccess = sheet.createdBy === userId || 
                          (userSheet && ['write', 'admin'].includes(userSheet.permission));

    if (!hasWriteAccess) {
      return res.status(403).json({
        error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫'
      });
    }

    const rowNum = parseInt(row);
    const colNum = parseInt(column);

    // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    const existingCell = await Cell.findOne({
      where: { sheetId, row: rowNum, column: colNum }
    });

    // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏
    let cell = existingCell;

    let changeType: 'value' | 'formula' | 'format' | 'create' | 'delete' = 'value';
    let oldValue = '';
    let oldFormula = '';
    let oldFormat = {};

    if (cell) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        oldValue = cell.value || '';
        oldFormula = cell.formula || '';
        oldFormat = cell.format || {};

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (value !== undefined && value !== cell.value) {
        changeType = 'value';
      } else if (formula !== undefined && formula !== cell.formula) {
        changeType = 'formula';
      } else if (format !== undefined && JSON.stringify(format) !== JSON.stringify(cell.format)) {
        changeType = 'format';
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      await CellHistory.create({
        cellId: cell.id,
        sheetId: parseInt(sheetId),
        row: rowNum,
        column: colNum,
        oldValue: cell.value,
        newValue: value,
        oldFormula: cell.formula,
        newFormula: formula,
        oldFormat: cell.format,
        newFormat: format,
        changedBy: userId,
        changeType
      });

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–∏
      const updateData: any = {};
      if (value !== undefined) updateData.value = value;
      if (formula !== undefined) updateData.formula = formula;
      if (format !== undefined) updateData.format = format;

      // –ê–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ bookingId –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ 16
      try {
        const currentSheet = await Sheet.findByPk(sheetId);
        const isReportSheet = currentSheet?.templateId === 2; // –®–∞–±–ª–æ–Ω "–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage"
        const isDayCommentsCol = colNum === 16;
        
        console.log(`üîç –ê–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ bookingId: sheet="${currentSheet?.name}", isReport=${isReportSheet}, col=${colNum}, isDayComments=${isDayCommentsCol}, currentBookingId=${cell.bookingId}`);
        
        if (isReportSheet && isDayCommentsCol && !cell.bookingId) {
          console.log(`üîç –ò—â–µ–º bookingId –≤ —Å—Ç—Ä–æ–∫–µ ${rowNum} —Ç–∞–±–ª–∏—Ü—ã ${sheetId}`);
          
          const rowCellWithBooking = await Cell.findOne({
            where: {
              sheetId,
              row: rowNum,
              bookingId: { [Op.not]: null }
            }
          });
          
          if (rowCellWithBooking?.bookingId) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω bookingId –≤ —Å—Ç—Ä–æ–∫–µ: ${rowCellWithBooking.bookingId}`);
            updateData.bookingId = rowCellWithBooking.bookingId;
          } else {
            console.log(`üîç BookingId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ, –∏—â–µ–º —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª`);
            
            // –§–æ–ª–±—ç–∫: –ø–æ–ª—É—á–∞–µ–º bookingId –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –∞–¥—Ä–µ—Å—É –∏ –§–ò–û
            const reportRowCells = await Cell.findAll({
              where: { sheetId, row: rowNum },
              order: [['column', 'ASC']]
            });
            
            let guestName = '';
            let address = '';
            reportRowCells.forEach(rc => {
              if (rc.column === 0) address = rc.value || '';
              if (rc.column === 6) guestName = rc.value || '';
            });
            
            console.log(`üîç –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞: address="${address}", guestName="${guestName}"`);
            
            if (guestName && address) {
              const reportSources = await ReportSource.findAll({
                where: { reportSheetId: parseInt(sheetId) },
                include: [
                  {
                    model: Sheet,
                    as: 'sourceSheet',
                    attributes: ['id', 'name']
                  }
                ]
              });
              
              console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å –∂—É—Ä–Ω–∞–ª–∞–º–∏: ${reportSources.length}`);
              
              const matchingSource = reportSources.find(source => {
                const sourceSheet = (source as any).sourceSheet;
                return sourceSheet?.name === address;
              });
              
              const sourceSheetId = matchingSource?.sourceSheetId;
              console.log(`üîç –ù–∞–π–¥–µ–Ω –∂—É—Ä–Ω–∞–ª "${address}": ${sourceSheetId ? `ID ${sourceSheetId}` : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
              
              if (sourceSheetId) {
                const guestCellInJournal = await Cell.findOne({
                  where: { sheetId: sourceSheetId, column: 4, value: guestName }
                });
                
                if (guestCellInJournal?.bookingId) {
                  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω bookingId –≤ –∂—É—Ä–Ω–∞–ª–µ: ${guestCellInJournal.bookingId}`);
                  updateData.bookingId = guestCellInJournal.bookingId;
                } else {
                  console.log(`‚ùå BookingId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∂—É—Ä–Ω–∞–ª–µ –¥–ª—è –≥–æ—Å—Ç—è "${guestName}"`);
                }
              }
            } else {
              console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞: address="${address}", guestName="${guestName}"`);
            }
          }
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è bookingId (updateCell):', e);
      }

      if (Object.keys(updateData).length > 0) {
        await cell.update(updateData);
      }
    } else {
      // –ê–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ bookingId –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è—á–µ–π–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ 16
      let bookingIdToSet: number | undefined = undefined;
      try {
        const currentSheet = await Sheet.findByPk(sheetId);
        const isReportSheet = currentSheet?.templateId === 2; // –®–∞–±–ª–æ–Ω "–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage"
        const isDayCommentsCol = colNum === 16;
        
        console.log(`üîç –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏ —Å bookingId: sheet="${currentSheet?.name}", isReport=${isReportSheet}, col=${colNum}, isDayComments=${isDayCommentsCol}`);
        
        if (isReportSheet && isDayCommentsCol) {
          console.log(`üîç –ò—â–µ–º bookingId –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ ${rowNum} —Ç–∞–±–ª–∏—Ü—ã ${sheetId}`);
          
          const rowCellWithBooking = await Cell.findOne({
            where: {
              sheetId,
              row: rowNum,
              bookingId: { [Op.not]: null }
            }
          });
          
          if (rowCellWithBooking?.bookingId) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω bookingId –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏: ${rowCellWithBooking.bookingId}`);
            bookingIdToSet = rowCellWithBooking.bookingId as number;
          } else {
            console.log(`üîç BookingId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏, –∏—â–µ–º —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª`);
            
            // –§–æ–ª–±—ç–∫: –ø–æ–ª—É—á–∞–µ–º bookingId –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –∞–¥—Ä–µ—Å—É –∏ –§–ò–û
            const reportRowCells = await Cell.findAll({
              where: { sheetId, row: rowNum },
              order: [['column', 'ASC']]
            });
            
            let guestName = '';
            let address = '';
            reportRowCells.forEach(rc => {
              if (rc.column === 0) address = rc.value || '';
              if (rc.column === 6) guestName = rc.value || '';
            });
            
            console.log(`üîç –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏: address="${address}", guestName="${guestName}"`);
            
            if (guestName && address) {
              const reportSources = await ReportSource.findAll({
                where: { reportSheetId: parseInt(sheetId) },
                include: [
                  {
                    model: Sheet,
                    as: 'sourceSheet',
                    attributes: ['id', 'name']
                  }
                ]
              });
              
              console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å –∂—É—Ä–Ω–∞–ª–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏: ${reportSources.length}`);
              
              const matchingSource = reportSources.find(source => {
                const sourceSheet = (source as any).sourceSheet;
                return sourceSheet?.name === address;
              });
              
              const sourceSheetId = matchingSource?.sourceSheetId;
              console.log(`üîç –ù–∞–π–¥–µ–Ω –∂—É—Ä–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏ "${address}": ${sourceSheetId ? `ID ${sourceSheetId}` : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
              
              if (sourceSheetId) {
                const guestCellInJournal = await Cell.findOne({
                  where: { sheetId: sourceSheetId, column: 4, value: guestName }
                });
                
                if (guestCellInJournal?.bookingId) {
                  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω bookingId –≤ –∂—É—Ä–Ω–∞–ª–µ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏: ${guestCellInJournal.bookingId}`);
                  bookingIdToSet = guestCellInJournal.bookingId as number;
                } else {
                  console.log(`‚ùå BookingId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∂—É—Ä–Ω–∞–ª–µ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –≥–æ—Å—Ç—è "${guestName}"`);
                }
              }
            } else {
              console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏: address="${address}", guestName="${guestName}"`);
            }
          }
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è bookingId –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (updateCell):', e);
      }

      cell = await Cell.create({
        sheetId: parseInt(sheetId),
        row: rowNum,
        column: colNum,
        value: value || '',
        formula: formula || null,
        format: format || null,
        isLocked: false,
        bookingId: bookingIdToSet
      });

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏
      await CellHistory.create({
        cellId: cell.id,
        sheetId: parseInt(sheetId),
        row: rowNum,
        column: colNum,
        oldValue: null,
        newValue: value,
        oldFormula: null,
        newFormula: formula,
        oldFormat: null,
        newFormat: format,
        changedBy: userId,
        changeType: 'create'
      });
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    await CellHistory.create({
      cellId: cell.id,
      sheetId: parseInt(sheetId),
      row: parseInt(row),
      column: parseInt(column),
      changedBy: userId,
      changeType,
      oldValue,
      newValue: cell.value || '',
      oldFormula,
      newFormula: cell.formula || '',
      oldFormat: oldFormat,
      newFormat: cell.format || {}
    });

    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ 16 –æ—Ç—á–µ—Ç–æ–≤ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    try {
      await handleReverseSync(parseInt(sheetId), rowNum, colNum, value || '', userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∂—É—Ä–Ω–∞–ª–µ
    try {
      const updatedReports = await updateLinkedReports(parseInt(sheetId));
      if (updatedReports > 0) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedReports} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }

    res.json({
      message: '–Ø—á–µ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      cell,
      changeType
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏
export const getCell = async (req: Request, res: Response) => {
  try {
    const { sheetId, row, column } = req.params;
    
    const cell = await Cell.findOne({
      where: {
        sheetId,
        row: parseInt(row),
        column: parseInt(column)
      }
    });

    res.json({
      cell: cell || {
        row: parseInt(row),
        column: parseInt(column),
        value: '',
        formula: null,
        format: null
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è—á–µ–π–∫–∏:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —è—á–µ–π–∫–∏
export const getCellHistory = async (req: Request, res: Response) => {
  try {
    const { sheetId, row, column } = req.params;
    const { limit = 50, offset = 0 } = req.query;

    const history = await CellHistory.findAll({
      where: {
        sheetId,
        row: parseInt(row),
        column: parseInt(column)
      },
      include: [
        {
          model: User,
          as: 'changedByUser',
          attributes: ['id', 'firstName', 'lastName', 'email']
        }
      ],
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit as string),
      offset: parseInt(offset as string)
    });

    res.json({
      history,
      total: await CellHistory.count({
        where: {
          sheetId,
          row: parseInt(row),
          column: parseInt(column)
        }
      })
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —è—á–µ–π–∫–∏:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É —è—á–µ–µ–∫
export const formatCells = async (req: Request, res: Response) => {
  try {
    const { sheetId } = req.params;
    const { startRow, endRow, startColumn, endColumn, format } = req.body;
    const userId = req.user.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
    const sheet = await Sheet.findByPk(sheetId);
    if (!sheet) {
      return res.status(404).json({
        error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const userSheet = await UserSheet.findOne({
      where: { userId, sheetId }
    });

    const hasWriteAccess = sheet.createdBy === userId || 
                          (userSheet && ['write', 'admin'].includes(userSheet.permission));

    if (!hasWriteAccess) {
      return res.status(403).json({
        error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      });
    }

    const updatedCells = [];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É —è—á–µ–µ–∫
    for (let row = startRow; row <= endRow; row++) {
      for (let col = startColumn; col <= endColumn; col++) {
        let cell = await Cell.findOne({
          where: { sheetId, row, column: col }
        });

        if (cell) {
          const oldFormat = cell.format;
          const newFormat = { ...oldFormat, ...format };
          
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
          await CellHistory.create({
            cellId: cell.id,
            sheetId: parseInt(sheetId),
            row,
            column: col,
            oldValue: cell.value,
            newValue: cell.value,
            oldFormula: cell.formula,
            newFormula: cell.formula,
            oldFormat,
            newFormat,
            changedBy: userId,
            changeType: 'format'
          });

          await cell.update({ format: newFormat });
          updatedCells.push(cell);
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          cell = await Cell.create({
            sheetId: parseInt(sheetId),
            row,
            column: col,
            value: '',
            formula: null,
            format,
            isLocked: false
          });

          await CellHistory.create({
            cellId: cell.id,
            sheetId: parseInt(sheetId),
            row,
            column: col,
            oldValue: null,
            newValue: '',
            oldFormula: null,
            newFormula: null,
            oldFormat: null,
            newFormat: format,
            changedBy: userId,
            changeType: 'create'
          });

          updatedCells.push(cell);
        }
      }
    }

    res.json({
      message: '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ',
      updatedCells: updatedCells.length
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
};

// –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ (–¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏)
export const updateCellsBatch = async (req: Request, res: Response) => {
  try {
    const { sheetId } = req.params;
    const { cells: cellsData } = req.body;
    const userId = req.user.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
    const sheet = await Sheet.findByPk(sheetId);
    if (!sheet) {
      return res.status(404).json({
        error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const userSheet = await UserSheet.findOne({
      where: { userId, sheetId }
    });

    const hasWriteAccess = sheet.createdBy === userId || 
                          (userSheet && ['write', 'admin'].includes(userSheet.permission));

    if (!hasWriteAccess) {
      return res.status(403).json({
        error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫'
      });
    }

    const updatedCells = [];
    const createdCells = [];

    console.log(`–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${cellsData.length} —è—á–µ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheetId}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for (const cellData of cellsData) {
      const { row, column, value, formula } = cellData;
      const rowNum = parseInt(row);
      const colNum = parseInt(column);

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —è—á–µ–π–∫—É
      let cell = await Cell.findOne({
        where: { sheetId, row: rowNum, column: colNum }
      });

      if (cell) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await CellHistory.create({
          cellId: cell.id,
          sheetId: parseInt(sheetId),
          row: rowNum,
          column: colNum,
          oldValue: cell.value,
          newValue: value,
          oldFormula: cell.formula,
          newFormula: formula,
          oldFormat: cell.format,
          newFormat: cell.format,
          changedBy: userId,
          changeType: value !== cell.value ? 'value' : 'formula'
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É
        const updateData: any = {};
        if (value !== undefined) updateData.value = value;
        if (formula !== undefined) updateData.formula = formula;

        // –ê–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ bookingId –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ 16
        try {
          const currentSheet = await Sheet.findByPk(sheetId);
          const isReportSheet = currentSheet?.name?.includes('–û—Ç—á–µ—Ç');
          const isDayCommentsCol = colNum === 16;
          if (isReportSheet && isDayCommentsCol && !cell.bookingId) {
            const rowCellWithBooking = await Cell.findOne({
              where: {
                sheetId,
                row: rowNum,
                bookingId: { [Op.not]: null }
              }
            });
            if (rowCellWithBooking?.bookingId) {
              updateData.bookingId = rowCellWithBooking.bookingId;
            } else {
              // –§–æ–ª–±—ç–∫: –ø–æ–ª—É—á–∞–µ–º bookingId –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –∞–¥—Ä–µ—Å—É –∏ –§–ò–û
              const reportRowCells = await Cell.findAll({
                where: { sheetId, row: rowNum },
                order: [['column', 'ASC']]
              });
              let guestName = '';
              let address = '';
              reportRowCells.forEach(rc => {
                if (rc.column === 0) address = rc.value || '';
                if (rc.column === 6) guestName = rc.value || '';
              });
              if (guestName && address) {
                const reportSources = await ReportSource.findAll({
                  where: { reportSheetId: parseInt(sheetId) },
                  include: [
                    {
                      model: Sheet,
                      as: 'sourceSheet',
                      attributes: ['id', 'name']
                    }
                  ]
                });
                const matchingSource = reportSources.find(source => {
                  const sourceSheet = (source as any).sourceSheet;
                  return sourceSheet?.name === address;
                });
                const sourceSheetId = matchingSource?.sourceSheetId;
                if (sourceSheetId) {
                  const guestCellInJournal = await Cell.findOne({
                    where: { sheetId: sourceSheetId, column: 4, value: guestName }
                  });
                  if (guestCellInJournal?.bookingId) {
                    updateData.bookingId = guestCellInJournal.bookingId;
                  }
                }
              }
            }
          }
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è bookingId (updateCellsBatch):', e);
        }

        if (Object.keys(updateData).length > 0) {
          await cell.update(updateData);
          updatedCells.push(cell);
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É
        let bookingIdToSet: number | undefined = undefined;
        try {
          const currentSheet = await Sheet.findByPk(sheetId);
          const isReportSheet = currentSheet?.name?.includes('–û—Ç—á–µ—Ç');
          const isDayCommentsCol = colNum === 16;
          if (isReportSheet && isDayCommentsCol) {
            const rowCellWithBooking = await Cell.findOne({
              where: {
                sheetId,
                row: rowNum,
                bookingId: { [Op.not]: null }
              }
            });
            if (rowCellWithBooking?.bookingId) {
              bookingIdToSet = rowCellWithBooking.bookingId as number;
            } else {
              // –§–æ–ª–±—ç–∫: –ø–æ–ª—É—á–∞–µ–º bookingId –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –ø–æ –∞–¥—Ä–µ—Å—É –∏ –§–ò–û
              const reportRowCells = await Cell.findAll({
                where: { sheetId, row: rowNum },
                order: [['column', 'ASC']]
              });
              let guestName = '';
              let address = '';
              reportRowCells.forEach(rc => {
                if (rc.column === 0) address = rc.value || '';
                if (rc.column === 6) guestName = rc.value || '';
              });
              if (guestName && address) {
                const reportSources = await ReportSource.findAll({
                  where: { reportSheetId: parseInt(sheetId) },
                  include: [
                    {
                      model: Sheet,
                      as: 'sourceSheet',
                      attributes: ['id', 'name']
                    }
                  ]
                });
                const matchingSource = reportSources.find(source => {
                  const sourceSheet = (source as any).sourceSheet;
                  return sourceSheet?.name === address;
                });
                const sourceSheetId = matchingSource?.sourceSheetId;
                if (sourceSheetId) {
                  const guestCellInJournal = await Cell.findOne({
                    where: { sheetId: sourceSheetId, column: 4, value: guestName }
                  });
                  if (guestCellInJournal?.bookingId) {
                    bookingIdToSet = guestCellInJournal.bookingId as number;
                  }
                }
              }
            }
          }
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è bookingId –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ (updateCellsBatch):', e);
        }

        cell = await Cell.create({
          sheetId: parseInt(sheetId),
          row: rowNum,
          column: colNum,
          value: value || '',
          formula: formula || null,
          format: null,
          isLocked: false,
          bookingId: bookingIdToSet
        });

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏
        await CellHistory.create({
          cellId: cell.id,
          sheetId: parseInt(sheetId),
          row: rowNum,
          column: colNum,
          oldValue: null,
          newValue: value,
          oldFormula: null,
          newFormula: formula,
          oldFormat: null,
          newFormat: null,
          changedBy: userId,
          changeType: 'create'
        });

        createdCells.push(cell);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try {
      const updatedReports = await updateLinkedReports(parseInt(sheetId));
      if (updatedReports > 0) {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedReports} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
    }

    res.json({
      message: '–Ø—á–µ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –º–∞—Å—Å–æ–≤–æ',
      updatedCells: updatedCells.length,
      createdCells: createdCells.length,
      totalProcessed: cellsData.length
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–µ–∫'
    });
  }
}; 