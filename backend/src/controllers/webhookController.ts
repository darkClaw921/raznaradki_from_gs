import { Request, Response } from 'express';
import { Op } from 'sequelize';
import { WebhookMapping, Sheet, Cell, SystemSettings } from '../models';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
export const getWebhookMapping = async (req: Request, res: Response) => {
  try {
    const { sheetId } = req.params;

    const mapping = await WebhookMapping.findOne({
      where: { sheetId },
      include: [{ model: Sheet, as: 'sheet' }]
    });

    res.json(mapping);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
export const updateWebhookMapping = async (req: Request, res: Response) => {
  try {
    const { sheetId } = req.params;
    const { apartmentTitles, isActive } = req.body;

    if (!apartmentTitles || !Array.isArray(apartmentTitles)) {
      return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const sheet = await Sheet.findByPk(sheetId);
    if (!sheet) {
      return res.status(404).json({ message: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const apartmentTitlesJson = JSON.stringify(apartmentTitles);

    const [mapping, created] = await WebhookMapping.findOrCreate({
      where: { sheetId },
      defaults: {
        sheetId: parseInt(sheetId),
        apartmentTitles: apartmentTitlesJson,
        isActive: isActive !== false
      }
    });

    if (!created) {
      mapping.apartmentTitles = apartmentTitlesJson;
      mapping.isActive = isActive !== false;
      await mapping.save();
    }

    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ${sheetId}`);
    res.json(mapping);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook' });
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ webhook
export const processWebhook = async (req: Request, res: Response) => {
  try {
    const { webhookId } = req.params;
    const webhookData = req.body;

    console.log('–ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å:', JSON.stringify(webhookData, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ webhook
    const webhookEnabledSetting = await SystemSettings.findOne({
      where: { key: 'webhook_enabled' }
    });

    if (!webhookEnabledSetting || webhookEnabledSetting.value !== 'true') {
      return res.status(403).json({ message: 'Webhook –æ—Ç–∫–ª—é—á–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å webhook ID
    const webhookSecretSetting = await SystemSettings.findOne({
      where: { key: 'webhook_secret' }
    });

    if (!webhookSecretSetting || webhookSecretSetting.value !== webhookId) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π webhook ID' });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const bookingData = extractBookingData(webhookData);
    if (!bookingData) {
      return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook' });
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    const targetSheets = await findTargetSheets(bookingData.apartmentTitle);
    
    if (targetSheets.length === 0) {
      console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤: ${bookingData.apartmentTitle}`);
      return res.json({ message: '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const sheet of targetSheets) {
      await addBookingToSheet(sheet, bookingData);
    }

    console.log(`–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ ${targetSheets.length} —Ç–∞–±–ª–∏—Ü`);
    res.json({ message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', processedSheets: targetSheets.length });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook' });
  }
};

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ webhook
function extractBookingData(webhookData: any) {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhookData:', {
      isArray: Array.isArray(webhookData),
      length: Array.isArray(webhookData) ? webhookData.length : '–Ω–µ –º–∞—Å—Å–∏–≤',
      hasData: webhookData?.data ? '–µ—Å—Ç—å data' : '–Ω–µ—Ç data',
      firstElement: Array.isArray(webhookData) && webhookData.length > 0 ? '–µ—Å—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç' : '–Ω–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞'
    });

    let bookingSource;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ (–∫–∞–∫ –≤ –ª–æ–≥–∞—Ö)
    if (Array.isArray(webhookData) && webhookData.length > 0) {
      // –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞ - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –µ–≥–æ body
      const firstElement = webhookData[0];
      if (firstElement?.body?.data?.booking) {
        bookingSource = firstElement.body.data.booking;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ: webhookData[0].body.data.booking');
      }
    } else if (webhookData?.data?.booking) {
      // –î–∞–Ω–Ω—ã–µ –≤ –ø—Ä—è–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞
      bookingSource = webhookData.data.booking;
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ: webhookData.data.booking');
    }

    if (!bookingSource) {
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ webhook');
      return null;
    }

    console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      apartment_title: bookingSource.apartment?.title,
      begin_date: bookingSource.begin_date,
      end_date: bookingSource.end_date,
      client_fio: bookingSource.client?.fio,
      client_phone: bookingSource.client?.phone,
      amount: bookingSource.amount,
      source: bookingSource.source
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const beginDate = new Date(bookingSource.begin_date);
    const endDate = new Date(bookingSource.end_date);
    const daysDiff = Math.ceil((endDate.getTime() - beginDate.getTime()) / (1000 * 60 * 60 * 24));

    const extractedData = {
      id: bookingSource.id, // ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∏
      apartmentTitle: bookingSource.apartment?.title || '',
      beginDate: bookingSource.begin_date,
      endDate: bookingSource.end_date,
      daysCount: daysDiff,
      guestName: bookingSource.client?.fio || '',
      phone: bookingSource.client?.phone || '',
      totalAmount: bookingSource.amount || 0,
      prepayment: bookingSource.prepayment || 0,
      pricePerDay: bookingSource.price_per_day || 0,
      statusCode: bookingSource.status_cd || 0,
      source: bookingSource.source || '',
      notes: bookingSource.notes || ''
    };

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', extractedData);
    return extractedData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return null;
  }
}

// –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
async function findTargetSheets(apartmentTitle: string) {
  try {
    const mappings = await WebhookMapping.findAll({
      where: { isActive: true },
      include: [{ model: Sheet, as: 'sheet' }]
    });

    const targetSheets = [];

    for (const mapping of mappings) {
      const apartmentTitles = JSON.parse(mapping.apartmentTitles);
      if (apartmentTitles.includes(apartmentTitle)) {
        targetSheets.push((mapping as any).sheet);
      }
    }

    return targetSheets;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–ª–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:', error);
    return [];
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
function formatMonthYear(dateString: string): string {
  const date = new Date(dateString);
  const monthNames = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
  ];
  
  const month = monthNames[date.getMonth()];
  const year = date.getFullYear();
  
  return `${month} ${year}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  
  return `${day}.${month}.${year}`;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
async function addBookingToSheet(sheet: any, bookingData: any) {
  try {
    const bookingId = bookingData.id;
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º booking_id
    const existingBookingCells = await Cell.findAll({
      where: { 
        sheetId: sheet.id,
        bookingId: bookingId
      },
      order: [['column', 'ASC']]
    });

    let targetRow: number;
    let isUpdate = false;

    if (existingBookingCells.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      targetRow = existingBookingCells[0].row;
      isUpdate = true;
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ID ${bookingId} –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.title}, —Å—Ç—Ä–æ–∫–∞ ${targetRow}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
      const lastCells = await Cell.findAll({
        where: { 
          sheetId: sheet.id,
          value: { [Op.ne]: '' } // –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
        },
        order: [['row', 'DESC']],
        limit: 1
      });

      const lastFilledRow = lastCells.length > 0 ? lastCells[0].row : 0;
      targetRow = lastFilledRow + 1;
      console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ID ${bookingId} –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.title}, —Å—Ç—Ä–æ–∫–∞ ${targetRow}`);
    }

    console.log(`üîç –ê–Ω–∞–ª–∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ID ${bookingId} –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.title}:`, {
      –æ–ø–µ—Ä–∞—Ü–∏—è: isUpdate ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '—Å–æ–∑–¥–∞–Ω–∏–µ',
      —Å—Ç—Ä–æ–∫–∞: targetRow,
      —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö_—è—á–µ–µ–∫: existingBookingCells.length
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã –∑–∞—Å–µ–ª–µ–Ω–∏—è
    const monthYear = formatMonthYear(bookingData.beginDate);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
    const formattedBeginDate = formatDate(bookingData.beginDate);
    const formattedEndDate = formatDate(bookingData.endDate);

    // –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ —è—á–µ–π–∫–∏ (–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —à–∞–±–ª–æ–Ω–æ–º "–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è DMD Cottage")
    const cellsData = [
      { row: targetRow, column: 0, value: monthYear }, // –ú–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ø–Ω–≤–∞—Ä—å 2025")
      { row: targetRow, column: 1, value: formattedBeginDate }, // –î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è (03.01.2025)
      { row: targetRow, column: 2, value: bookingData.daysCount.toString() }, // –ö–æ–ª-–≤–æ –¥–Ω–µ–π
      { row: targetRow, column: 3, value: formattedEndDate }, // –î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è (06.01.2025)
      { row: targetRow, column: 4, value: bookingData.guestName }, // –§–ò–û
      { row: targetRow, column: 5, value: bookingData.phone }, // –¢–µ–ª–µ—Ñ–æ–Ω
      { row: targetRow, column: 6, value: bookingData.totalAmount.toString() }, // –û–±—â–∞—è —Å—É–º–º–∞
      { row: targetRow, column: 7, value: bookingData.prepayment.toString() }, // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
      { row: targetRow, column: 8, value: bookingData.pricePerDay.toString() }, // –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å
      { row: targetRow, column: 10, value: bookingData.source }, // –ò—Å—Ç–æ—á–Ω–∏–∫
      { row: targetRow, column: 11, value: bookingData.notes }, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    ];

    console.log(`üìù ${isUpdate ? '–û–±–Ω–æ–≤–ª—è–µ–º—ã–µ' : '–î–æ–±–∞–≤–ª—è–µ–º—ã–µ'} –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É ${sheet.title}:`, {
      booking_id: bookingId,
      —Å—Ç—Ä–æ–∫–∞: targetRow,
      –æ–ø–µ—Ä–∞—Ü–∏—è: isUpdate ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '—Å–æ–∑–¥–∞–Ω–∏–µ',
      –º–µ—Å—è—Ü: monthYear,
      –¥–∞—Ç–∞_–∑–∞—Å–µ–ª–µ–Ω–∏—è: formattedBeginDate,
      –¥–Ω–∏: bookingData.daysCount,
      –¥–∞—Ç–∞_–≤—ã—Å–µ–ª–µ–Ω–∏—è: formattedEndDate,
      —Ñ–∏–æ: bookingData.guestName,
      —Ç–µ–ª–µ—Ñ–æ–Ω: bookingData.phone,
      —Å—É–º–º–∞: bookingData.totalAmount
    });

    if (isUpdate) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏
      for (const cellData of cellsData) {
        await Cell.update(
          { 
            value: cellData.value,
            formula: null 
          },
          {
            where: {
              sheetId: sheet.id,
              row: cellData.row,
              column: cellData.column,
              bookingId: bookingId
            }
          }
        );
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —è—á–µ–π–∫–∏
      for (const cellData of cellsData) {
        await Cell.create({
          sheetId: sheet.id,
          row: cellData.row,
          column: cellData.column,
          value: cellData.value,
          formula: null,
          bookingId: bookingId
        });
      }
    }

    console.log(`‚úÖ ${isUpdate ? '–û–±–Ω–æ–≤–ª–µ–Ω–æ' : '–î–æ–±–∞–≤–ª–µ–Ω–æ'} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID ${bookingId} –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.title} (ID: ${sheet.id}), —Å—Ç—Ä–æ–∫–∞ ${targetRow}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É ${sheet.id}:`, error);
  }
} 