import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import dotenv from 'dotenv';
import path from 'path';
import { sequelize } from './models';
import authRoutes from './routes/authRoutes';
import userRoutes from './routes/userRoutes';
import roleRoutes from './routes/roleRoutes';
import sheetRoutes from './routes/sheetRoutes';
import cellRoutes from './routes/cellRoutes';
import groupRoutes from './routes/groupRoutes';
import sheetTemplateRoutes from './routes/sheetTemplateRoutes';
import systemRoutes from './routes/systemRoutes';
import webhookRoutes from './routes/webhookRoutes';
import { initializeSocketHandlers } from './websocket/socketHandlers';
import { authenticateToken } from './middleware/auth';
import { initializeAdmin } from './utils/initAdmin';
import { runMigrations } from './utils/migrations';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();
// –î–ª—è Docker - —Ç–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
if (!process.env.ADMIN_EMAIL) {
  dotenv.config({ path: path.join(__dirname, '../../.env') });
}

const app = express();
const server = createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–≤–µ—Ä–∏—è –∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å nginx
app.set('trust proxy', true);

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins –¥–ª—è CORS
const allowedOrigins = [
  process.env.FRONTEND_URL || "http://localhost",
  "http://localhost:3000",
  "http://localhost",
  // Production –¥–æ–º–µ–Ω
  "https://dmd-cottage.alteran-industries.ru",
  // Legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
  /^https?:\/\/.*\.orb\.local(:\d+)?$/,
  /^https:\/\/nginx\.raznaradki-from-gs\.orb\.local$/
];

const io = new Server(server, {
  cors: {
    origin: allowedOrigins,
    credentials: true
  }
});

// Middleware
app.use(helmet());

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware –¥–ª—è CORS
app.use((req, res, next) => {
  console.log(`üåê ${req.method} ${req.path} - Origin: ${req.headers.origin}`);
  next();
});

app.use(cors({
  origin: allowedOrigins,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 10000, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});
app.use('/api/', limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –ú–∞—Ä—à—Ä—É—Ç—ã
console.log('üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
app.use('/api/auth', authRoutes);
app.use('/api/users', authenticateToken, userRoutes);
app.use('/api/roles', authenticateToken, roleRoutes);
app.use('/api/groups', authenticateToken, groupRoutes);
app.use('/api/sheets', authenticateToken, sheetRoutes);
app.use('/api/cells', authenticateToken, cellRoutes);
console.log('üìã –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã templates...', typeof sheetTemplateRoutes);
app.use('/api/templates', sheetTemplateRoutes);
app.use('/api/system', systemRoutes);
app.use('/api/webhook', webhookRoutes);
console.log('‚úÖ –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
initializeSocketHandlers(io);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ 
    error: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use('*', (req: express.Request, res: express.Response) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

const PORT = process.env.PORT || 3001;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
sequelize.authenticate()
  .then(() => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    return sequelize.sync();
  })
  .then(() => {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π...');
    return runMigrations();
  })
  .then(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–î –∏ –º–∏–≥—Ä–∞—Ü–∏–π
    return initializeAdmin();
  })
  .then(() => {
    server.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
  })
  .catch((error: any) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  });

export { io }; 