import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { Box, Paper, TextField } from '@mui/material';
import { cellsApi, sheetsExtendedApi, sheetsApi } from '../../services/api';
import Cell from './Cell';
import FormatToolbar from './FormatToolbar';
import CellHistoryDialog from './CellHistoryDialog';
import { FormulaEngine } from '../../utils/formulaEngine';
import { debounce } from 'lodash';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  IconButton,
  Tooltip
} from '@mui/material';
import HistoryIcon from '@mui/icons-material/History';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import SortIcon from '@mui/icons-material/Sort';
import { styled } from '@mui/material/styles';
// @ts-ignore
import * as XLSX from 'xlsx';
import { Button, Stack } from '@mui/material';

interface SpreadsheetProps {
  sheet: any;
  userPermissions: string;
  reportDate?: string;
}

interface CellData {
  row: number;
  column: number;
  value: string;
  formula?: string;
  format?: any;
}

interface CellSelection {
  startRow: number;
  endRow: number;
  startColumn: number;
  endColumn: number;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
const ROW_HEIGHT_DEFAULT = 30;
const HEADER_HEIGHT = 30;
const BUFFER_SIZE = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤—ã—à–µ –∏ –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏

const Spreadsheet: React.FC<SpreadsheetProps> = ({ sheet, userPermissions, reportDate }) => {
  const [cells, setCells] = useState<Map<string, CellData>>(new Map());
  const [selectedCell, setSelectedCell] = useState<{ row: number; column: number } | null>(null);
  const [selectedRange, setSelectedRange] = useState<CellSelection | null>(null);
  const [editingCell, setEditingCell] = useState<{ row: number; column: number } | null>(null);
  const [editValue, setEditValue] = useState('');
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState<{ row: number; column: number } | null>(null);
  const [historyDialogOpen, setHistoryDialogOpen] = useState(false);
  const [historyCell, setHistoryCell] = useState<{ row: number; column: number } | null>(null);
  const [columnSizes, setColumnSizes] = useState<{ [key: number]: number }>({});
  const [rowSizes, setRowSizes] = useState<{ [key: number]: number }>({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [sortConfig, setSortConfig] = useState<{
    column: number;
    direction: 'asc' | 'desc';
  } | null>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ settings –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã
  useEffect(() => {
    if (sheet?.settings) {
      const { columnSizes: savedColumnSizes = {}, rowSizes: savedRowSizes = {} } = sheet.settings;
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ settings:', { savedColumnSizes, savedRowSizes });
      setColumnSizes(savedColumnSizes);
      setRowSizes(savedRowSizes);
    }
  }, [sheet?.settings]);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ sheet
  useEffect(() => {
    if (sheet && sheet.id) {
      console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã:', sheet.name, 'ID:', sheet.id);
      console.log('‚öôÔ∏è Settings —Ç–∞–±–ª–∏—Ü—ã:', sheet.settings);
    }
  }, [sheet]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
  const [clipboard, setClipboard] = useState<{
    data: Map<string, CellData>;
    range: CellSelection;
    operation: 'copy' | 'cut';
  } | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const [scrollTop, setScrollTop] = useState(0);
  const [containerHeight, setContainerHeight] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);
  const gridContainerRef = useRef<HTMLDivElement>(null);

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  const debouncedUpdateSelection = useMemo(
    () => debounce((startRow: number, endRow: number, startColumn: number, endColumn: number) => {
      setSelectedRange({ startRow, endRow, startColumn, endColumn });
    }, 16), // ~60fps
    []
  );

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
  const debouncedScrollUpdate = useMemo(
    () => debounce((scrollTop: number) => {
      setScrollTop(scrollTop);
    }, 16), // ~60fps
    []
  );

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const getRowHeight = (row: number): number => {
    return rowSizes[row] || ROW_HEIGHT_DEFAULT;
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
  const getTotalHeight = useCallback(() => {
    const rowCount = sheet.rowCount || 100;
    let total = 0;
    for (let i = 0; i < rowCount; i++) {
      total += getRowHeight(i);
    }
    return total;
  }, [sheet.rowCount, rowSizes]);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
  const getVisibleRows = useCallback(() => {
    const rowCount = sheet.rowCount || 100;
    
    if (containerHeight === 0) {
      return { startRow: 0, endRow: Math.min(20, rowCount - 1) }; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    let currentHeight = 0;
    let startRow = 0;
    let endRow = 0;

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –≤–∏–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 0; i < rowCount; i++) {
      const rowHeight = getRowHeight(i);
      if (currentHeight + rowHeight > scrollTop) {
        startRow = Math.max(0, i - BUFFER_SIZE);
        break;
      }
      currentHeight += rowHeight;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∏–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É
    currentHeight = 0;
    for (let i = 0; i < rowCount; i++) {
      currentHeight += getRowHeight(i);
      if (currentHeight > scrollTop + containerHeight + BUFFER_SIZE * ROW_HEIGHT_DEFAULT) {
        endRow = Math.min(i, rowCount - 1);
        break;
      }
    }

    if (endRow === 0) endRow = rowCount - 1;

    return { startRow, endRow };
  }, [scrollTop, containerHeight, sheet.rowCount, rowSizes]);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º offset –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∏–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
  const getRowOffset = useCallback((targetRow: number) => {
    let offset = 0;
    for (let i = 0; i < targetRow; i++) {
      offset += getRowHeight(i);
    }
    return offset;
  }, [rowSizes]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —è—á–µ–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (sheet?.cells) {
      const cellsMap = new Map<string, CellData>();
      sheet.cells.forEach((cell: any) => {
        const key = `${cell.row}-${cell.column}`;
        cellsMap.set(key, cell);
      });
      setCells(cellsMap);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
    if (sheet?.settings) {
      setColumnSizes(sheet.settings.columnSizes || {});
      setRowSizes(sheet.settings.rowSizes || {});
    }
  }, [sheet]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  useEffect(() => {
    const updateContainerSize = () => {
      if (containerRef.current) {
        setContainerHeight(containerRef.current.clientHeight);
      }
    };

    updateContainerSize();
    window.addEventListener('resize', updateContainerSize);
    return () => window.removeEventListener('resize', updateContainerSize);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    const target = e.target as HTMLDivElement;
    debouncedScrollUpdate(target.scrollTop);
  }, [debouncedScrollUpdate]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–µ
  const scrollToCell = useCallback((row: number) => {
    if (!containerRef.current) return;

    const targetOffset = getRowOffset(row);
    const containerHeight = containerRef.current.clientHeight;
    const rowHeight = getRowHeight(row);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–Ω–∞ –ª–∏ —è—á–µ–π–∫–∞
    const isVisible = targetOffset >= scrollTop && 
                     targetOffset + rowHeight <= scrollTop + containerHeight;

    if (!isVisible) {
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã —è—á–µ–π–∫–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞
      let newScrollTop;
      if (targetOffset < scrollTop) {
        // –Ø—á–µ–π–∫–∞ –≤—ã—à–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        newScrollTop = targetOffset - BUFFER_SIZE * ROW_HEIGHT_DEFAULT;
      } else {
        // –Ø—á–µ–π–∫–∞ –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        newScrollTop = targetOffset - containerHeight + rowHeight + BUFFER_SIZE * ROW_HEIGHT_DEFAULT;
      }

      containerRef.current.scrollTop = Math.max(0, newScrollTop);
    }
  }, [getRowOffset, getRowHeight, scrollTop]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ (–¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      if (e.key === 'Escape') {
        e.preventDefault();
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        setSelectedCell(null);
        setSelectedRange(null);
        setEditingCell(null);
        setClipboard(null);
        setEditValue('');
        console.log('Escape –Ω–∞–∂–∞—Ç: –æ—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
        return;
      }

      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –µ—Å–ª–∏ –∏–¥—ë—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
      if (editingCell) return;
      
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –¥—Ä—É–≥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –≤–≤–æ–¥–∞
      if (document.activeElement && ['INPUT', 'TEXTAREA'].includes(document.activeElement.tagName)) {
        return;
      }

      if (!selectedCell) return;

      const maxRows = sheet.rowCount || 100;
      const maxCols = sheet.columnCount || 26;

      switch (e.key) {
        case 'ArrowUp':
          e.preventDefault();
          if (selectedCell.row > 0) {
            const newRow = selectedCell.row - 1;
            setSelectedCell({ row: newRow, column: selectedCell.column });
            setSelectedRange({ startRow: newRow, endRow: newRow, startColumn: selectedCell.column, endColumn: selectedCell.column });
            scrollToCell(newRow);
          }
          break;
        case 'ArrowDown':
          e.preventDefault();
          if (selectedCell.row < maxRows - 1) {
            const newRow = selectedCell.row + 1;
            setSelectedCell({ row: newRow, column: selectedCell.column });
            setSelectedRange({ startRow: newRow, endRow: newRow, startColumn: selectedCell.column, endColumn: selectedCell.column });
            scrollToCell(newRow);
          }
          break;
        case 'ArrowLeft':
          e.preventDefault();
          if (selectedCell.column > 0) {
            const newCol = selectedCell.column - 1;
            setSelectedCell({ row: selectedCell.row, column: newCol });
            setSelectedRange({ startRow: selectedCell.row, endRow: selectedCell.row, startColumn: newCol, endColumn: newCol });
          }
          break;
        case 'ArrowRight':
          e.preventDefault();
          if (selectedCell.column < maxCols - 1) {
            const newCol = selectedCell.column + 1;
            setSelectedCell({ row: selectedCell.row, column: newCol });
            setSelectedRange({ startRow: selectedCell.row, endRow: selectedCell.row, startColumn: newCol, endColumn: newCol });
          }
          break;
        case 'Enter':
          e.preventDefault();
          if (userPermissions !== 'read' && selectedCell) {
            handleCellDoubleClick(selectedCell.row, selectedCell.column);
          }
          break;
        case 'Delete':
        case 'Backspace':
          e.preventDefault();
          if (userPermissions !== 'read') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
            if (selectedRange) {
              console.log('–£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', selectedRange);
              
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å—Ä–∞–∑—É
              const newCells = new Map(cells);
              let deletedCount = 0;
              
              for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
                for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
                  const key = getCellKey(row, col);
                  const existingCell = newCells.get(key);
                  
                  if (existingCell && existingCell.value !== '') {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    const clearedCell: CellData = {
                      ...existingCell,
                      value: '',
                      formula: undefined
                    };
                    newCells.set(key, clearedCell);
                    deletedCount++;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ backend
                    debouncedSaveCell(row, col, '');
                    console.log(`–û—á–∏—â–µ–Ω–∞ —è—á–µ–π–∫–∞ [${row}, ${col}]`);
                  }
                }
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
              setCells(newCells);
              console.log(`–û—á–∏—â–µ–Ω–æ ${deletedCount} —è—á–µ–µ–∫`);
            } else if (selectedCell) {
              // –ï—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —è—á–µ–π–∫–∞
              console.log('–£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏:', selectedCell);
              setCellValue(selectedCell.row, selectedCell.column, '');
            }
          }
          break;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∫–ª–∞–≤–∏—à —Å Ctrl
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case 'c':
          case 'C':
            e.preventDefault();
            copySelectedCells();
            break;
          case 'x':
          case 'X':
            e.preventDefault();
            cutSelectedCells();
            break;
          case 'v':
          case 'V':
            e.preventDefault();
            pasteClipboard();
            break;
        }
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è paste –¥–ª—è —É–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const handlePaste = async (e: ClipboardEvent) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∏–¥—ë—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ –∏–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
      if (editingCell || !selectedCell || userPermissions === 'read') {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º paste: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ=', editingCell, '–≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞=', selectedCell, '–ø—Ä–∞–≤–∞=', userPermissions);
        return;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤–≤–æ–¥–∞ (–∫—Ä–æ–º–µ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã)
      const activeElement = document.activeElement;
      if (activeElement && ['INPUT', 'TEXTAREA'].includes(activeElement.tagName)) {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º paste: —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤–≤–æ–¥–∞');
        return;
      }

      e.preventDefault();
      e.stopPropagation();
      
      console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º paste —Å–æ–±—ã—Ç–∏–µ');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        const clipboardData = e.clipboardData;
        let textData = '';

        if (clipboardData) {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
          textData = clipboardData.getData('text/plain') || 
                    clipboardData.getData('text/tab-separated-values') ||
                    clipboardData.getData('text/csv');
        }

        if (!textData) {
          // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ navigator.clipboard
          try {
            textData = await navigator.clipboard.readText();
          } catch (clipboardError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å clipboard —á–µ—Ä–µ–∑ navigator:', clipboardError);
          }
        }

        if (textData) {
          console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', textData);
          
          // –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º
          const rows = textData.split(/\r?\n/).filter(row => row.trim() !== '');
          const startRow = selectedCell.row;
          const startCol = selectedCell.column;

          let pastedCount = 0;
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const newCells = new Map(cells);
          
          rows.forEach((rowText, rowIndex) => {
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex}: "${rowText}"`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
            let cellValues = [];
            
            // –ü—Ä–æ–±—É–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é (TSV) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if (rowText.includes('\t')) {
              cellValues = rowText.split('\t');
              console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏:', cellValues);
            } 
            // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—è—Ç—É—é (CSV)
            else if (rowText.includes(',') && !rowText.includes(';')) {
              cellValues = rowText.split(',');
              console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ –∑–∞–ø—è—Ç–æ–π:', cellValues);
            }
            // –ü—Ä–æ–±—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
            else if (rowText.includes(';')) {
              cellValues = rowText.split(';');
              console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π:', cellValues);
            }
            // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–æ–π —è—á–µ–π–∫–æ–π
            else {
              cellValues = [rowText];
              console.log('–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –æ–¥–Ω–∞ —è—á–µ–π–∫–∞:', cellValues);
            }

            cellValues.forEach((cellText, colIndex) => {
              const targetRow = startRow + rowIndex;
              const targetCol = startCol + colIndex;

              console.log(`–í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é [${targetRow}, ${targetCol}] –∑–Ω–∞—á–µ–Ω–∏–µ: "${cellText}"`);

              if (targetRow < (sheet.rowCount || 100) && targetCol < (sheet.columnCount || 26)) {
                // –û—á–∏—â–∞–µ–º –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                const cleanValue = cellText.replace(/^["']|["']$/g, '').trim();
                console.log(`–û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${cleanValue}"`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ Map
                const key = getCellKey(targetRow, targetCol);
                const existingCell = newCells.get(key);
                
                const updatedCell: CellData = {
                  row: targetRow,
                  column: targetCol,
                  value: cleanValue,
                  formula: existingCell?.formula,
                  format: existingCell?.format,
                };
                
                newCells.set(key, updatedCell);
                pastedCount++;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ backend
                debouncedSaveCell(targetRow, targetCol, cleanValue);
              } else {
                console.log(`–ü–æ–∑–∏—Ü–∏—è [${targetRow}, ${targetCol}] –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã`);
              }
            });
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
          setCells(newCells);

          console.log(`–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${pastedCount} —è—á–µ–µ–∫ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`);
        } else {
          console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('paste', handlePaste, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capture —Ñ–∞–∑—É
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('paste', handlePaste, true);
    };
  }, [selectedCell, editingCell, selectedRange, userPermissions, sheet, clipboard]);

  // Debounced —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏
  const debouncedSaveCell = useCallback(
    debounce(async (row: number, column: number, value: string, formula?: string) => {
      if (userPermissions === 'read') return;
      
      try {
        await cellsApi.updateCell(sheet.id, row, column, {
          value,
          formula: formula || undefined,
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏:', error);
      }
    }, 500),
    [sheet.id, userPermissions]
  );

  // –§—É–Ω–∫—Ü–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏ (–¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
  const saveCell = useCallback(async (row: number, column: number, value: string, formula?: string) => {
    if (userPermissions === 'read') return;
    
    try {
      await cellsApi.updateCell(sheet.id, row, column, {
        value,
        formula: formula || undefined,
      });
      console.log(`–Ø—á–µ–π–∫–∞ [${row}, ${column}] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ: "${value}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏:', error);
    }
  }, [sheet.id, userPermissions]);

  // –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫ (–¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏)
  const saveCellsBatch = useCallback(async (cellsToSave: Array<{
    row: number;
    column: number;
    value?: string;
    formula?: string;
  }>) => {
    if (userPermissions === 'read' || cellsToSave.length === 0) return;
    
    try {
      await cellsApi.updateCellsBatch(sheet.id, cellsToSave);
      console.log(`–ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${cellsToSave.length} —è—á–µ–µ–∫`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫:', error);
    }
  }, [sheet.id, userPermissions]);

  const getCellKey = (row: number, column: number) => `${row}-${column}`;

  const getCellValue = (row: number, column: number): string => {
    const key = getCellKey(row, column);
    const cell = cells.get(key);
    if (!cell) return '';
    
    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—É, –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (cell.formula && cell.formula.startsWith('=')) {
        const engine = new FormulaEngine(cells);
      const result = engine.evaluate(cell.formula);
      return result.toString();
      }
    
    return cell.value || '';
  };

  const getCellFormat = (row: number, column: number): any => {
    const key = getCellKey(row, column);
    return cells.get(key)?.format || {};
  };

  const setCellValue = (row: number, column: number, value: string, formula?: string) => {
    const key = getCellKey(row, column);
    const existingCell = cells.get(key);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const currentValue = existingCell?.value || '';
    const currentFormula = existingCell?.formula || '';
    
    if (currentValue === value && currentFormula === (formula || '')) {
      // –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      return;
    }
    
    const updatedCell: CellData = {
      row,
      column,
      value,
      formula: formula || existingCell?.formula,
      format: existingCell?.format,
    };
    
    const newCells = new Map(cells);
      newCells.set(key, updatedCell);
    setCells(newCells);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –≤ –∂—É—Ä–Ω–∞–ª–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    if (sheet.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è')) {
      calculateAdditionalPayment(newCells, row, column);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ backend —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    debouncedSaveCell(row, column, value, formula);
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–ª–∞—Ç—ã (–æ–±—â–∞—è —Å—É–º–º–∞ - –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)
  const calculateAdditionalPayment = (cellsMap: Map<string, CellData>, row: number, column: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü "–û–±—â–∞—è —Å—É–º–º–∞" (6) –∏–ª–∏ "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞" (7)
    if (column === 6 || column === 7) {
      const totalAmountKey = getCellKey(row, 6); // –û–±—â–∞—è —Å—É–º–º–∞
      const prepaymentKey = getCellKey(row, 7);  // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
      const additionalPaymentKey = getCellKey(row, 8); // –î–æ–ø–ª–∞—Ç–∞
      
      const totalAmount = cellsMap.get(totalAmountKey)?.value || '';
      const prepayment = cellsMap.get(prepaymentKey)?.value || '';
      
      if (totalAmount && prepayment) {
        // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        const totalNum = parseFloat(totalAmount.replace(/[\s,]/g, '').replace(',', '.'));
        const prepaymentNum = parseFloat(prepayment.replace(/[\s,]/g, '').replace(',', '.'));
        
        if (!isNaN(totalNum) && !isNaN(prepaymentNum)) {
          const additionalPayment = totalNum - prepaymentNum;
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ç—ã—Å—è—á
          const formattedValue = additionalPayment.toLocaleString('ru-RU', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
          });
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø–ª–∞—Ç—ã
          cellsMap.set(additionalPaymentKey, { 
            row, 
            column: 8, 
            value: formattedValue 
          });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          setTimeout(async () => {
            try {
              await cellsApi.updateCell(sheet.id, row, 8, {
                value: formattedValue
              });
              console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–æ–ø–ª–∞—Ç–∞: ${formattedValue} (–æ–±—â–∞—è: ${totalAmount}, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: ${prepayment})`);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –¥–æ–ø–ª–∞—Ç—ã:', error);
            }
          }, 100);
        }
      }
    }
  };

  const handleCellClick = (row: number, column: number, e?: React.MouseEvent) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    if (e) {
      e.preventDefault();
    }

    if (userPermissions === 'read') {
      setSelectedCell({ row, column });
      setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
      setEditingCell(null);
      return;
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è "–°—Ç–∞—Ç—É—Å –¥–æ–º–∞"
    const isHouseStatusField = sheet.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è') && column === 9 && row > 0;
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (selectedCell && selectedCell.row === row && selectedCell.column === column) {
      setEditingCell({ row, column });
      
      // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const key = getCellKey(row, column);
      const cell = cells.get(key);
      const editableValue = cell?.formula || cell?.value || '';
      setEditValue(editableValue);
    } 
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–ª—è –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞ —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    else if (isHouseStatusField) {
      setSelectedCell({ row, column });
      setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
      setEditingCell({ row, column });
      
      // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const key = getCellKey(row, column);
      const cell = cells.get(key);
      const editableValue = cell?.formula || cell?.value || '';
      setEditValue(editableValue);
    } 
    else {
      // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —è—á–µ–π–∫—É
      setSelectedCell({ row, column });
      setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
      setEditingCell(null);
    }
  };

  const handleCellMouseDown = (row: number, column: number) => {
    // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    setIsDragging(true);
    setDragStart({ row, column });
    setSelectedCell({ row, column });
    setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
    setEditingCell(null);
  };

  const handleCellMouseEnter = (row: number, column: number) => {
    if (isDragging && dragStart) {
      const startRow = Math.min(dragStart.row, row);
      const endRow = Math.max(dragStart.row, row);
      const startColumn = Math.min(dragStart.column, column);
      const endColumn = Math.max(dragStart.column, column);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      debouncedUpdateSelection(startRow, endRow, startColumn, endColumn);
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
    setDragStart(null);
  };

  const handleCellDoubleClick = (row: number, column: number) => {
    if (userPermissions === 'read') return;
    
    setEditingCell({ row, column });
    setSelectedCell({ row, column });
    
    // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const key = getCellKey(row, column);
    const cell = cells.get(key);
    const editableValue = cell?.formula || cell?.value || '';
    setEditValue(editableValue);
  };

  const handleEditKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      if (editingCell) {
        saveCellWithFormula(editingCell.row, editingCell.column, editValue);
        setEditingCell(null);
        setEditValue('');
      }
    } else if (e.key === 'Tab') {
      e.preventDefault();
      if (editingCell) {
        saveCellWithFormula(editingCell.row, editingCell.column, editValue);
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–µ
        const nextColumn = editingCell.column + 1;
        if (nextColumn < (sheet.columnCount || 26)) {
          setSelectedCell({ row: editingCell.row, column: nextColumn });
          setSelectedRange({ 
            startRow: editingCell.row, 
            endRow: editingCell.row, 
            startColumn: nextColumn, 
            endColumn: nextColumn 
          });
        }
        setEditingCell(null);
        setEditValue('');
      }
    } else if (e.key === 'Escape') {
      // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      e.preventDefault();
      e.stopPropagation();
      setEditingCell(null);
      setEditValue('');
    }
  };

  const handleEditBlur = () => {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    if (editingCell && editValue !== undefined && editValue !== null) {
      console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞:', editingCell, '–∑–Ω–∞—á–µ–Ω–∏–µ:', editValue);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const key = getCellKey(editingCell.row, editingCell.column);
      const existingCell = cells.get(key);
      const currentValue = existingCell?.formula || existingCell?.value || '';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (editValue !== currentValue) {
        saveCellWithFormula(editingCell.row, editingCell.column, editValue);
        console.log('–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º');
      } else {
        console.log('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º');
    }

    setEditingCell(null);
    setEditValue('');
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º—É–ª
  const saveCellWithFormula = (row: number, column: number, value: string) => {
    if (value.startsWith('=')) {
      // –≠—Ç–æ —Ñ–æ—Ä–º—É–ª–∞
      const engine = new FormulaEngine(cells);
      const computedValue = engine.evaluate(value);
      setCellValue(row, column, computedValue.toString(), value);
    } else {
      // –û–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      setCellValue(row, column, value);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
  const copySelectedCells = () => {
    if (!selectedRange) return;

    const clipboardData = new Map<string, CellData>();
    
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const key = getCellKey(row, col);
        const cell = cells.get(key);
        
        if (cell) {
          const relativeKey = getCellKey(
            row - selectedRange.startRow, 
            col - selectedRange.startColumn
          );
          clipboardData.set(relativeKey, { ...cell });
        }
      }
    }

    setClipboard({
      data: clipboardData,
      range: { ...selectedRange },
      operation: 'copy'
    });

    // –¢–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TSV
    const textData = [];
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      const rowData = [];
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const value = getCellValue(row, col);
        rowData.push(value);
      }
      textData.push(rowData.join('\t'));
    }
    
    navigator.clipboard.writeText(textData.join('\n')).catch(console.error);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
  const cutSelectedCells = () => {
    if (!selectedRange || userPermissions === 'read') return;

    const clipboardData = new Map<string, CellData>();
    
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const key = getCellKey(row, col);
        const cell = cells.get(key);
        
        if (cell) {
          const relativeKey = getCellKey(
            row - selectedRange.startRow, 
            col - selectedRange.startColumn
          );
          clipboardData.set(relativeKey, { ...cell });
        }
      }
    }

    setClipboard({
      data: clipboardData,
      range: { ...selectedRange },
      operation: 'cut'
    });

    // –û—á–∏—â–∞–µ–º –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
    const newCells = new Map(cells);
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const cellsToSave: Array<{row: number; column: number; value: string}> = [];
    
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const key = getCellKey(row, col);
        const existingCell = newCells.get(key);
        
        if (existingCell) {
          const clearedCell: CellData = {
            ...existingCell,
            value: '',
            formula: undefined
          };
          newCells.set(key, clearedCell);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          cellsToSave.push({
            row: row,
            column: col,
            value: ''
          });
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    setCells(newCells);
    
    // –ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    if (cellsToSave.length > 0) {
      saveCellsBatch(cellsToSave);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
  const pasteClipboard = async () => {
    if (!selectedCell || userPermissions === 'read') return;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
      const text = await navigator.clipboard.readText();
      if (text) {
        console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞:', text);
        
        // –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º
        const rows = text.split(/\r?\n/).filter(row => row.trim() !== '');
        const startRow = selectedCell.row;
        const startCol = selectedCell.column;

        let pastedCount = 0;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const newCells = new Map(cells);
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const cellsToSave: Array<{row: number; column: number; value: string; formula?: string}> = [];

        rows.forEach((rowText, rowIndex) => {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex}: "${rowText}"`);
          
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
          let cellValues = [];
          
          // –ü—Ä–æ–±—É–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é (TSV) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
          if (rowText.includes('\t')) {
            cellValues = rowText.split('\t');
            console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏:', cellValues);
          } 
          // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—è—Ç—É—é (CSV)
          else if (rowText.includes(',') && !rowText.includes(';')) {
            cellValues = rowText.split(',');
            console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ –∑–∞–ø—è—Ç–æ–π:', cellValues);
          }
          // –ü—Ä–æ–±—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
          else if (rowText.includes(';')) {
            cellValues = rowText.split(';');
            console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π:', cellValues);
          }
          // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–æ–π —è—á–µ–π–∫–æ–π
          else {
            cellValues = [rowText];
            console.log('–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –æ–¥–Ω–∞ —è—á–µ–π–∫–∞:', cellValues);
          }

          cellValues.forEach((cellText, colIndex) => {
            const targetRow = startRow + rowIndex;
            const targetCol = startCol + colIndex;

            console.log(`–í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é [${targetRow}, ${targetCol}] –∑–Ω–∞—á–µ–Ω–∏–µ: "${cellText}"`);

            if (targetRow < (sheet.rowCount || 100) && targetCol < (sheet.columnCount || 26)) {
              // –û—á–∏—â–∞–µ–º –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
              const cleanValue = cellText.replace(/^["']|["']$/g, '').trim();
              console.log(`–û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${cleanValue}"`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ Map
              const key = getCellKey(targetRow, targetCol);
              const existingCell = newCells.get(key);
              
              const updatedCell: CellData = {
                row: targetRow,
                column: targetCol,
                value: cleanValue,
                formula: existingCell?.formula,
                format: existingCell?.format,
              };
              
              newCells.set(key, updatedCell);
              pastedCount++;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
              cellsToSave.push({
                row: targetRow,
                column: targetCol,
                value: cleanValue
              });
            } else {
              console.log(`–ü–æ–∑–∏—Ü–∏—è [${targetRow}, ${targetCol}] –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã`);
            }
          });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        setCells(newCells);
        
        // –ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (cellsToSave.length > 0) {
          saveCellsBatch(cellsToSave);
        }

        console.log(`–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${pastedCount} —è—á–µ–µ–∫ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞`);
        return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–∏–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
      }

      // –ï—Å–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—É—Ñ–µ—Ä–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
      if (clipboard) {
        console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—É—Ñ–µ—Ä–∞:', clipboard);
        const startRow = selectedCell.row;
        const startCol = selectedCell.column;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const newCells = new Map(cells);
        let pastedCount = 0;
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const cellsToSave: Array<{row: number; column: number; value: string; formula?: string}> = [];
        
        clipboard.data.forEach((cellData, relativeKey) => {
          const [relRow, relCol] = relativeKey.split('-').map(Number);
          const targetRow = startRow + relRow;
          const targetCol = startCol + relCol;

          console.log(`–í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏—é [${targetRow}, ${targetCol}]:`, cellData.value);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã
          if (targetRow < (sheet.rowCount || 100) && targetCol < (sheet.columnCount || 26)) {
            const key = getCellKey(targetRow, targetCol);
            
            const updatedCell: CellData = {
              row: targetRow,
              column: targetCol,
              value: cellData.value,
              formula: cellData.formula,
              format: cellData.format,
            };
            
            newCells.set(key, updatedCell);
            pastedCount++;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            cellsToSave.push({
              row: targetRow,
              column: targetCol,
              value: cellData.value,
              formula: cellData.formula
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            if (cellData.format) {
              handleCellFormat(targetRow, targetCol, cellData.format);
            }
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        setCells(newCells);
        
        // –ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (cellsToSave.length > 0) {
          saveCellsBatch(cellsToSave);
        }
        console.log(`–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${pastedCount} —è—á–µ–µ–∫ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—É—Ñ–µ—Ä–∞`);

        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è, –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        if (clipboard.operation === 'cut') {
          setClipboard(null);
        }
      } else {
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–∞—Ö –æ–±–º–µ–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π —è—á–µ–π–∫–µ
  const handleCellFormat = async (row: number, column: number, format: any) => {
    try {
      await cellsApi.formatCells(sheet.id, format, row, row, column, column);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const key = getCellKey(row, column);
      const newCells = new Map(cells);
      const existingCell = newCells.get(key);
      const updatedFormat = { ...existingCell?.format, ...format };
      
      if (existingCell) {
        newCells.set(key, { ...existingCell, format: updatedFormat });
      } else {
        newCells.set(key, {
          row,
          column,
          value: '',
          format: updatedFormat
        });
      }
      setCells(newCells);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —è—á–µ–π–∫–µ:', error);
    }
  };

  const handleFormat = async (format: any) => {
    if (!selectedRange || userPermissions === 'read') return;
    
    try {
      await cellsApi.formatCells(
        sheet.id,
        format,
        selectedRange.startRow,
        selectedRange.endRow,
        selectedRange.startColumn,
        selectedRange.endColumn
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫
      const newCells = new Map(cells);
      for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
        for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
          const key = getCellKey(row, col);
          const existingCell = newCells.get(key);
          const updatedFormat = { ...existingCell?.format, ...format };
          
          if (existingCell) {
            newCells.set(key, { ...existingCell, format: updatedFormat });
          } else {
            newCells.set(key, {
              row,
              column: col,
              value: '',
              format: updatedFormat
            });
          }
        }
      }
      setCells(newCells);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
      if (format.textWrap === 'wrap') {
        for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
          let maxRequiredHeight = ROW_HEIGHT_DEFAULT;
          
          for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
            const cellValue = getCellValue(row, col);
            const columnWidth = getColumnWidth(col);
            
            if (cellValue && cellValue.length > 0) {
              // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã: 
              // ~10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ 100px —à–∏—Ä–∏–Ω—ã = 1 —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
              // –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ ~20px –≤—ã—Å–æ—Ç—ã
              const charWidth = 8; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
              const charsPerLine = Math.floor((columnWidth - 16) / charWidth); // -16px –¥–ª—è padding
              const linesNeeded = Math.ceil(cellValue.length / charsPerLine);
              const lineHeight = 20; // –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
              const requiredHeight = Math.max(ROW_HEIGHT_DEFAULT, linesNeeded * lineHeight + 8); // +8px padding
              
              maxRequiredHeight = Math.max(maxRequiredHeight, requiredHeight);
            }
          }
          
          const currentHeight = getRowHeight(row);
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –º–∏–Ω–∏–º—É–º –¥–æ 60px –∏–ª–∏ –¥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã
          const newHeight = Math.max(currentHeight, maxRequiredHeight, 60);
          
          if (newHeight !== currentHeight) {
            setRowSizes(prev => ({ ...prev, [row]: newHeight }));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É –≤ backend
            try {
              await sheetsExtendedApi.resizeRow(sheet.id.toString(), row, newHeight);
              console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ ${row} –¥–æ ${newHeight}px –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ–±—É–µ—Ç ${maxRequiredHeight}px)`);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏:', error);
            }
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  };

  const handleAddRow = async (count: number = 1) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
      await sheetsExtendedApi.addRowsBatch(sheet.id.toString(), count);
      window.location.reload(); // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫:', error);
    }
  };

  const handleAddColumn = async (count: number = 1) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
      await sheetsExtendedApi.addColumnsBatch(sheet.id.toString(), count);
      window.location.reload(); // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤:', error);
    }
  };

  const handleShowHistory = (row: number, column: number) => {
    setHistoryCell({ row, column });
      setHistoryDialogOpen(true);
  };

  const isInSelectedRange = useCallback((row: number, column: number): boolean => {
    if (!selectedRange) return false;
    return row >= selectedRange.startRow && row <= selectedRange.endRow &&
           column >= selectedRange.startColumn && column <= selectedRange.endColumn;
  }, [selectedRange]);

  const isInClipboardRange = useCallback((row: number, column: number): boolean => {
    if (!clipboard) return false;
    const { range } = clipboard;
    return row >= range.startRow && row <= range.endRow &&
           column >= range.startColumn && column <= range.endColumn;
  }, [clipboard]);

  const getColumnWidth = (column: number): number => {
    return columnSizes[column] || 100;
  };

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ A, B, Z, AA, AB
  const generateColumnName = (columnIndex: number): string => {
    let result = '';
    let num = columnIndex + 1; // –î–µ–ª–∞–µ–º 1-based –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    
    while (num > 0) {
      num--; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ 0-based –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
      result = String.fromCharCode(65 + (num % 26)) + result;
      num = Math.floor(num / 26);
    }
    
    return result;
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∂—É—Ä–Ω–∞–ª–æ–º –∑–∞—Å–µ–ª–µ–Ω–∏—è
  const isJournalSheet = useMemo(() => {
    return sheet?.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è') || 
           sheet?.template?.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è');
  }, [sheet?.name, sheet?.template?.name]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const sortCells = useCallback((column: number, direction: 'asc' | 'desc') => {
    if (!isJournalSheet) return;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ - —Å—Ç—Ä–æ–∫—É 0)
    const dataRows: { [row: number]: Map<number, CellData> } = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    for (let row = 1; row < (sheet.rowCount || 100); row++) {
      const rowCells = new Map<number, CellData>();
      let hasData = false;
      
      for (let col = 0; col < (sheet.columnCount || 26); col++) {
        const key = getCellKey(row, col);
        const cell = cells.get(key);
        if (cell) {
          rowCells.set(col, cell);
          hasData = true;
        }
      }
      
      if (hasData) {
        dataRows[row] = rowCells;
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const rowsArray = Object.entries(dataRows).map(([rowStr, rowCells]) => ({
      originalRow: parseInt(rowStr),
      cells: rowCells
    }));

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É
    rowsArray.sort((a, b) => {
      const aCellKey = getCellKey(a.originalRow, column);
      const bCellKey = getCellKey(b.originalRow, column);
      const aCell = cells.get(aCellKey);
      const bCell = cells.get(bCellKey);
      
      let aValue = aCell?.value || '';
      let bValue = bCell?.value || '';

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–∞—Ç (—Å—Ç–æ–ª–±—Ü—ã 1 –∏ 3)
      if (column === 1 || column === 3) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ Date –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const parseDate = (dateStr: string): Date => {
          if (!dateStr || typeof dateStr !== 'string') return new Date(0);
          const match = dateStr.trim().match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
          if (match) {
            const [, day, month, year] = match;
            return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
          }
          return new Date(0);
        };

        const aDate = parseDate(aValue);
        const bDate = parseDate(bValue);
        
        const comparison = aDate.getTime() - bDate.getTime();
        return direction === 'asc' ? comparison : -comparison;
      }

      // –û–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
      if (direction === 'asc') {
        return aValue.localeCompare(bValue, 'ru', { numeric: true });
      } else {
        return bValue.localeCompare(aValue, 'ru', { numeric: true });
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —è—á–µ–µ–∫ —Å –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const newCells = new Map(cells);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    for (let row = 1; row < (sheet.rowCount || 100); row++) {
      for (let col = 0; col < (sheet.columnCount || 26); col++) {
        const key = getCellKey(row, col);
        newCells.delete(key);
      }
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    rowsArray.forEach((rowData, index) => {
      const newRow = index + 1; // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ 0 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      
      rowData.cells.forEach((cell, col) => {
        const newKey = getCellKey(newRow, col);
        newCells.set(newKey, {
          ...cell,
          row: newRow // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        });
      });
    });

    setCells(newCells);
    console.log(`üîÑ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Å—Ç–æ–ª–±—Ü—É ${column} (${direction === 'asc' ? '–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' : '–ø–æ —É–±—ã–≤–∞–Ω–∏—é'})`);
  }, [cells, sheet, isJournalSheet]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSort = (column: number) => {
    if (!isJournalSheet || (column !== 1 && column !== 3)) return;

    let newDirection: 'asc' | 'desc' = 'asc';
    
    if (sortConfig?.column === column) {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      newDirection = sortConfig.direction === 'asc' ? 'desc' : 'asc';
    }

    setSortConfig({ column, direction: newDirection });
    sortCells(column, newDirection);
  };

  const renderColumnHeaders = () => {
    const headers = [];
    for (let col = 0; col < (sheet.columnCount || 26); col++) {
      const width = getColumnWidth(col);
      const columnName = generateColumnName(col); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
      const needsSortButton = isJournalSheet && (col === 1 || col === 3);
      const isSorted = sortConfig?.column === col;
      const sortDirection = isSorted ? sortConfig.direction : null;
      
      headers.push(
        <Box
          key={col}
          sx={{
            width: width,
            height: 30,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: '#f5f5f5',
            border: '1px solid #e0e0e0',
            fontWeight: 'bold',
            fontSize: '0.875rem',
            position: 'relative',
            userSelect: 'none',
            WebkitUserSelect: 'none',
            MozUserSelect: 'none',
            msUserSelect: 'none',
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
          {columnName}
            {needsSortButton && (
              <Tooltip title={`–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ ${col === 1 ? '–¥–∞—Ç–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è' : '–¥–∞—Ç–µ –≤—ã—Å–µ–ª–µ–Ω–∏—è'}`}>
                <IconButton
                  size="small"
                  onClick={() => handleSort(col)}
                  sx={{
                    padding: '2px',
                    color: isSorted ? '#1976d2' : '#666',
                    '&:hover': {
                      backgroundColor: 'rgba(25, 118, 210, 0.1)',
                    },
                  }}
                >
                  {isSorted ? (
                    sortDirection === 'asc' ? (
                      <ArrowUpwardIcon sx={{ fontSize: 14 }} />
                    ) : (
                      <ArrowDownwardIcon sx={{ fontSize: 14 }} />
                    )
                  ) : (
                    <SortIcon sx={{ fontSize: 14 }} />
                  )}
                </IconButton>
              </Tooltip>
            )}
          </Box>
          {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ */}
          <Box
            sx={{
              position: 'absolute',
              right: 0,
              top: 0,
              bottom: 0,
              width: 4,
              cursor: 'col-resize',
              '&:hover': {
                backgroundColor: '#1976d2',
              },
            }}
            onMouseDown={(e) => {
              e.preventDefault();
              const startX = e.clientX;
              const startWidth = width;
              let finalWidth = startWidth; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã
              
              const handleMouseMove = (e: MouseEvent) => {
                const newWidth = Math.max(50, startWidth + (e.clientX - startX));
                finalWidth = newWidth; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
                setColumnSizes(prev => ({ ...prev, [col]: newWidth }));
              };
              
              const handleMouseUp = async () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
                
                try {
                  console.log(`üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ ${col}: ${finalWidth}px –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.id}`);
                  const response = await sheetsExtendedApi.resizeColumn(sheet.id.toString(), col, finalWidth);
                  console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ ${col}: ${finalWidth}px`, response);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ settings –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                  if (response?.data?.settings?.columnSizes) {
                    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–æ–ª–±—Ü–æ–≤:`, response.data.settings.columnSizes);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                    setColumnSizes(prevSizes => ({
                      ...prevSizes,
                      ...response.data.settings.columnSizes
                    }));
                  } else {
                    console.warn(`‚ö†Ô∏è Settings –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ:`, response);
                    
                    // –ï—Å–ª–∏ settings –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å sheet
                    try {
                      console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º sheet –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö settings`);
                      const sheetResponse = await sheetsApi.getSheet(sheet.id.toString());
                      if (sheetResponse.data?.sheet?.settings?.columnSizes) {
                        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã settings –∏–∑ getSheet:`, sheetResponse.data.sheet.settings.columnSizes);
                        setColumnSizes(sheetResponse.data.sheet.settings.columnSizes);
                      }
                    } catch (reloadError) {
                      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ sheet:', reloadError);
                    }
                  }
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–∞:', error);
                }
              };
              
              document.addEventListener('mousemove', handleMouseMove);
              document.addEventListener('mouseup', handleMouseUp);
            }}
          />
        </Box>
      );
    }
    return headers;
  };

  const renderRowHeader = (row: number) => {
    const height = getRowHeight(row);
    
    return (
      <Box
        sx={{
          width: 50,
          height: height,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: '#f5f5f5',
          border: '1px solid #e0e0e0',
          fontWeight: 'bold',
          fontSize: '0.875rem',
          position: 'relative',
          userSelect: 'none',
          WebkitUserSelect: 'none',
          MozUserSelect: 'none',
          msUserSelect: 'none',
        }}
      >
        {row + 1}
        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ */}
        <Box
          sx={{
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            height: 4,
            cursor: 'row-resize',
            '&:hover': {
              backgroundColor: '#1976d2',
            },
          }}
          onMouseDown={(e) => {
            e.preventDefault();
            const startY = e.clientY;
            const startHeight = height;
            let finalHeight = startHeight; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
            
            const handleMouseMove = (e: MouseEvent) => {
              const newHeight = Math.max(20, startHeight + (e.clientY - startY));
              finalHeight = newHeight; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
              setRowSizes(prev => ({ ...prev, [row]: newHeight }));
            };
            
            const handleMouseUp = async () => {
              document.removeEventListener('mousemove', handleMouseMove);
              document.removeEventListener('mouseup', handleMouseUp);
              
              try {
                console.log(`üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ ${row}: ${finalHeight}px –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.id}`);
                const response = await sheetsExtendedApi.resizeRow(sheet.id.toString(), row, finalHeight);
                console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ ${row}: ${finalHeight}px`, response);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ settings –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                if (response?.data?.settings?.rowSizes) {
                  console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–æ–∫:`, response.data.settings.rowSizes);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                  setRowSizes(prevSizes => ({
                    ...prevSizes,
                    ...response.data.settings.rowSizes
                  }));
                } else {
                  console.warn(`‚ö†Ô∏è Settings –¥–ª—è —Å—Ç—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ:`, response);
                }
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏:', error);
              }
            };
            
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
          }}
        />
      </Box>
    );
  };

  const renderGrid = () => {
    const { startRow, endRow } = getVisibleRows();
    const rows = [];
    const totalHeight = getTotalHeight();
    const startOffset = getRowOffset(startRow);
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
    const virtualContainer = (
      <Box
        sx={{
          height: totalHeight,
          position: 'relative',
        }}
      >
        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫ */}
        <Box
          sx={{
            position: 'absolute',
            top: startOffset,
            left: 0,
            right: 0,
          }}
        >
          {(() => {
            const visibleRows = [];
            
            for (let row = startRow; row <= endRow; row++) {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É 0 –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ (—à–∞–ø–∫–∞)
              if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç') && row === 0) continue;
              const cells = [];
              const rowHeight = getRowHeight(row);
      
              for (let col = 0; col < (sheet.columnCount || 26); col++) {
                const isSelected = selectedCell?.row === row && selectedCell?.column === col;
                const isEditing = editingCell?.row === row && editingCell?.column === col;
                const isInRange = isInSelectedRange(row, col);
                const isInClipboard = isInClipboardRange(row, col);
                const cellFormat = getCellFormat(row, col);
                const columnWidth = getColumnWidth(col);
                
                cells.push(
                  <Cell
                    key={`${row}-${col}`}
                    row={row}
                    column={col}
                    value={getCellValue(row, col)}
                    format={cellFormat}
                    isSelected={isSelected}
                    isInRange={isInRange}
                    isInClipboard={isInClipboard}
                    isEditing={isEditing}
                    editValue={editValue}
                    width={columnWidth}
                    height={rowHeight}
                    onEditValueChange={setEditValue}
                    onClick={() => handleCellClick(row, col)}
                    onMouseDown={() => handleCellMouseDown(row, col)}
                    onMouseEnter={() => handleCellMouseEnter(row, col)}
                    onDoubleClick={() => handleCellDoubleClick(row, col)}
                    onKeyDown={handleEditKeyDown}
                    onBlur={handleEditBlur}
                    readOnly={userPermissions === 'read'}
                    sheetTitle={sheet.name || ''}
                    templateName={sheet.template?.name || ''}
                  />
                );
              }
      
              visibleRows.push(
                <Box key={row} sx={{ display: 'flex' }}>
                  {renderRowHeader(row)}
                  {cells}
                </Box>
              );
            }
            
            return visibleRows;
          })()}
        </Box>
      </Box>
    );
    
    return virtualContainer;
  };

  // –û—á–∏—Å—Ç–∫–∞ –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      debouncedSaveCell.cancel();
      debouncedUpdateSelection.cancel();
      debouncedScrollUpdate.cancel();
    };
  }, [debouncedSaveCell, debouncedUpdateSelection, debouncedScrollUpdate]);

  const isReportSheet = useMemo(() => {
    return sheet?.name?.toLowerCase().includes('–æ—Ç—á–µ—Ç') ||
           sheet?.template?.name?.toLowerCase().includes('–æ—Ç—á–µ—Ç');
  }, [sheet?.name, sheet?.template?.name]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
  const handleExportExcel = () => {
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ (AOA)
    const data: any[][] = [];
    for (let row = 0; row < (sheet.rowCount || 100); row++) {
      const rowData: any[] = [];
      for (let col = 0; col < (sheet.columnCount || 26); col++) {
        rowData.push(getCellValue(row, col));
      }
      data.push(rowData);
    }
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ª–∏—Å—Ç–∞ (–¥–æ 31 —Å–∏–º–≤–æ–ª–∞, –±–µ–∑ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
    let safeSheetName = (sheet.name || 'Report')
      .replace(/[\\/?*\[\]:]/g, '')
      .slice(0, 31)
      .trim();
    if (!safeSheetName) safeSheetName = 'Report';
    const ws = XLSX.utils.aoa_to_sheet(data);

    // --- –°–±–æ—Ä merges –¥–ª—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö —è—á–µ–µ–∫ ---
    const merges: any[] = [];
    if (sheet.cells) {
      const visited = new Set();
      for (const cell of sheet.cells) {
        if (cell.mergedWith && !visited.has(`${cell.row}-${cell.column}`)) {
          // mergedWith = "row-col" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0-0")
          const [startRow, startCol] = cell.mergedWith.split('-').map(Number);
          const endRow = cell.row;
          const endCol = cell.column;
          merges.push({ s: { r: startRow, c: startCol }, e: { r: endRow, c: endCol } });
          // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
          for (let r = startRow; r <= endRow; r++) {
            for (let c = startCol; c <= endCol; c++) {
              visited.add(`${r}-${c}`);
            }
          }
        }
      }
    }
    // --- –Ø–≤–Ω—ã–µ merges –¥–ª—è —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ ---
    if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç')) {
      merges.push(
        { s: { r: 0, c: 0 }, e: { r: 0, c: 1 } }, // A1:B1 –î–∞—Ç–∞
        { s: { r: 0, c: 2 }, e: { r: 0, c: 5 } }, // C1:F1 –í—ã—Å–µ–ª–µ–Ω–∏–µ
        { s: { r: 0, c: 6 }, e: { r: 0, c: 16 } } // G1:Q1 –ó–∞—Å–µ–ª–µ–Ω–∏–µ
      );
    }
    if (merges.length > 0) {
      ws['!merges'] = merges;
    }
    // --- –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ merges ---

    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, safeSheetName);
    XLSX.writeFile(wb, `${safeSheetName}.xlsx`);

    // --- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –≤ A1 (data[0][0]) ---
    if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç')) {
      if (data[0]) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (DD.MM.YYYY)
        let reportDateStr = '';
        if (sheet.reportDate) {
          const parts = sheet.reportDate.split('-');
          if (parts.length === 3) reportDateStr = `${parts[2]}.${parts[1]}.${parts[0]}`;
          else reportDateStr = sheet.reportDate;
        }
        data[0][0] = reportDateStr;
        data[0][1] = '';
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
  const handleExportCSV = () => {
    const data: any[][] = [];
    for (let row = 0; row < (sheet.rowCount || 100); row++) {
      const rowData: any[] = [];
      for (let col = 0; col < (sheet.columnCount || 26); col++) {
        rowData.push(getCellValue(row, col));
      }
      data.push(rowData);
    }
    const ws = XLSX.utils.aoa_to_sheet(data);
    const csv = XLSX.utils.sheet_to_csv(ws, { FS: ';' });
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.setAttribute('download', `${sheet.name || 'report'}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <FormatToolbar
        selectedCells={selectedRange}
        onFormat={handleFormat}
        onAddRow={handleAddRow}
        onAddColumn={handleAddColumn}
        onShowHistory={handleShowHistory}
        userPermissions={userPermissions}
      />

      {/* –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ */}
      {isReportSheet && (
        <Stack direction="row" spacing={2} sx={{ mb: 2 }}>
          <Button variant="outlined" onClick={handleExportExcel}>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</Button>
          <Button variant="outlined" onClick={handleExportCSV}>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</Button>
        </Stack>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <Paper 
        ref={containerRef}
        sx={{ 
          flex: 1, 
          overflow: 'auto',
          outline: 'none', // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π outline –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
          '&:focus': {
            outline: 'none'
          }
        }} 
        onMouseUp={handleMouseUp}
        onScroll={handleScroll}
        tabIndex={0} // –î–µ–ª–∞–µ–º Paper —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        onFocus={() => {
          // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
          if (!selectedCell) {
            setSelectedCell({ row: 0, column: 0 });
            setSelectedRange({ startRow: 0, endRow: 0, startColumn: 0, endColumn: 0 });
          }
          console.log('–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–∏–ª–∞ —Ñ–æ–∫—É—Å');
        }}
        onMouseDown={(e) => {
          // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ–∫—É—Å –ø—Ä–∏ –∫–ª–∏–∫–µ
          e.currentTarget.focus();
        }}
        onPaste={(e) => {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ paste –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–∞–±–ª–∏—Ü—ã
          console.log('Paste —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–∞–±–ª–∏—Ü—ã');
          if (selectedCell && !editingCell && userPermissions !== 'read') {
            e.preventDefault();
            // –°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
          }
        }}
      >
        <Box ref={gridContainerRef} sx={{ display: 'inline-block', minWidth: '100%' }}>
          {/* Headers */}
          <Box sx={{ display: 'flex', position: 'sticky', top: 0, zIndex: 1 }}>
            <Box sx={{ width: 50, height: 30 }} /> {/* Corner cell */}
            {renderColumnHeaders()}
          </Box>
          {/* –ö–∞—Å—Ç–æ–º–Ω–∞—è —à–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ */}
          {sheet?.template?.name?.includes('–û—Ç—á–µ—Ç') && (
            <Box sx={{ display: 'flex', position: 'sticky', top: 30, zIndex: 1 }}>
              <Box sx={{ width: 50, height: 30 }} />
              {/* A1:B1 - —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ */}
              <Box
                sx={{
                  width: (getColumnWidth(0) + getColumnWidth(1)),
                  height: 30,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#f5f5f5',
                  border: '1px solid #e0e0e0',
                  fontWeight: 'bold',
                  fontSize: '0.95rem',
                  textAlign: 'center',
                }}
              >
                {reportDate ? reportDate.split('-').reverse().join('.') : ''}
              </Box>
              {/* C1:F1 - –í—ã—Å–µ–ª–µ–Ω–∏–µ */}
              <Box
                sx={{
                  width: [2,3,4,5].reduce((acc, col) => acc + getColumnWidth(col), 0),
                  height: 30,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#f5f5f5',
                  border: '1px solid #e0e0e0',
                  fontWeight: 'bold',
                  fontSize: '0.95rem',
                  textAlign: 'center',
                }}
              >
                –í—ã—Å–µ–ª–µ–Ω–∏–µ
              </Box>
              {/* G1:Q1 (6-16) - –ó–∞—Å–µ–ª–µ–Ω–∏–µ */}
              <Box
                sx={{
                  width: Array.from({length: 11}, (_, i) => getColumnWidth(i+6)).reduce((a,b)=>a+b,0),
                  height: 30,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#f5f5f5',
                  border: '1px solid #e0e0e0',
                  fontWeight: 'bold',
                  fontSize: '0.95rem',
                  textAlign: 'center',
                }}
              >
                –ó–∞—Å–µ–ª–µ–Ω–∏–µ
              </Box>
            </Box>
          )}
          {/* Grid */}
          {renderGrid()}
        </Box>
      </Paper>

      {/* –î–∏–∞–ª–æ–≥ –∏—Å—Ç–æ—Ä–∏–∏ */}
      {historyCell && (
        <CellHistoryDialog
          open={historyDialogOpen}
          onClose={() => setHistoryDialogOpen(false)}
          sheetId={sheet.id}
          row={historyCell.row}
          column={historyCell.column}
        />
      )}
    </Box>
  );
};

export default Spreadsheet; 