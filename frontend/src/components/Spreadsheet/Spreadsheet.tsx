import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { Box, Paper, TextField } from '@mui/material';
import { cellsApi, sheetsExtendedApi, sheetsApi } from '../../services/api';
import api from '../../services/api';
import Cell from './Cell';
import FormatToolbar from './FormatToolbar';
import CellHistoryDialog from './CellHistoryDialog';
import { FormulaEngine } from '../../utils/formulaEngine';
import { debounce } from 'lodash';
import { chunkCells, delay, BatchDebouncer, CellUpdate, BATCH_SIZE, BATCH_DELAY } from '../../utils/batchRequests';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  IconButton,
  Tooltip
} from '@mui/material';
import HistoryIcon from '@mui/icons-material/History';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import SortIcon from '@mui/icons-material/Sort';
import { styled } from '@mui/material/styles';
// @ts-ignore
import * as XLSX from 'xlsx';
// ExcelJS –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
// @ts-ignore
import ExcelJS from 'exceljs';
import { Button, Stack } from '@mui/material';

interface SpreadsheetProps {
  sheet: any;
  userPermissions: string;
  reportDate?: string;
}

interface CellData {
  id?: number;
  sheetId?: number;
  row: number;
  column: number;
  value?: string;
  formula?: string;
  format?: any;
}

interface CellSelection {
  startRow: number;
  endRow: number;
  startColumn: number;
  endColumn: number;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
const ROW_HEIGHT_DEFAULT = 30;
const HEADER_HEIGHT = 30;
const BUFFER_SIZE = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤—ã—à–µ –∏ –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage"
const DMD_COTTAGE_FIXED_COLUMN_WIDTHS: { [key: number]: number } = {
  1: 94,   // –°—Ç–∞—Ç—É—Å –¥–æ–º–∞
  // 4: 120, // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  9: 104,  // –î–∞—Ç–∞ –≤—ã—Å–µ–ª–µ–Ω–∏—è
  10: 74,  // –ö–æ–ª-–≤–æ –¥–Ω–µ–π
  11: 81,  // –û–±—â–∞—è —Å—É–º–º–∞
  12: 113,  // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
  13: 85   // –î–æ–ø–ª–∞—Ç–∞
};

const Spreadsheet: React.FC<SpreadsheetProps> = ({ sheet, userPermissions, reportDate }) => {
  const [cells, setCells] = useState<Map<string, CellData>>(new Map());
  const [selectedCell, setSelectedCell] = useState<{ row: number; column: number } | null>(null);
  const [selectedRange, setSelectedRange] = useState<CellSelection | null>(null);
  const [editingCell, setEditingCell] = useState<{ row: number; column: number } | null>(null);
  const [editValue, setEditValue] = useState('');
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState<{ row: number; column: number } | null>(null);
  const [historyDialogOpen, setHistoryDialogOpen] = useState(false);
  const [historyCell, setHistoryCell] = useState<{ row: number; column: number } | null>(null);
  const [columnSizes, setColumnSizes] = useState<{ [key: number]: number }>({});
  const [rowSizes, setRowSizes] = useState<{ [key: number]: number }>({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [sortConfig, setSortConfig] = useState<{
    column: number;
    direction: 'asc' | 'desc';
  } | null>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ settings –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã
  useEffect(() => {
    if (sheet?.settings) {
      const { columnSizes: savedColumnSizes = {}, rowSizes: savedRowSizes = {} } = sheet.settings;
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ settings:', { savedColumnSizes, savedRowSizes });
      setColumnSizes(savedColumnSizes);
      setRowSizes(savedRowSizes);
    }
  }, [sheet?.settings]);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ sheet
  useEffect(() => {
    if (sheet && sheet.id) {
      console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã:', sheet.name, 'ID:', sheet.id);
      console.log('‚öôÔ∏è Settings —Ç–∞–±–ª–∏—Ü—ã:', sheet.settings);
    }
  }, [sheet]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
  const [clipboard, setClipboard] = useState<{
    data: Map<string, CellData>;
    range: CellSelection;
    operation: 'copy' | 'cut';
  } | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const [scrollTop, setScrollTop] = useState(0);
  const [containerHeight, setContainerHeight] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);
  const gridContainerRef = useRef<HTMLDivElement>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [renderKey, setRenderKey] = useState(0);

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  const debouncedUpdateSelection = useMemo(
    () => debounce((startRow: number, endRow: number, startColumn: number, endColumn: number) => {
      setSelectedRange({ startRow, endRow, startColumn, endColumn });
    }, 16), // ~60fps
    []
  );

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
  const debouncedScrollUpdate = useMemo(
    () => debounce((scrollTop: number) => {
      setScrollTop(scrollTop);
    }, 16), // ~60fps
    []
  );

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const getRowHeight = (row: number): number => {
    return rowSizes[row] || ROW_HEIGHT_DEFAULT;
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
  const getTotalHeight = useCallback(() => {
    const rowCount = sheet.rowCount || 100;
    let total = 0;
    for (let i = 0; i < rowCount; i++) {
      total += getRowHeight(i);
    }
    return total;
  }, [sheet.rowCount, rowSizes]);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
  const getVisibleRows = useCallback(() => {
    const rowCount = sheet.rowCount || 100;
    
    if (containerHeight === 0) {
      return { startRow: 0, endRow: Math.min(20, rowCount - 1) }; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    let currentHeight = 0;
    let startRow = 0;
    let endRow = 0;

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –≤–∏–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 0; i < rowCount; i++) {
      const rowHeight = getRowHeight(i);
      if (currentHeight + rowHeight > scrollTop) {
        startRow = Math.max(0, i - BUFFER_SIZE);
        break;
      }
      currentHeight += rowHeight;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∏–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É
    currentHeight = 0;
    for (let i = 0; i < rowCount; i++) {
      currentHeight += getRowHeight(i);
      if (currentHeight > scrollTop + containerHeight + BUFFER_SIZE * ROW_HEIGHT_DEFAULT) {
        endRow = Math.min(i, rowCount - 1);
        break;
      }
    }

    if (endRow === 0) endRow = rowCount - 1;

    return { startRow, endRow };
  }, [scrollTop, containerHeight, sheet.rowCount, rowSizes]);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º offset –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∏–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏
  const getRowOffset = useCallback((targetRow: number) => {
    let offset = 0;
    for (let i = 0; i < targetRow; i++) {
      offset += getRowHeight(i);
    }
    return offset;
  }, [rowSizes]);

  // –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞ DMD Cottage
  const isDMDCottageReport = useMemo(() => {
    return sheet?.template?.name === '–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage' ||
           sheet?.template?.name?.includes('–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage');
  }, [sheet?.template?.name]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ DMD Cottage
  const calculateDoplataForReport = useCallback(async () => {
    if (!isDMDCottageReport || !sheet?.id) return;
    if (isSortingInProgressRef.current) {
      console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã - –∏–¥–µ—Ç –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞');
      return;
    }

    console.log('üí∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ DMD Cottage');
    
    const updatedCells = new Map(cells);
    const cellsToUpdate: Array<{row: number, column: number, value: string}> = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –Ω–∞—á–∏–Ω–∞—è —Å 2-–π (0 - –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞, 1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    for (let row = 2; row < 100; row++) {
      const totalAmountKey = `${row}-11`; // –û–±—â–∞—è —Å—É–º–º–∞ (–∫–æ–ª–æ–Ω–∫–∞ 11)
      const prepaymentKey = `${row}-12`;  // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∞ 12)
      const doplataKey = `${row}-13`;     // –î–æ–ø–ª–∞—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∞ 13)
      
      const totalAmountCell = updatedCells.get(totalAmountKey);
      const prepaymentCell = updatedCells.get(prepaymentKey);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â–µ–π —Å—É–º–º–µ –∏–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–ª–∞—Ç—É
      if (totalAmountCell?.value || prepaymentCell?.value) {
        const totalAmount = parseFloat(totalAmountCell?.value?.toString().replace(/[^\d.-]/g, '') || '0');
        const prepayment = parseFloat(prepaymentCell?.value?.toString().replace(/[^\d.-]/g, '') || '0');
        const calculatedDoplata = totalAmount - prepayment;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –¥–æ–ø–ª–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        const currentDoplata = updatedCells.get(doplataKey);
        const currentDoplataValue = parseFloat(currentDoplata?.value?.toString().replace(/[^\d.-]/g, '') || '0');
        
        if (Math.abs(calculatedDoplata - currentDoplataValue) > 0.01) { // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
          console.log(`üí∞ –†–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${row}: ${totalAmount} - ${prepayment} = ${calculatedDoplata}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const updatedCell = {
            id: currentDoplata?.id || undefined,
            sheetId: sheet.id,
            row,
            column: 13,
            value: calculatedDoplata.toString(),
            format: currentDoplata?.format || null,
            formula: undefined
          };
          
          updatedCells.set(doplataKey, updatedCell);
          cellsToUpdate.push({
            row,
            column: 13,
            value: calculatedDoplata.toString()
          });
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫
    if (cellsToUpdate.length > 0) {
      setCells(updatedCells);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (cellsToUpdate.length > 0) {
        try {
          console.log(`üí∞ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${cellsToUpdate.length} —è—á–µ–µ–∫ –¥–æ–ø–ª–∞—Ç—ã`);
          for (const cellUpdate of cellsToUpdate) {
            await cellsApi.updateCell(sheet.id, cellUpdate.row, cellUpdate.column, {
              value: cellUpdate.value
            });
          }
          console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${cellsToUpdate.length} —è—á–µ–µ–∫ —Å –¥–æ–ø–ª–∞—Ç–æ–π`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–µ–∫ –¥–æ–ø–ª–∞—Ç—ã:', error);
        }
      }
    }
  }, [isDMDCottageReport, sheet?.id, cells]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —è—á–µ–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (sheet?.cells) {
      // –ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —è—á–µ–π–∫–∏ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      if (isDMDCottageReport && hasAutoSortedRef.current) {
        console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —è—á–µ–µ–∫ - –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        return;
      }
      
      const cellsMap = new Map<string, CellData>();
      sheet.cells.forEach((cell: any) => {
        const key = `${cell.row}-${cell.column}`;
        cellsMap.set(key, cell);
      });
      setCells(cellsMap);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      if (isDMDCottageReport && !hasAutoSortedRef.current) {
        hasAutoSortedRef.current = false;
      }
    }
  }, [sheet, isDMDCottageReport]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (isDMDCottageReport && cells.size > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const timer = setTimeout(() => {
        calculateDoplataForReport();
      }, 500);
      
      return () => clearTimeout(timer);
    }
  }, [isDMDCottageReport, cells.size, calculateDoplataForReport]);

  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
  const debouncedCalculateDoplata = useMemo(
    () => debounce(() => {
      if (isDMDCottageReport && !isSortingInProgressRef.current) {
        console.log('üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–ª–∞—Ç—É');
        calculateDoplataForReport();
      } else if (isSortingInProgressRef.current) {
        console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã - –∏–¥–µ—Ç –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞');
      }
    }, 2000), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 2 —Å–µ–∫—É–Ω–¥
    [isDMDCottageReport, calculateDoplataForReport]
  );

  // –ü–µ—Ä–µ—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
  useEffect(() => {
    if (isDMDCottageReport && reportDate && cells.size > 0) {
      debouncedCalculateDoplata();
    }
    
    return () => {
      debouncedCalculateDoplata.cancel();
    };
  }, [isDMDCottageReport, reportDate, cells.size, debouncedCalculateDoplata]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã
    if (sheet?.settings) {
      const columnSizes = sheet.settings.columnSizes || {};
      const rowSizes = sheet.settings.rowSizes || {};
      console.log('üìè –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã:', { columnSizes, rowSizes });
      setColumnSizes(columnSizes);
      setRowSizes(rowSizes);
    } else {
      console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      setColumnSizes({});
      setRowSizes({});
    }
  }, [sheet]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  useEffect(() => {
    const updateContainerSize = () => {
      if (containerRef.current) {
        setContainerHeight(containerRef.current.clientHeight);
      }
    };

    updateContainerSize();
    window.addEventListener('resize', updateContainerSize);
    return () => window.removeEventListener('resize', updateContainerSize);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    const target = e.target as HTMLDivElement;
    debouncedScrollUpdate(target.scrollTop);
  }, [debouncedScrollUpdate]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–µ
  const scrollToCell = useCallback((row: number) => {
    if (!containerRef.current) return;

    const targetOffset = getRowOffset(row);
    const containerHeight = containerRef.current.clientHeight;
    const rowHeight = getRowHeight(row);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–Ω–∞ –ª–∏ —è—á–µ–π–∫–∞
    const isVisible = targetOffset >= scrollTop && 
                     targetOffset + rowHeight <= scrollTop + containerHeight;

    if (!isVisible) {
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã —è—á–µ–π–∫–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞
      let newScrollTop;
      if (targetOffset < scrollTop) {
        // –Ø—á–µ–π–∫–∞ –≤—ã—à–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        newScrollTop = targetOffset - BUFFER_SIZE * ROW_HEIGHT_DEFAULT;
      } else {
        // –Ø—á–µ–π–∫–∞ –Ω–∏–∂–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        newScrollTop = targetOffset - containerHeight + rowHeight + BUFFER_SIZE * ROW_HEIGHT_DEFAULT;
      }

      containerRef.current.scrollTop = Math.max(0, newScrollTop);
    }
  }, [getRowOffset, getRowHeight, scrollTop]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ (–¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
      if (e.key === 'Escape') {
        e.preventDefault();
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        setSelectedCell(null);
        setSelectedRange(null);
        setEditingCell(null);
        setClipboard(null);
        setEditValue('');
        console.log('Escape –Ω–∞–∂–∞—Ç: –æ—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
        return;
      }

      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –µ—Å–ª–∏ –∏–¥—ë—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
      if (editingCell) return;
      
      // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –¥—Ä—É–≥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –≤–≤–æ–¥–∞
      if (document.activeElement && ['INPUT', 'TEXTAREA'].includes(document.activeElement.tagName)) {
        return;
      }

      if (!selectedCell) return;

      const maxRows = sheet.rowCount || 100;
      const maxCols = sheet.columnCount || 26;

      switch (e.key) {
        case 'ArrowUp':
          e.preventDefault();
          if (selectedCell.row > 0) {
            const newRow = selectedCell.row - 1;
            setSelectedCell({ row: newRow, column: selectedCell.column });
            setSelectedRange({ startRow: newRow, endRow: newRow, startColumn: selectedCell.column, endColumn: selectedCell.column });
            scrollToCell(newRow);
          }
          break;
        case 'ArrowDown':
          e.preventDefault();
          if (selectedCell.row < maxRows - 1) {
            const newRow = selectedCell.row + 1;
            setSelectedCell({ row: newRow, column: selectedCell.column });
            setSelectedRange({ startRow: newRow, endRow: newRow, startColumn: selectedCell.column, endColumn: selectedCell.column });
            scrollToCell(newRow);
          }
          break;
        case 'ArrowLeft':
          e.preventDefault();
          if (selectedCell.column > 0) {
            const newCol = selectedCell.column - 1;
            setSelectedCell({ row: selectedCell.row, column: newCol });
            setSelectedRange({ startRow: selectedCell.row, endRow: selectedCell.row, startColumn: newCol, endColumn: newCol });
          }
          break;
        case 'ArrowRight':
          e.preventDefault();
          if (selectedCell.column < maxCols - 1) {
            const newCol = selectedCell.column + 1;
            setSelectedCell({ row: selectedCell.row, column: newCol });
            setSelectedRange({ startRow: selectedCell.row, endRow: selectedCell.row, startColumn: newCol, endColumn: newCol });
          }
          break;
        case 'Enter':
          e.preventDefault();
          if (userPermissions !== 'read' && selectedCell) {
            handleCellDoubleClick(selectedCell.row, selectedCell.column);
          }
          break;
        case 'Delete':
        case 'Backspace':
          e.preventDefault();
          if (userPermissions !== 'read') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
            if (selectedRange) {
              console.log('–£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', selectedRange);
              
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å—Ä–∞–∑—É
              const newCells = new Map(cells);
              let deletedCount = 0;
              
              for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
                for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
                  const key = getCellKey(row, col);
                  const existingCell = newCells.get(key);
                  
                  if (existingCell && existingCell.value !== '') {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    const clearedCell: CellData = {
                      ...existingCell,
                      value: '',
                      formula: undefined
                    };
                    newCells.set(key, clearedCell);
                    deletedCount++;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ backend
                    debouncedSaveCell(row, col, '');
                    console.log(`–û—á–∏—â–µ–Ω–∞ —è—á–µ–π–∫–∞ [${row}, ${col}]`);
                  }
                }
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
              setCells(newCells);
              console.log(`–û—á–∏—â–µ–Ω–æ ${deletedCount} —è—á–µ–µ–∫`);
            } else if (selectedCell) {
              // –ï—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —è—á–µ–π–∫–∞
              console.log('–£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏:', selectedCell);
              setCellValue(selectedCell.row, selectedCell.column, '');
            }
          }
          break;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∫–ª–∞–≤–∏—à —Å Ctrl
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case 'c':
          case 'C':
            e.preventDefault();
            copySelectedCells();
            break;
          case 'x':
          case 'X':
            e.preventDefault();
            cutSelectedCells();
            break;
          case 'v':
          case 'V':
            e.preventDefault();
            pasteClipboard();
            break;
        }
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è paste –¥–ª—è —É–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const handlePaste = async (e: ClipboardEvent) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∏–¥—ë—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏ –∏–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
      if (editingCell || !selectedCell || userPermissions === 'read') {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º paste: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ=', editingCell, '–≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞=', selectedCell, '–ø—Ä–∞–≤–∞=', userPermissions);
        return;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤–≤–æ–¥–∞ (–∫—Ä–æ–º–µ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã)
      const activeElement = document.activeElement;
      if (activeElement && ['INPUT', 'TEXTAREA'].includes(activeElement.tagName)) {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º paste: —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ –≤–≤–æ–¥–∞');
        return;
      }

      e.preventDefault();
      e.stopPropagation();
      
      console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º paste —Å–æ–±—ã—Ç–∏–µ');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        const clipboardData = e.clipboardData;
        let textData = '';

        if (clipboardData) {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
          textData = clipboardData.getData('text/plain') || 
                    clipboardData.getData('text/tab-separated-values') ||
                    clipboardData.getData('text/csv');
        }

        if (!textData) {
          // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ navigator.clipboard
          try {
            textData = await navigator.clipboard.readText();
          } catch (clipboardError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å clipboard —á–µ—Ä–µ–∑ navigator:', clipboardError);
          }
        }

        if (textData) {
          console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', textData);
          
          // –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º
          const rows = textData.split(/\r?\n/).filter(row => row.trim() !== '');
          const startRow = selectedCell.row;
          const startCol = selectedCell.column;

          let pastedCount = 0;
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const newCells = new Map(cells);
          
          rows.forEach((rowText, rowIndex) => {
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex}: "${rowText}"`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
            let cellValues = [];
            
            // –ü—Ä–æ–±—É–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é (TSV) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if (rowText.includes('\t')) {
              cellValues = rowText.split('\t');
              console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏:', cellValues);
            } 
            // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—è—Ç—É—é (CSV)
            else if (rowText.includes(',') && !rowText.includes(';')) {
              cellValues = rowText.split(',');
              console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ –∑–∞–ø—è—Ç–æ–π:', cellValues);
            }
            // –ü—Ä–æ–±—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
            else if (rowText.includes(';')) {
              cellValues = rowText.split(';');
              console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π:', cellValues);
            }
            // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–æ–π —è—á–µ–π–∫–æ–π
            else {
              cellValues = [rowText];
              console.log('–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –æ–¥–Ω–∞ —è—á–µ–π–∫–∞:', cellValues);
            }

            cellValues.forEach((cellText, colIndex) => {
              const targetRow = startRow + rowIndex;
              const targetCol = startCol + colIndex;

              console.log(`–í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é [${targetRow}, ${targetCol}] –∑–Ω–∞—á–µ–Ω–∏–µ: "${cellText}"`);

              if (targetRow < (sheet.rowCount || 100) && targetCol < (sheet.columnCount || 26)) {
                // –û—á–∏—â–∞–µ–º –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                const cleanValue = cellText.replace(/^["']|["']$/g, '').trim();
                console.log(`–û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${cleanValue}"`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ Map
                const key = getCellKey(targetRow, targetCol);
                const existingCell = newCells.get(key);
                
                const updatedCell: CellData = {
                  row: targetRow,
                  column: targetCol,
                  value: cleanValue,
                  formula: existingCell?.formula,
                  format: existingCell?.format,
                };
                
                newCells.set(key, updatedCell);
                pastedCount++;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ backend
                debouncedSaveCell(targetRow, targetCol, cleanValue);
              } else {
                console.log(`–ü–æ–∑–∏—Ü–∏—è [${targetRow}, ${targetCol}] –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã`);
              }
            });
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
          setCells(newCells);

          console.log(`–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${pastedCount} —è—á–µ–µ–∫ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`);
        } else {
          console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('paste', handlePaste, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capture —Ñ–∞–∑—É
    
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('paste', handlePaste, true);
    };
  }, [selectedCell, editingCell, selectedRange, userPermissions, sheet, clipboard]);

  // Debounced —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏
  const debouncedSaveCell = useCallback(
    debounce(async (row: number, column: number, value: string, formula?: string) => {
      if (userPermissions === 'read') return;
      
      try {
        await cellsApi.updateCell(sheet.id, row, column, {
          value,
          formula: formula || undefined,
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏:', error);
      }
    }, 500),
    [sheet.id, userPermissions]
  );

  // –§—É–Ω–∫—Ü–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏ (–¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
  const saveCell = useCallback(async (row: number, column: number, value: string, formula?: string) => {
    if (userPermissions === 'read') return;
    
    try {
      await cellsApi.updateCell(sheet.id, row, column, {
        value,
        formula: formula || undefined,
      });
      console.log(`–Ø—á–µ–π–∫–∞ [${row}, ${column}] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ: "${value}"`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏:', error);
    }
  }, [sheet.id, userPermissions]);

  // –§—É–Ω–∫—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤)
  const saveCellsBatchOptimized = useCallback(async (cellsToSave: CellUpdate[]) => {
    if (userPermissions === 'read' || cellsToSave.length === 0) return;
    
    try {
      console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${cellsToSave.length} —è—á–µ–µ–∫`);
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ BATCH_SIZE
      const batches = chunkCells(cellsToSave, BATCH_SIZE);
      console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${batches.length} –ø–∞–∫–µ—Ç–æ–≤ –ø–æ ${BATCH_SIZE} —è—á–µ–µ–∫`);
      
      let totalProcessed = 0;
      
      for (let i = 0; i < batches.length; i++) {
        const batch = batches[i];
        console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç ${i + 1}/${batches.length} (${batch.length} —è—á–µ–µ–∫)`);
        
        try {
          await cellsApi.updateCellsBatchOptimized(sheet.id, batch);
          totalProcessed += batch.length;
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
          if (i < batches.length - 1) {
            await delay(BATCH_DELAY);
          }
        } catch (batchError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ ${i + 1}:`, batchError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
        }
      }
      
      console.log(`‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalProcessed}/${cellsToSave.length} —è—á–µ–µ–∫`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫:', error);
    }
  }, [sheet.id, userPermissions]);

  // –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫ (–¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤—Å—Ç–∞–≤–∫–∏) - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const saveCellsBatch = useCallback(async (cellsToSave: Array<{
    row: number;
    column: number;
    value?: string;
    formula?: string;
  }>) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CellUpdate –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const cellUpdates: CellUpdate[] = cellsToSave.map(cell => ({
      row: cell.row,
      column: cell.column,
      value: cell.value,
      formula: cell.formula
    }));
    
    await saveCellsBatchOptimized(cellUpdates);
  }, [saveCellsBatchOptimized]);

  const getCellKey = (row: number, column: number) => `${row}-${column}`;

  const getCellValue = (row: number, column: number): string => {
    const key = getCellKey(row, column);
    const cell = cells.get(key);
    if (!cell) return '';
    
    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—É, –≤—ã—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (cell.formula && cell.formula.startsWith('=')) {
        const engine = new FormulaEngine(cells);
      const result = engine.evaluate(cell.formula);
      let out = result.toString();
      // –û—Ç—á–µ—Ç: –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ A (0) –Ω–∞—á–∏–Ω–∞—è —Å 3-–π —Å—Ç—Ä–æ–∫–∏ ‚Äî UPPER CASE
      if (sheet?.templateId === 2 && column === 0 && row >= 2) {
        out = out.toString().toUpperCase();
      }
      return out;
      }
    
    let out = cell.value || '';
    // –û—Ç—á–µ—Ç: –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ A (0) –Ω–∞—á–∏–Ω–∞—è —Å 3-–π —Å—Ç—Ä–æ–∫–∏ ‚Äî UPPER CASE
    if (sheet?.templateId === 2 && column === 0 && row >= 2) {
      out = out.toUpperCase();
    }
    return out;
  };

  const getCellFormat = (row: number, column: number): any => {
    const key = getCellKey(row, column);
    return cells.get(key)?.format || {};
  };

  const setCellValue = (row: number, column: number, value: string, formula?: string) => {
    const key = getCellKey(row, column);
    const existingCell = cells.get(key);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const currentValue = existingCell?.value || '';
    const currentFormula = existingCell?.formula || '';
    
    if (currentValue === value && currentFormula === (formula || '')) {
      // –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      return;
    }
    
    const updatedCell: CellData = {
      row,
      column,
      value,
      formula: formula || existingCell?.formula,
      format: existingCell?.format,
    };
    
    const newCells = new Map(cells);
      newCells.set(key, updatedCell);
    setCells(newCells);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –≤ –∂—É—Ä–Ω–∞–ª–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    if (sheet.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è')) {
      calculateAdditionalPayment(newCells, row, column);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ backend —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    debouncedSaveCell(row, column, value, formula);
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–ª–∞—Ç—ã (–æ–±—â–∞—è —Å—É–º–º–∞ - –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)
  const calculateAdditionalPayment = (cellsMap: Map<string, CellData>, row: number, column: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü "–û–±—â–∞—è —Å—É–º–º–∞" (6) –∏–ª–∏ "–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞" (7)
    if (column === 6 || column === 7) {
      const totalAmountKey = getCellKey(row, 6); // –û–±—â–∞—è —Å—É–º–º–∞
      const prepaymentKey = getCellKey(row, 7);  // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
      const additionalPaymentKey = getCellKey(row, 8); // –î–æ–ø–ª–∞—Ç–∞
      
      const totalAmount = cellsMap.get(totalAmountKey)?.value || '';
      const prepayment = cellsMap.get(prepaymentKey)?.value || '';
      
      if (totalAmount && prepayment) {
        // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        const totalNum = parseFloat(totalAmount.replace(/[\s,]/g, '').replace(',', '.'));
        const prepaymentNum = parseFloat(prepayment.replace(/[\s,]/g, '').replace(',', '.'));
        
        if (!isNaN(totalNum) && !isNaN(prepaymentNum)) {
          const additionalPayment = totalNum - prepaymentNum;
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ç—ã—Å—è—á
          const formattedValue = additionalPayment.toLocaleString('ru-RU', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
          });
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø–ª–∞—Ç—ã
          cellsMap.set(additionalPaymentKey, { 
            row, 
            column: 8, 
            value: formattedValue 
          });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
          setTimeout(async () => {
            try {
              await cellsApi.updateCell(sheet.id, row, 8, {
                value: formattedValue
              });
              console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–æ–ø–ª–∞—Ç–∞: ${formattedValue} (–æ–±—â–∞—è: ${totalAmount}, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: ${prepayment})`);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –¥–æ–ø–ª–∞—Ç—ã:', error);
            }
          }, 100);
        }
      }
    }
  };

  const handleCellClick = (row: number, column: number, e?: React.MouseEvent) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    if (e) {
      e.preventDefault();
    }

    if (userPermissions === 'read') {
      setSelectedCell({ row, column });
      setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
      setEditingCell(null);
      return;
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è "–°—Ç–∞—Ç—É—Å –¥–æ–º–∞"
    const isHouseStatusField = sheet.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è') && column === 9 && row > 0;
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (selectedCell && selectedCell.row === row && selectedCell.column === column) {
      setEditingCell({ row, column });
      
      // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const key = getCellKey(row, column);
      const cell = cells.get(key);
      const editableValue = cell?.formula || cell?.value || '';
      setEditValue(editableValue);
    } 
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –î–ª—è –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞ —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    else if (isHouseStatusField) {
      setSelectedCell({ row, column });
      setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
      setEditingCell({ row, column });
      
      // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const key = getCellKey(row, column);
      const cell = cells.get(key);
      const editableValue = cell?.formula || cell?.value || '';
      setEditValue(editableValue);
    } 
    else {
      // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —è—á–µ–π–∫—É
      setSelectedCell({ row, column });
      setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
      setEditingCell(null);
    }
  };

  const handleCellMouseDown = (row: number, column: number) => {
    // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    setIsDragging(true);
    setDragStart({ row, column });
    setSelectedCell({ row, column });
    setSelectedRange({ startRow: row, endRow: row, startColumn: column, endColumn: column });
    setEditingCell(null);
  };

  const handleCellMouseEnter = (row: number, column: number) => {
    if (isDragging && dragStart) {
      const startRow = Math.min(dragStart.row, row);
      const endRow = Math.max(dragStart.row, row);
      const startColumn = Math.min(dragStart.column, column);
      const endColumn = Math.max(dragStart.column, column);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      debouncedUpdateSelection(startRow, endRow, startColumn, endColumn);
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
    setDragStart(null);
  };

  const handleCellDoubleClick = (row: number, column: number) => {
    if (userPermissions === 'read') return;
    
    setEditingCell({ row, column });
    setSelectedCell({ row, column });
    
    // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const key = getCellKey(row, column);
    const cell = cells.get(key);
    const editableValue = cell?.formula || cell?.value || '';
    setEditValue(editableValue);
  };

  const handleEditKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      if (editingCell) {
        saveCellWithFormula(editingCell.row, editingCell.column, editValue);
        setEditingCell(null);
        setEditValue('');
      }
    } else if (e.key === 'Tab') {
      e.preventDefault();
      if (editingCell) {
        saveCellWithFormula(editingCell.row, editingCell.column, editValue);
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —è—á–µ–π–∫–µ
        const nextColumn = editingCell.column + 1;
        if (nextColumn < (sheet.columnCount || 26)) {
          setSelectedCell({ row: editingCell.row, column: nextColumn });
          setSelectedRange({ 
            startRow: editingCell.row, 
            endRow: editingCell.row, 
            startColumn: nextColumn, 
            endColumn: nextColumn 
          });
        }
        setEditingCell(null);
        setEditValue('');
      }
    } else if (e.key === 'Escape') {
      // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      e.preventDefault();
      e.stopPropagation();
      setEditingCell(null);
      setEditValue('');
    }
  };

  const handleEditBlur = () => {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    if (editingCell && editValue !== undefined && editValue !== null) {
      console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞:', editingCell, '–∑–Ω–∞—á–µ–Ω–∏–µ:', editValue);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const key = getCellKey(editingCell.row, editingCell.column);
      const existingCell = cells.get(key);
      const currentValue = existingCell?.formula || existingCell?.value || '';
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (editValue !== currentValue) {
        saveCellWithFormula(editingCell.row, editingCell.column, editValue);
        console.log('–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º');
      } else {
        console.log('–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º');
    }

    setEditingCell(null);
    setEditValue('');
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è—á–µ–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º—É–ª
  const saveCellWithFormula = (row: number, column: number, value: string) => {
    if (value.startsWith('=')) {
      // –≠—Ç–æ —Ñ–æ—Ä–º—É–ª–∞
      const engine = new FormulaEngine(cells);
      const computedValue = engine.evaluate(value);
      setCellValue(row, column, computedValue.toString(), value);
    } else {
      // –û–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      setCellValue(row, column, value);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
  const copySelectedCells = () => {
    if (!selectedRange) return;

    const clipboardData = new Map<string, CellData>();
    
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const key = getCellKey(row, col);
        const cell = cells.get(key);
        
        if (cell) {
          const relativeKey = getCellKey(
            row - selectedRange.startRow, 
            col - selectedRange.startColumn
          );
          clipboardData.set(relativeKey, { ...cell });
        }
      }
    }

    setClipboard({
      data: clipboardData,
      range: { ...selectedRange },
      operation: 'copy'
    });

    // –¢–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TSV
    const textData = [];
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      const rowData = [];
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const value = getCellValue(row, col);
        rowData.push(value);
      }
      textData.push(rowData.join('\t'));
    }
    
    navigator.clipboard.writeText(textData.join('\n')).catch(console.error);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
  const cutSelectedCells = () => {
    if (!selectedRange || userPermissions === 'read') return;

    const clipboardData = new Map<string, CellData>();
    
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const key = getCellKey(row, col);
        const cell = cells.get(key);
        
        if (cell) {
          const relativeKey = getCellKey(
            row - selectedRange.startRow, 
            col - selectedRange.startColumn
          );
          clipboardData.set(relativeKey, { ...cell });
        }
      }
    }

    setClipboard({
      data: clipboardData,
      range: { ...selectedRange },
      operation: 'cut'
    });

    // –û—á–∏—â–∞–µ–º –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
    const newCells = new Map(cells);
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const cellsToSave: Array<{row: number; column: number; value: string}> = [];
    
    for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
      for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
        const key = getCellKey(row, col);
        const existingCell = newCells.get(key);
        
        if (existingCell) {
          const clearedCell: CellData = {
            ...existingCell,
            value: '',
            formula: undefined
          };
          newCells.set(key, clearedCell);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          cellsToSave.push({
            row: row,
            column: col,
            value: ''
          });
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    setCells(newCells);
    
    // –ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—á–∏—â–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    if (cellsToSave.length > 0) {
      saveCellsBatch(cellsToSave);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
  const pasteClipboard = async () => {
    if (!selectedCell || userPermissions === 'read') return;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
      const text = await navigator.clipboard.readText();
      if (text) {
        console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞:', text);
        
        // –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º
        const rows = text.split(/\r?\n/).filter(row => row.trim() !== '');
        const startRow = selectedCell.row;
        const startCol = selectedCell.column;

        let pastedCount = 0;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const newCells = new Map(cells);
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const cellsToSave: Array<{row: number; column: number; value: string; formula?: string}> = [];

        rows.forEach((rowText, rowIndex) => {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowIndex}: "${rowText}"`);
          
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
          let cellValues = [];
          
          // –ü—Ä–æ–±—É–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é (TSV) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
          if (rowText.includes('\t')) {
            cellValues = rowText.split('\t');
            console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–∞–±—É–ª—è—Ü–∏–∏:', cellValues);
          } 
          // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—è—Ç—É—é (CSV)
          else if (rowText.includes(',') && !rowText.includes(';')) {
            cellValues = rowText.split(',');
            console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ –∑–∞–ø—è—Ç–æ–π:', cellValues);
          }
          // –ü—Ä–æ–±—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
          else if (rowText.includes(';')) {
            cellValues = rowText.split(';');
            console.log('–†–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π:', cellValues);
          }
          // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–æ–π —è—á–µ–π–∫–æ–π
          else {
            cellValues = [rowText];
            console.log('–ë–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, –æ–¥–Ω–∞ —è—á–µ–π–∫–∞:', cellValues);
          }

          cellValues.forEach((cellText, colIndex) => {
            const targetRow = startRow + rowIndex;
            const targetCol = startCol + colIndex;

            console.log(`–í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é [${targetRow}, ${targetCol}] –∑–Ω–∞—á–µ–Ω–∏–µ: "${cellText}"`);

            if (targetRow < (sheet.rowCount || 100) && targetCol < (sheet.columnCount || 26)) {
              // –û—á–∏—â–∞–µ–º –æ—Ç –∫–∞–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
              const cleanValue = cellText.replace(/^["']|["']$/g, '').trim();
              console.log(`–û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "${cleanValue}"`);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ Map
              const key = getCellKey(targetRow, targetCol);
              const existingCell = newCells.get(key);
              
              const updatedCell: CellData = {
                row: targetRow,
                column: targetCol,
                value: cleanValue,
                formula: existingCell?.formula,
                format: existingCell?.format,
              };
              
              newCells.set(key, updatedCell);
              pastedCount++;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
              cellsToSave.push({
                row: targetRow,
                column: targetCol,
                value: cleanValue
              });
            } else {
              console.log(`–ü–æ–∑–∏—Ü–∏—è [${targetRow}, ${targetCol}] –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã`);
            }
          });
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        setCells(newCells);
        
        // –ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (cellsToSave.length > 0) {
          saveCellsBatch(cellsToSave);
        }

        console.log(`–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${pastedCount} —è—á–µ–µ–∫ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞`);
        return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–∏–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
      }

      // –ï—Å–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—É—Ñ–µ—Ä–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
      if (clipboard) {
        console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—É—Ñ–µ—Ä–∞:', clipboard);
        const startRow = selectedCell.row;
        const startCol = selectedCell.column;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ø–∏—é cells Map –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const newCells = new Map(cells);
        let pastedCount = 0;
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —è—á–µ–µ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const cellsToSave: Array<{row: number; column: number; value: string; formula?: string}> = [];
        
        clipboard.data.forEach((cellData, relativeKey) => {
          const [relRow, relCol] = relativeKey.split('-').map(Number);
          const targetRow = startRow + relRow;
          const targetCol = startCol + relCol;

          console.log(`–í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏—é [${targetRow}, ${targetCol}]:`, cellData.value);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–∏—Ü—ã
          if (targetRow < (sheet.rowCount || 100) && targetCol < (sheet.columnCount || 26)) {
            const key = getCellKey(targetRow, targetCol);
            
            const updatedCell: CellData = {
              row: targetRow,
              column: targetCol,
              value: cellData.value,
              formula: cellData.formula,
              format: cellData.format,
            };
            
            newCells.set(key, updatedCell);
            pastedCount++;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            cellsToSave.push({
              row: targetRow,
              column: targetCol,
              value: cellData.value || '',
              formula: cellData.formula
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            if (cellData.format) {
              handleCellFormat(targetRow, targetCol, cellData.format);
            }
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        setCells(newCells);
        
        // –ú–∞—Å—Å–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (cellsToSave.length > 0) {
          saveCellsBatch(cellsToSave);
        }
        console.log(`–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${pastedCount} —è—á–µ–µ–∫ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –±—É—Ñ–µ—Ä–∞`);

        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è, –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        if (clipboard.operation === 'cut') {
          setClipboard(null);
        }
      } else {
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–∞—Ö –æ–±–º–µ–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π —è—á–µ–π–∫–µ
  const handleCellFormat = async (row: number, column: number, format: any) => {
    try {
      await cellsApi.formatCells(sheet.id, format, row, row, column, column);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const key = getCellKey(row, column);
      const newCells = new Map(cells);
      const existingCell = newCells.get(key);
      const updatedFormat = { ...existingCell?.format, ...format };
      
      if (existingCell) {
        newCells.set(key, { ...existingCell, format: updatedFormat });
      } else {
        newCells.set(key, {
          row,
          column,
          value: '',
          format: updatedFormat
        });
      }
      setCells(newCells);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —è—á–µ–π–∫–µ:', error);
    }
  };

  const handleFormat = async (format: any) => {
    if (!selectedRange || userPermissions === 'read') return;
    
    try {
      await cellsApi.formatCells(
        sheet.id,
        format,
        selectedRange.startRow,
        selectedRange.endRow,
        selectedRange.startColumn,
        selectedRange.endColumn
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫
      const newCells = new Map(cells);
      for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
        for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
          const key = getCellKey(row, col);
          const existingCell = newCells.get(key);
          const updatedFormat = { ...existingCell?.format, ...format };
          
          if (existingCell) {
            newCells.set(key, { ...existingCell, format: updatedFormat });
          } else {
            newCells.set(key, {
              row,
              column: col,
              value: '',
              format: updatedFormat
            });
          }
        }
      }
      setCells(newCells);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
      if (format.textWrap === 'wrap') {
        for (let row = selectedRange.startRow; row <= selectedRange.endRow; row++) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
          let maxRequiredHeight = ROW_HEIGHT_DEFAULT;
          
          for (let col = selectedRange.startColumn; col <= selectedRange.endColumn; col++) {
            const cellValue = getCellValue(row, col);
            const columnWidth = getColumnWidth(col);
            
            if (cellValue && cellValue.length > 0) {
              // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã: 
              // ~10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ 100px —à–∏—Ä–∏–Ω—ã = 1 —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
              // –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ ~20px –≤—ã—Å–æ—Ç—ã
              const charWidth = 8; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å–∏–º–≤–æ–ª–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
              const charsPerLine = Math.floor((columnWidth - 16) / charWidth); // -16px –¥–ª—è padding
              const linesNeeded = Math.ceil(cellValue.length / charsPerLine);
              const lineHeight = 20; // –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
              const requiredHeight = Math.max(ROW_HEIGHT_DEFAULT, linesNeeded * lineHeight + 8); // +8px padding
              
              maxRequiredHeight = Math.max(maxRequiredHeight, requiredHeight);
            }
          }
          
          const currentHeight = getRowHeight(row);
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –º–∏–Ω–∏–º—É–º –¥–æ 60px –∏–ª–∏ –¥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã
          const newHeight = Math.max(currentHeight, maxRequiredHeight, 60);
          
          if (newHeight !== currentHeight) {
            setRowSizes(prev => ({ ...prev, [row]: newHeight }));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤—ã—Å–æ—Ç—É –≤ backend
            try {
              await sheetsExtendedApi.resizeRow(sheet.id.toString(), row, newHeight);
              console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ ${row} –¥–æ ${newHeight}px –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ–±—É–µ—Ç ${maxRequiredHeight}px)`);
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏:', error);
            }
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  };

  const handleAddRow = async (count: number = 1) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
      await sheetsExtendedApi.addRowsBatch(sheet.id.toString(), count);
      window.location.reload(); // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫:', error);
    }
  };

  const handleAddColumn = async (count: number = 1) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
      await sheetsExtendedApi.addColumnsBatch(sheet.id.toString(), count);
      window.location.reload(); // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤:', error);
    }
  };

  const handleShowHistory = (row: number, column: number) => {
    setHistoryCell({ row, column });
      setHistoryDialogOpen(true);
  };

  const isInSelectedRange = useCallback((row: number, column: number): boolean => {
    if (!selectedRange) return false;
    return row >= selectedRange.startRow && row <= selectedRange.endRow &&
           column >= selectedRange.startColumn && column <= selectedRange.endColumn;
  }, [selectedRange]);

  const isInClipboardRange = useCallback((row: number, column: number): boolean => {
    if (!clipboard) return false;
    const { range } = clipboard;
    return row >= range.startRow && row <= range.endRow &&
           column >= range.startColumn && column <= range.endColumn;
  }, [clipboard]);

  const getColumnWidth = (column: number): number => {
    const width = columnSizes[column] || 100;
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (process.env.NODE_ENV === 'development' && columnSizes[column]) {
      console.log(`üîç getColumnWidth(${column}) = ${width} –∏–∑ columnSizes:`, columnSizes);
    }
    return width;
  };

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ A, B, Z, AA, AB
  const generateColumnName = (columnIndex: number): string => {
    let result = '';
    let num = columnIndex + 1; // –î–µ–ª–∞–µ–º 1-based –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    
    while (num > 0) {
      num--; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ 0-based –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
      result = String.fromCharCode(65 + (num % 26)) + result;
      num = Math.floor(num / 26);
    }
    
    return result;
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∂—É—Ä–Ω–∞–ª–æ–º –∑–∞—Å–µ–ª–µ–Ω–∏—è
  const isJournalSheet = useMemo(() => {
    return sheet?.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è') || 
           sheet?.template?.name?.includes('–ñ—É—Ä–Ω–∞–ª –∑–∞—Å–µ–ª–µ–Ω–∏—è');
  }, [sheet?.name, sheet?.template?.name]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const sortCells = useCallback((column: number, direction: 'asc' | 'desc') => {
    if (!isJournalSheet) return;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ - —Å—Ç—Ä–æ–∫—É 0)
    const dataRows: { [row: number]: Map<number, CellData> } = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —è—á–µ–π–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    for (let row = 1; row < (sheet.rowCount || 100); row++) {
      const rowCells = new Map<number, CellData>();
      let hasData = false;
      
      for (let col = 0; col < (sheet.columnCount || 26); col++) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫—É 15 (–ü—Ä–∏–º–µ—á–∞–Ω–∏—è) –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
        if (sheet?.templateId === 2 && col === 15) continue;
        
        const key = getCellKey(row, col);
        const cell = cells.get(key);
        if (cell) {
          rowCells.set(col, cell);
          hasData = true;
        }
      }
      
      if (hasData) {
        dataRows[row] = rowCells;
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const rowsArray = Object.entries(dataRows).map(([rowStr, rowCells]) => ({
      originalRow: parseInt(rowStr),
      cells: rowCells
    }));

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É
    rowsArray.sort((a, b) => {
      const aCellKey = getCellKey(a.originalRow, column);
      const bCellKey = getCellKey(b.originalRow, column);
      const aCell = cells.get(aCellKey);
      const bCell = cells.get(bCellKey);
      
      let aValue = aCell?.value || '';
      let bValue = bCell?.value || '';

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–∞—Ç (—Å—Ç–æ–ª–±—Ü—ã 1 –∏ 3)
      if (column === 1 || column === 3) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ Date –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const parseDate = (dateStr: string): Date => {
          if (!dateStr || typeof dateStr !== 'string') return new Date(0);
          const match = dateStr.trim().match(/^(\d{1,2})\.(\d{1,2})\.(\d{4})$/);
          if (match) {
            const [, day, month, year] = match;
            return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
          }
          return new Date(0);
        };

        const aDate = parseDate(aValue);
        const bDate = parseDate(bValue);
        
        const comparison = aDate.getTime() - bDate.getTime();
        return direction === 'asc' ? comparison : -comparison;
      }

      // –û–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
      if (direction === 'asc') {
        return aValue.localeCompare(bValue, 'ru', { numeric: true });
      } else {
        return bValue.localeCompare(aValue, 'ru', { numeric: true });
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —è—á–µ–µ–∫ —Å –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const newCells = new Map(cells);
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∞—Ö (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    for (let row = 1; row < (sheet.rowCount || 100); row++) {
      for (let col = 0; col < (sheet.columnCount || 26); col++) {
        // –ù–µ –æ—á–∏—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É 15 (–ü—Ä–∏–º–µ—á–∞–Ω–∏—è) –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–∫—Ä—ã—Ç–∞
        if (sheet?.templateId === 2 && col === 15) continue;
        
        const key = getCellKey(row, col);
        newCells.delete(key);
      }
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    rowsArray.forEach((rowData, index) => {
      const newRow = index + 1; // +1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ 0 - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      
      rowData.cells.forEach((cell, col) => {
        const newKey = getCellKey(newRow, col);
        newCells.set(newKey, {
          ...cell,
          row: newRow // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        });
      });
    });

    setCells(newCells);
    console.log(`üîÑ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Å—Ç–æ–ª–±—Ü—É ${column} (${direction === 'asc' ? '–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' : '–ø–æ —É–±—ã–≤–∞–Ω–∏—é'})`);
  }, [cells, sheet, isJournalSheet]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSort = (column: number) => {
    if (!isJournalSheet || (column !== 1 && column !== 3)) return;

    let newDirection: 'asc' | 'desc' = 'asc';
    
    if (sortConfig?.column === column) {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      newDirection = sortConfig.direction === 'asc' ? 'desc' : 'asc';
    }

    setSortConfig({ column, direction: newDirection });
    sortCells(column, newDirection);
  };

  const renderColumnHeaders = () => {
    const headers = [];
    for (let col = 0; col < (sheet.columnCount || 26); col++) {
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ 5 (–í—Ä–µ–º—è –≤—ã—Å–µ–ª–µ–Ω–∏—è), 8 (–í—Ä–µ–º—è –∑–∞—Å–µ–ª–µ–Ω–∏—è), 15 (–ü—Ä–∏–º–µ—á–∞–Ω–∏—è) –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞
      if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
      
      const width = getColumnWidth(col);
      const columnName = generateColumnName(col); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
      const needsSortButton = isJournalSheet && (col === 1 || col === 3);
      const isSorted = sortConfig?.column === col;
      const sortDirection = isSorted ? sortConfig.direction : null;
      
      headers.push(
        <Box
          key={col}
          sx={{
            width: width,
            height: 30,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: '#f5f5f5',
            border: '1px solid #e0e0e0',
            fontWeight: 'bold',
            fontSize: '0.875rem',
            position: 'relative',
            userSelect: 'none',
            WebkitUserSelect: 'none',
            MozUserSelect: 'none',
            msUserSelect: 'none',
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
          {columnName}
            {needsSortButton && (
              <Tooltip title={`–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ ${col === 1 ? '–¥–∞—Ç–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è' : '–¥–∞—Ç–µ –≤—ã—Å–µ–ª–µ–Ω–∏—è'}`}>
                <IconButton
                  size="small"
                  onClick={() => handleSort(col)}
                  sx={{
                    padding: '2px',
                    color: isSorted ? '#1976d2' : '#666',
                    '&:hover': {
                      backgroundColor: 'rgba(25, 118, 210, 0.1)',
                    },
                  }}
                >
                  {isSorted ? (
                    sortDirection === 'asc' ? (
                      <ArrowUpwardIcon sx={{ fontSize: 14 }} />
                    ) : (
                      <ArrowDownwardIcon sx={{ fontSize: 14 }} />
                    )
                  ) : (
                    <SortIcon sx={{ fontSize: 14 }} />
                  )}
                </IconButton>
              </Tooltip>
            )}
          </Box>
          {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ */}
          <Box
            sx={{
              position: 'absolute',
              right: 0,
              top: 0,
              bottom: 0,
              width: 4,
              cursor: 'col-resize',
              '&:hover': {
                backgroundColor: '#1976d2',
              },
            }}
            onMouseDown={(e) => {
              e.preventDefault();
              const startX = e.clientX;
              const startWidth = width;
              let finalWidth = startWidth; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã
              
              const handleMouseMove = (e: MouseEvent) => {
                const newWidth = Math.max(50, startWidth + (e.clientX - startX));
                finalWidth = newWidth; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
                setColumnSizes(prev => ({ ...prev, [col]: newWidth }));
              };
              
              const handleMouseUp = async () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
                
                try {
                  console.log(`üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ ${col}: ${finalWidth}px –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.id}`);
                  const response = await sheetsExtendedApi.resizeColumn(sheet.id.toString(), col, finalWidth);
                  console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–∞ ${col}: ${finalWidth}px`, response);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ settings –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                  if (response?.data?.settings?.columnSizes) {
                    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–æ–ª–±—Ü–æ–≤:`, response.data.settings.columnSizes);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                    setColumnSizes(prevSizes => ({
                      ...prevSizes,
                      ...response.data.settings.columnSizes
                    }));
                  } else {
                    console.warn(`‚ö†Ô∏è Settings –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ:`, response);
                    
                    // –ï—Å–ª–∏ settings –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å sheet
                    // –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ DMD Cottage
                    if (!(isDMDCottageReport && hasAutoSortedRef.current)) {
                      try {
                        console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º sheet –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö settings`);
                        const sheetResponse = await sheetsApi.getSheet(sheet.id.toString());
                        if (sheetResponse.data?.sheet?.settings?.columnSizes) {
                          console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã settings –∏–∑ getSheet:`, sheetResponse.data.sheet.settings.columnSizes);
                          setColumnSizes(sheetResponse.data.sheet.settings.columnSizes);
                        }
                      } catch (reloadError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ sheet:', reloadError);
                      }
                    } else {
                      console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É sheet - –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ DMD Cottage —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
                    }
                  }
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–∞:', error);
                }
              };
              
              document.addEventListener('mousemove', handleMouseMove);
              document.addEventListener('mouseup', handleMouseUp);
            }}
          />
        </Box>
      );
    }
    return headers;
  };

  const renderRowHeader = (row: number) => {
    const height = getRowHeight(row);
    
    return (
      <Box
        sx={{
          width: 50,
          height: height,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: '#f5f5f5',
          border: '1px solid #e0e0e0',
          fontWeight: 'bold',
          fontSize: '0.875rem',
          position: 'relative',
          userSelect: 'none',
          WebkitUserSelect: 'none',
          MozUserSelect: 'none',
          msUserSelect: 'none',
        }}
      >
        {row + 1}
        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ */}
        <Box
          sx={{
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            height: 4,
            cursor: 'row-resize',
            '&:hover': {
              backgroundColor: '#1976d2',
            },
          }}
          onMouseDown={(e) => {
            e.preventDefault();
            const startY = e.clientY;
            const startHeight = height;
            let finalHeight = startHeight; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã
            
            const handleMouseMove = (e: MouseEvent) => {
              const newHeight = Math.max(20, startHeight + (e.clientY - startY));
              finalHeight = newHeight; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
              setRowSizes(prev => ({ ...prev, [row]: newHeight }));
            };
            
            const handleMouseUp = async () => {
              document.removeEventListener('mousemove', handleMouseMove);
              document.removeEventListener('mouseup', handleMouseUp);
              
              try {
                console.log(`üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ ${row}: ${finalHeight}px –≤ —Ç–∞–±–ª–∏—Ü–µ ${sheet.id}`);
                const response = await sheetsExtendedApi.resizeRow(sheet.id.toString(), row, finalHeight);
                console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ ${row}: ${finalHeight}px`, response);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ settings –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                if (response?.data?.settings?.rowSizes) {
                  console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–æ–∫:`, response.data.settings.rowSizes);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                  setRowSizes(prevSizes => ({
                    ...prevSizes,
                    ...response.data.settings.rowSizes
                  }));
                } else {
                  console.warn(`‚ö†Ô∏è Settings –¥–ª—è —Å—Ç—Ä–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ:`, response);
                }
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏:', error);
              }
            };
            
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
          }}
        />
      </Box>
    );
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫—Ä—ã—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ DMD Cottage
  const hideRowNumbers = useMemo(() => {
    return isDMDCottageReport;
  }, [isDMDCottageReport]);

  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–Ω—Ü–æ–º –≥—Ä—É–ø–ø—ã –≤–∏–¥–∞ ["29–∞", "29–∞ –¥—É–ª—å"] –ø–æ –∫–æ–ª–æ–Ω–∫–µ A (0)
  const groupEndRows = useMemo(() => {
    if (!hideRowNumbers) return new Set<number>();
    const result = new Set<number>();
    const maxRows = sheet.rowCount || 100;
    for (let r = 0; r < maxRows - 1; r++) {
      const v1 = (getCellValue(r, 0) || '').toString().trim().toLowerCase();
      const v2 = (getCellValue(r + 1, 0) || '').toString().trim().toLowerCase();
      if (!v1 || !v2) continue;
      if (v2 === `${v1} –¥—É–±–ª—å`) {
        result.add(r + 1); // –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä—ã ‚Äî –∫–æ–Ω–µ—Ü –≥—Ä—É–ø–ø—ã
      }
    }
    return result;
  }, [hideRowNumbers, sheet.rowCount, cells]);

  // –ê–≤—Ç–æ-—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É A –¥–ª—è –æ—Ç—á–µ—Ç–∞ DMD Cottage (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–∞—Ä X / X –¥—É–±–ª—å)
  const sortByColumnAForDMDCottage = useCallback(() => {
    if (!isDMDCottageReport) return;
    if (isSortingInProgressRef.current) {
      console.log('üö´ –ê–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É DMD Cottage');
    isSortingInProgressRef.current = true;
    const totalRows = sheet.rowCount || 100;
    const totalCols = sheet.columnCount || 26;

    // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 3-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 2): 0 ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫, 1 ‚Äî –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —à–∞–ø–∫–∏
    const dataStartRow = 2;

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–∑—ã: —á–∏—Å–ª–æ + –ª–∏—Ç–µ—Ä–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/–∫–∏—Ä–∏–ª–ª–∏—Ü–∞), –ø—É—Å—Ç–∞—è –ª–∏—Ç–µ—Ä–∞ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è
    const parseBase = (raw: string): { num: number | null; suffix: string; norm: string } => {
      const s = (raw || '').toString().trim().toUpperCase();
      const m = s.match(/^(\d+)\s*([A-Z–ê-–Ø–Å]*)$/i);
      if (m) {
        const num = parseInt(m[1], 10);
        const suffix = (m[2] || '').toUpperCase();
        return { num: Number.isFinite(num) ? num : null, suffix, norm: `${num}${suffix}` };
      }
      return { num: null, suffix: s, norm: s };
    };

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏—Ö —è—á–µ–π–∫–∞–º–∏
    type RowCells = { originalRow: number; cells: Map<number, CellData>; aRaw: string; aBase: string; isDub: boolean; parsed: { num: number | null; suffix: string; norm: string } };
    const rows: RowCells[] = [];
    for (let row = dataStartRow; row < totalRows; row++) {
      let hasData = false;
      const rowCells = new Map<number, CellData>();
      for (let col = 0; col < totalCols; col++) {
        const key = getCellKey(row, col);
        const cell = cells.get(key);
        if (cell) {
          rowCells.set(col, cell);
          if (cell.value && cell.value.toString().trim() !== '') hasData = true;
        }
      }
      if (!hasData) continue;
      const aVal = (getCellValue(row, 0) || '').toString();
      const lower = aVal.toLowerCase().trim();
      // –†–∞—Å–ø–æ–∑–Ω–∞—ë–º "–¥—É–±–ª—å" —Å –¥–æ–ø. –ø—Ä–æ–±–µ–ª–∞–º–∏/—Ä–µ–≥–∏—Å—Ç—Ä/—Å–∫—Ä—ã—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
      const isDub = /\s*–¥—É–±–ª—å\s*$/i.test(lower);
      const baseText = isDub ? lower.replace(/\s*–¥—É–±–ª—å\s*$/i, '').trim() : lower;
      const parsed = parseBase(baseText);
      rows.push({ originalRow: row, cells: rowCells, aRaw: aVal, aBase: baseText, isDub, parsed });
    }

    if (rows.length === 0) return;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã: –æ—Å–Ω–æ–≤–Ω–æ–π + –¥—É–±–ª—å
    const groups = new Map<string, { base: string; parsed: { num: number | null; suffix: string; norm: string }; main?: RowCells; dub?: RowCells }>();
    for (const r of rows) {
      const key = r.parsed.norm || r.aBase;
      const existing = groups.get(key) || { base: r.aBase, parsed: r.parsed };
      if (r.isDub) existing.dub = r; else existing.main = r;
      // –ï—Å–ª–∏ parsed —É —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω (–µ—Å—Ç—å num), –æ–±–Ω–æ–≤–∏–º
      if (existing.parsed.num === null && r.parsed.num !== null) existing.parsed = r.parsed;
      groups.set(key, existing);
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã: –ø–æ —á–∏—Å–ª—É, –∑–∞—Ç–µ–º –ø–æ –ª–∏—Ç–µ—Ä–µ (–ø—É—Å—Ç–∞—è ‚Äî —Ä–∞–Ω—å—à–µ), –∑–∞—Ç–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∫–∞–∫ fallback
    const sortedGroups = Array.from(groups.values()).sort((a, b) => {
      const pa = a.parsed; const pb = b.parsed;
      if (pa.num !== null && pb.num !== null && pa.num !== pb.num) return pa.num - pb.num;
      if (pa.num !== null && pb.num === null) return -1;
      if (pa.num === null && pb.num !== null) return 1;
      // num —Ä–∞–≤–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã (–ø—É—Å—Ç–æ–π —Ä–∞–Ω—å—à–µ)
      const sa = pa.suffix || '';
      const sb = pb.suffix || '';
      if (sa === '' && sb !== '') return -1;
      if (sa !== '' && sb === '') return 1;
      const sufCmp = sa.localeCompare(sb, 'ru', { numeric: true, sensitivity: 'base' });
      if (sufCmp !== 0) return sufCmp;
      // Fallback: –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
      return (pa.norm || a.base).localeCompare(pb.norm || b.base, 'ru', { numeric: true, sensitivity: 'base' });
    });

    // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É —è—á–µ–µ–∫
    const newCells = new Map(cells);
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    for (let row = dataStartRow; row < totalRows; row++) {
      for (let col = 0; col < totalCols; col++) {
        const key = getCellKey(row, col);
        newCells.delete(key);
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ: —Å–Ω–∞—á–∞–ª–∞ main, –∑–∞—Ç–µ–º dub (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let writeRow = dataStartRow;
    for (const g of sortedGroups) {
      const order: RowCells[] = [];
      if (g.main) order.push(g.main);
      if (g.dub) order.push(g.dub);
      for (const item of order) {
        item.cells.forEach((cell, col) => {
          const newKey = getCellKey(writeRow, col);
          newCells.set(newKey, { ...cell, row: writeRow });
        });
        writeRow++;
      }
    }

    setCells(newCells);
    console.log('üîÑ –ê–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ DMD Cottage –ø–æ —Å—Ç–æ–ª–±—Ü—É A –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—á–∏—Å–ª–æ+–ª–∏—Ç–µ—Ä–∞, –≥—Ä—É–ø–ø—ã —Å –¥—É–±–ª–µ–º)');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setTimeout(() => {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏');
      setRenderKey(prev => prev + 1); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä
      setCells(new Map(newCells)); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Map –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
      setScrollTop(prev => prev + 1);
      setTimeout(() => {
        setScrollTop(prev => prev - 1);
      }, 50);
    }, 100);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const cellsToSave = Array.from(newCells.values())
      .filter(cell => cell.row >= dataStartRow && cell.row < writeRow) // —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
      .map(cell => ({
        row: cell.row,
        column: cell.column,
        value: cell.value,
        format: cell.format
      }));
    
    if (cellsToSave.length > 0) {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${cellsToSave.length} –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
      saveCellsBatchOptimized(cellsToSave).finally(() => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setTimeout(() => {
          isSortingInProgressRef.current = false;
          console.log('‚úÖ –ê–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω');
        }, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      });
    } else {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setTimeout(() => {
        isSortingInProgressRef.current = false;
        console.log('‚úÖ –ê–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö), —Ñ–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω');
      }, 500);
    }
  }, [cells, sheet, isDMDCottageReport, getCellValue, saveCellsBatchOptimized, setRenderKey, setScrollTop]);

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–ª–∞—Ç—ã –¥–ª—è DMD Cottage (–û–±—â–∞—è —Å—É–º–º–∞ - –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)
  const calculateDoplataForDMDCottage = useCallback(() => {
    if (!isDMDCottageReport) return;
    if (isSortingInProgressRef.current) {
      console.log('üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã DMD - –∏–¥–µ—Ç –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞');
      return;
    }
    
    const totalRows = sheet.rowCount || 100;
    const dataStartRow = 2; // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 3-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 2)
    
    // –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ DMD Cottage
    const TOTAL_SUM_COL = 11;     // –û–±—â–∞—è —Å—É–º–º–∞
    const PREPAYMENT_COL = 12;    // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞  
    const DOPLATA_COL = 13;       // –î–æ–ø–ª–∞—Ç–∞
    
    const newCells = new Map(cells);
    let updatedCount = 0;

    for (let row = dataStartRow; row < totalRows; row++) {
      const totalSumKey = getCellKey(row, TOTAL_SUM_COL);
      const prepaymentKey = getCellKey(row, PREPAYMENT_COL);
      const doplataKey = getCellKey(row, DOPLATA_COL);
      
      const totalSumCell = newCells.get(totalSumKey);
      const prepaymentCell = newCells.get(prepaymentKey);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ (–ø–æ –∫–æ–ª–æ–Ω–∫–µ A)
      const rowAKey = getCellKey(row, 0);
      const rowACell = newCells.get(rowAKey);
      if (!rowACell?.value || !rowACell.value.toString().trim()) continue;
      
      // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const totalSum = parseFloat((totalSumCell?.value || '0').toString().replace(/[^\d.-]/g, '')) || 0;
      const prepayment = parseFloat((prepaymentCell?.value || '0').toString().replace(/[^\d.-]/g, '')) || 0;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–ª–∞—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∞—è —Å—É–º–º–∞
      if (totalSum > 0) {
        const doplata = totalSum - prepayment;
        const existingDoplataCell = newCells.get(doplataKey);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –¥–æ–ø–ª–∞—Ç—ã
        newCells.set(doplataKey, {
          ...existingDoplataCell,
          row,
          column: DOPLATA_COL,
          value: doplata.toString(),
          format: existingDoplataCell?.format || {}
        });
        
        updatedCount++;
      }
    }

    if (updatedCount > 0) {
      setCells(newCells);
      console.log(`üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã DMD Cottage –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${updatedCount} —Å—Ç—Ä–æ–∫`);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      setTimeout(() => {
        console.log('üí∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–ª–∞—Ç—ã');
        setRenderKey(prev => prev + 1); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä
        setCells(new Map(newCells)); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Map –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
      }, 150);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const cellsToSave = Array.from(newCells.values())
        .filter(cell => cell.column === DOPLATA_COL && cell.row >= dataStartRow)
        .map(cell => ({
          row: cell.row,
          column: cell.column,
          value: cell.value,
          format: cell.format
        }));

      if (cellsToSave.length > 0) {
        saveCellsBatchOptimized(cellsToSave);
      }
    }
  }, [cells, sheet, isDMDCottageReport, saveCellsBatchOptimized, setRenderKey]);

  // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è—á–µ–µ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞ DMD Cottage
  const hasAutoSortedRef = useRef(false);
  
  // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞–∑–º–µ—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
  const needsResizeAfterSortRef = useRef(false);
  
  // –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const isSortingInProgressRef = useRef(false);
  useEffect(() => {
    if (!isDMDCottageReport) return;
    if (cells.size === 0) return;
    if (hasAutoSortedRef.current) return;
    
    const timer = setTimeout(() => {
      sortByColumnAForDMDCottage();
      
      hasAutoSortedRef.current = true;
      needsResizeAfterSortRef.current = true;
      calculateDoplataForDMDCottage();
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –¥–æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      // setTimeout(() => {
        
      // }, 2000);

    }, 1000);
    return () => clearTimeout(timer);
  }, [isDMDCottageReport, cells, sortByColumnAForDMDCottage, calculateDoplataForDMDCottage]);

  // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∏–∂–µ handleAutoResize: —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç –∞–≤—Ç–æ—Ä–∞–∑–º–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏


  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–ª–∏—Ü—ã
  useEffect(() => {
    hasAutoSortedRef.current = false;
  }, [sheet?.id]);

  const renderGrid = () => {
    const { startRow, endRow } = getVisibleRows();
    const rows = [];
    const totalHeight = getTotalHeight();
    const startOffset = getRowOffset(startRow);
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–ª–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
    const virtualContainer = (
      <Box
        sx={{
          height: totalHeight,
          position: 'relative',
        }}
      >
        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫ */}
        <Box
          sx={{
            position: 'absolute',
            top: startOffset,
            left: 0,
            right: 0,
          }}
        >
          {(() => {
            const visibleRows = [];
            
            for (let row = startRow; row <= endRow; row++) {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É 0 –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ (—à–∞–ø–∫–∞)
              if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç') && row === 0) continue;
              const cells = [];
              const rowHeight = getRowHeight(row);
      
              for (let col = 0; col < (sheet.columnCount || 26); col++) {
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ 5 (–í—Ä–µ–º—è –≤—ã—Å–µ–ª–µ–Ω–∏—è), 8 (–í—Ä–µ–º—è –∑–∞—Å–µ–ª–µ–Ω–∏—è), 15 (–ü—Ä–∏–º–µ—á–∞–Ω–∏—è) –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞
                if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
                
                const isSelected = selectedCell?.row === row && selectedCell?.column === col;
                const isEditing = editingCell?.row === row && editingCell?.column === col;
                const isInRange = isInSelectedRange(row, col);
                const isInClipboard = isInClipboardRange(row, col);
                const cellFormat = getCellFormat(row, col);
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ UI
                const effectiveFormat = (sheet?.templateId === 2 && row === 1)
                  ? { ...cellFormat, fontSize: Math.max(Number(cellFormat?.fontSize || 0), 16) }
                  : cellFormat;
                const columnWidth = getColumnWidth(col);
                
                const isGroupEnd = groupEndRows.has(row);
                cells.push(
                  <Cell
                    key={`${row}-${col}`}
                    row={row}
                    column={col}
                    value={getCellValue(row, col)}
                    format={effectiveFormat}
                    isSelected={isSelected}
                    isInRange={isInRange}
                    isInClipboard={isInClipboard}
                    isEditing={isEditing}
                    editValue={editValue}
                    width={columnWidth}
                    height={rowHeight}
                    isGroupEndRow={isGroupEnd}
                    onEditValueChange={setEditValue}
                    onClick={() => handleCellClick(row, col)}
                    onMouseDown={() => handleCellMouseDown(row, col)}
                    onMouseEnter={() => handleCellMouseEnter(row, col)}
                    onDoubleClick={() => handleCellDoubleClick(row, col)}
                    onKeyDown={handleEditKeyDown}
                    onBlur={handleEditBlur}
                    readOnly={userPermissions === 'read'}
                    sheetTitle={sheet.name || ''}
                    templateName={sheet.template?.name || ''}
                  />
                );
              }
      
              visibleRows.push(
                <Box key={row} sx={{ display: 'flex' }}>
                  {!hideRowNumbers && renderRowHeader(row)}
                  {cells}
                </Box>
              );
            }
            
            return visibleRows;
          })()}
        </Box>
      </Box>
    );
    
    return virtualContainer;
  };

  // –û—á–∏—Å—Ç–∫–∞ –¥–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      debouncedSaveCell.cancel();
      debouncedUpdateSelection.cancel();
      debouncedScrollUpdate.cancel();
      debouncedCalculateDoplata.cancel();
    };
  }, [debouncedSaveCell, debouncedUpdateSelection, debouncedScrollUpdate, debouncedCalculateDoplata]);

  const isReportSheet = useMemo(() => {
    const result = sheet?.name?.toLowerCase().includes('–æ—Ç—á–µ—Ç') ||
                   sheet?.template?.name?.toLowerCase().includes('–æ—Ç—á–µ—Ç');
    console.log('üîç isReportSheet –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
      sheetName: sheet?.name,
      templateName: sheet?.template?.name,
      result
    });
    return result;
  }, [sheet?.name, sheet?.template?.name]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  const calculateOptimalColumnWidth = useCallback((column: number): number => {
    // –î–ª—è —à–∞–±–ª–æ–Ω–∞ DMD Cottage –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    if (isDMDCottageReport && DMD_COTTAGE_FIXED_COLUMN_WIDTHS[column]) {
      return DMD_COTTAGE_FIXED_COLUMN_WIDTHS[column];
    }

    const MIN_WIDTH = 100;
    const MAX_WIDTH = 400;
    const PADDING = 24; // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã —è—á–µ–π–∫–∏

    // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    const getTextWidth = (() => {
      let canvas: HTMLCanvasElement | null = null;
      let ctx: CanvasRenderingContext2D | null = null;
      return (text: string) => {
        if (!canvas) {
          canvas = document.createElement('canvas');
          ctx = canvas.getContext('2d');
        }
        if (!ctx) return text.length * 9 + PADDING; // fallback
        ctx.font = '14px Arial';
        return ctx.measureText(text).width + PADDING;
      };
    })();

    let maxWidth = MIN_WIDTH;
    const rowLimit = Math.min(sheet.rowCount || 100, 200);
    for (let row = 0; row < rowLimit; row++) {
      const cell = cells.get(`${row}-${column}`);
      const text = cell?.value || '';
      if (text) {
        maxWidth = Math.max(maxWidth, Math.ceil(getTextWidth(text)));
      }
    }
    return Math.min(maxWidth, MAX_WIDTH);
  }, [cells, sheet.rowCount, isDMDCottageReport]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
  const calculateOptimalRowHeight = useCallback((row: number): number => {
    const MIN_HEIGHT = 30;
    const MAX_HEIGHT = 280;
    const LINE_HEIGHT = 20;
    const CHAR_WIDTH = 8;

    let maxHeight = MIN_HEIGHT;
    const maxCols = Math.min(sheet.columnCount || 26, 50);
    for (let col = 0; col < maxCols; col++) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ 5, 8, 15 –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞
      if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
      
      const cell = cells.get(`${row}-${col}`);
      if (!cell?.value) continue;
      const columnWidth = getColumnWidth(col);
      const availableWidth = Math.max(40, columnWidth - 16);
      const charsPerLine = Math.max(1, Math.floor(availableWidth / CHAR_WIDTH));
      const lines = Math.ceil(cell.value.length / charsPerLine);
      const cellHeight = lines * LINE_HEIGHT + 8; // +8 padding
      maxHeight = Math.max(maxHeight, cellHeight);
    }
    return Math.min(maxHeight, MAX_HEIGHT);
  }, [cells, getColumnWidth, sheet.columnCount]);

  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const isAutoResizeRunningRef = useRef(false);

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  const handleAutoResize = useCallback(async () => {
    if (!isReportSheet || userPermissions === 'read') {
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞:', { isReportSheet, userPermissions });
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    if (isAutoResizeRunningRef.current) {
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    isAutoResizeRunningRef.current = true;
    
    console.log('üîß –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è');
    console.log('üìä –¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã - columnSizes:', columnSizes, 'rowSizes:', rowSizes);
    console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', sheet.settings);
    
    try {
      const newColumnSizes: { [key: number]: number } = {};
      const newRowSizes: { [key: number]: number } = {};

      // –ü–æ–ª–Ω—ã–π –æ—Ö–≤–∞—Ç —Å—Ç–æ–ª–±—Ü–æ–≤
      const maxCols = sheet.columnCount || 26;
      for (let col = 0; col < maxCols; col++) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ 5, 8, 15 –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞
        if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
        
        const optimalWidth = calculateOptimalColumnWidth(col);
        const currentWidth = getColumnWidth(col);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (—Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)
        if (Math.abs(optimalWidth - currentWidth) > 1) {
          newColumnSizes[col] = optimalWidth;
        }
      }

      // –î–ª—è —à–∞–±–ª–æ–Ω–∞ DMD Cottage –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã
      if (isDMDCottageReport) {
        let hasFixedChanges = false;
        Object.entries(DMD_COTTAGE_FIXED_COLUMN_WIDTHS).forEach(([col, width]) => {
          const columnIndex = parseInt(col);
          const currentWidth = getColumnWidth(columnIndex);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
          if (Math.abs(width - currentWidth) > 1) {
            newColumnSizes[columnIndex] = width;
            hasFixedChanges = true;
            console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ ${columnIndex}: ${width}px (–±—ã–ª–æ ${currentWidth}px)`);
          }
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∏—Ä–∏–Ω–∞—Ö, –æ—á–∏—â–∞–µ–º newColumnSizes –æ—Ç –Ω–∏—Ö
        if (!hasFixedChanges) {
          Object.keys(DMD_COTTAGE_FIXED_COLUMN_WIDTHS).forEach(col => {
            const columnIndex = parseInt(col);
            delete newColumnSizes[columnIndex];
          });
        }
      }

      // –ü–µ—Ä–µ—Å—á–µ—Ç –≤—ã—Å–æ—Ç —Å—Ç—Ä–æ–∫ —Å —É—á–µ—Ç–æ–º –ù–û–í–´–• —à–∏—Ä–∏–Ω —Å—Ç–æ–ª–±—Ü–æ–≤
      const effectiveWidth = (col: number) => newColumnSizes[col] ?? getColumnWidth(col);
      const maxRows = Math.min(sheet.rowCount || 100, 500);
      for (let row = 0; row < maxRows; row++) {
        const MIN_HEIGHT = 30;
        const MAX_HEIGHT = 280;
        const LINE_HEIGHT = 20;
        const CHAR_WIDTH = 8;
        let maxHeight = MIN_HEIGHT;
        for (let col = 0; col < maxCols; col++) {
          const cell = cells.get(`${row}-${col}`);
          if (!cell?.value) continue;
          const availableWidth = Math.max(40, effectiveWidth(col) - 16);
          const charsPerLine = Math.max(1, Math.floor(availableWidth / CHAR_WIDTH));
          const lines = Math.ceil(cell.value.length / charsPerLine);
          const cellHeight = lines * LINE_HEIGHT + 8;
          maxHeight = Math.max(maxHeight, cellHeight);
        }
        const optimalHeight = Math.min(maxHeight, MAX_HEIGHT);
        const currentHeight = getRowHeight(row);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (—Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)
        if (Math.abs(optimalHeight - currentHeight) > 1) {
          newRowSizes[row] = optimalHeight;
        }
      }

      const hasChanges = Object.keys(newColumnSizes).length > 0 || Object.keys(newRowSizes).length > 0;
      
      if (hasChanges) {
        console.log(`üìè –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: —Å—Ç–æ–ª–±—Ü—ã ${Object.keys(newColumnSizes).length}, —Å—Ç—Ä–æ–∫–∏ ${Object.keys(newRowSizes).length}`);
        
        const currentSettings = sheet.settings || { columnSizes: {}, rowSizes: {} };
        const updatedSettings = {
          ...currentSettings,
          columnSizes: { ...(currentSettings.columnSizes || {}), ...newColumnSizes },
          rowSizes: { ...(currentSettings.rowSizes || {}), ...newRowSizes }
        };

        const response = await sheetsExtendedApi.updateSettings(sheet.id.toString(), updatedSettings);
        console.log('‚úÖ –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backend', response.data);
        
        if (response.data?.settings) {
          const { columnSizes: savedColumnSizes = {}, rowSizes: savedRowSizes = {} } = response.data.settings;
          console.log('üîÑ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', response.data.settings);
          if (Object.keys(newColumnSizes).length > 0) setColumnSizes(savedColumnSizes);
          if (Object.keys(newRowSizes).length > 0) setRowSizes(savedRowSizes);
        }
      } else {
        console.log('‚ÑπÔ∏è –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ—Ç, –∑–∞–ø—Ä–æ—Å –∫ backend –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
      if (hasChanges) {
        // –°–æ–±–∏—Ä–∞–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
        const cellsToUpdate: Array<{ row: number; column: number; format: any }> = [];
        cells.forEach((cell) => {
          // –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ DMD Cottage –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
          const isFixedColumn = isDMDCottageReport && DMD_COTTAGE_FIXED_COLUMN_WIDTHS[cell.column];
          const needsWrap = isFixedColumn || (cell.value && cell.value.length > 9);
          
          if (needsWrap) {
            const currentFormat = cell.format || {};
            const hasWrapFormat = currentFormat.whiteSpace === 'normal' && 
                                 currentFormat.wordWrap === 'break-word';
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if (!hasWrapFormat) {
              const format = {
                ...currentFormat,
                whiteSpace: 'normal',
                wordWrap: 'break-word',
                wordBreak: 'break-word',
                overflowWrap: 'anywhere',
                overflow: 'hidden'
              };
              cellsToUpdate.push({ row: cell.row, column: cell.column, format });
            }
          }
        });
        
        if (cellsToUpdate.length > 0) {
          console.log(`üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ –∫ ${cellsToUpdate.length} —è—á–µ–π–∫–∞–º`);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç CellUpdate –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          const formatUpdates: CellUpdate[] = cellsToUpdate.map(cellUpdate => ({
            row: cellUpdate.row,
            column: cellUpdate.column,
            format: cellUpdate.format
          }));
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          await saveCellsBatchOptimized(formatUpdates);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫
          const newCells = new Map(cells);
          cellsToUpdate.forEach((cellUpdate) => {
            const key = `${cellUpdate.row}-${cellUpdate.column}`;
            const cell = newCells.get(key);
            if (cell) {
              newCells.set(key, { ...cell, format: cellUpdate.format });
            }
          });
          setCells(newCells);
        }
      }
      
      console.log('‚úÖ –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤:', error);
    } finally {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      isAutoResizeRunningRef.current = false;
    }
  }, [isReportSheet, userPermissions, calculateOptimalColumnWidth, cells, getColumnWidth, getRowHeight, sheet, columnSizes, rowSizes, isDMDCottageReport, saveCellsBatchOptimized]);

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  // useEffect(() => {
  //   // if (sheet?.template?.name) {
  //   //   console.log(`Sheet template name: "${sheet.template.name}"`);
  //   // } else {
  //   //   console.log(`Sheet template is missing:`, sheet?.template);
  //   // }
    
  //   // if (sheet) {
  //   //   console.log(`Full sheet object:`, {
  //   //     id: sheet.id,
  //   //     name: sheet.name,
  //   //     template: sheet.template,
  //   //     templateId: sheet.templateId
  //   //   });
  //   // }
  // }, [sheet?.template?.name, sheet]);

  // –¢—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ—Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–æ–±—ä—è–≤–ª–µ–Ω –Ω–∏–∂–µ handleAutoResize –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
  useEffect(() => {
    if (!isDMDCottageReport) return;
    if (!hasAutoSortedRef.current) return;
    if (!needsResizeAfterSortRef.current) return;
    needsResizeAfterSortRef.current = false;
    // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É XPath; –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    try {
      const toolbarButton = document.evaluate(
        '//*[@id="root"]/div/div/div/div[1]/button[7]',
        document,
        null,
        XPathResult.FIRST_ORDERED_NODE_TYPE,
        null
      ).singleNodeValue as HTMLElement | null;
      if (toolbarButton) {
        toolbarButton.click();
      } else {
        void handleAutoResize();
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ XPath, –≤—ã–∑—ã–≤–∞—é –∞–≤—Ç–æ—Ä–∞–∑–º–µ—Ä –Ω–∞–ø—Ä—è–º—É—é:', e);
      void handleAutoResize();
    }
  }, [isDMDCottageReport, handleAutoResize]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —à–∏—Ä–∏–Ω/–≤—ã—Å–æ—Ç/–≥—Ä–∞–Ω–∏—Ü/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleExportExcel = async () => {
    // –•–µ–ª–ø–µ—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∏ —Å—Ç–∏–ª–µ–π
    const hexToARGB = (hex?: string): string | undefined => {
      if (!hex) return undefined;
      const cleaned = hex.replace('#', '');
      if (cleaned.length === 3) {
        const r = cleaned[0];
        const g = cleaned[1];
        const b = cleaned[2];
        return `FF${r}${r}${g}${g}${b}${b}`.toUpperCase();
      }
      if (cleaned.length === 6) return `FF${cleaned}`.toUpperCase();
      return undefined;
    };
    const pxToExcelColWidth = (px: number): number => {
      const val = (px - 5) / 7; // –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ
      return Math.max(2, Math.round(val * 100) / 100);
    };
    const pxToPoints = (px: number): number => Math.round(px * 0.75 * 100) / 100;
    const parseFontSize = (v: any): number | undefined => {
      if (typeof v === 'number' && isFinite(v)) return v;
      if (typeof v === 'string') {
        const m = v.trim().match(/^(\d+)(px)?$/i);
        if (m) return parseInt(m[1], 10);
      }
      return undefined;
    };
    const getReportDateString = (): string => {
      const raw = (reportDate || sheet?.reportDate || (cells.get('0-0')?.value ?? '')).toString();
      if (!raw) return '';
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ YYYY-MM-DD –∏ DD.MM.YYYY
      const iso = raw.match(/^(\d{4})-(\d{2})-(\d{2})$/);
      if (iso) return `${iso[3]}.${iso[2]}.${iso[1]}`;
      const dotted = raw.match(/^(\d{2})\.(\d{2})\.(\d{4})$/);
      if (dotted) return `${dotted[1]}.${dotted[2]}.${dotted[3]}`;
      return raw;
    };

    const workbook = new ExcelJS.Workbook();
    const wsName = (sheet.name || 'Report')
      .replace(/[\\/?*\[\]:]/g, '')
      .trim()
      .slice(0, 31) || 'Report';
    const worksheet = workbook.addWorksheet(wsName);

    const totalRows = sheet.rowCount || 100;
    const totalCols = sheet.columnCount || 26;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    let excelCol = 1; // –ü–æ–∑–∏—Ü–∏—è –≤ Excel (1-based)
    for (let col = 0; col < totalCols; col++) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞
      if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
      
      let sourceCol = col;
      // –î–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞: –∫–æ–ª–æ–Ω–∫–∞ 16 –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ 15
      if (sheet?.templateId === 2 && col === 16) {
        sourceCol = 16;
      }
      
      const widthPx = Math.max(20, getColumnWidth(sourceCol));
      const width = pxToExcelColWidth(widthPx);
      const colRef = worksheet.getColumn(excelCol);
      colRef.width = Math.max(2, width);
      excelCol++;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Å–æ—Ç —Å—Ç—Ä–æ–∫ (Row.height –≤ –ø–æ–∏–Ω—Ç–∞—Ö)
    for (let row = 0; row < totalRows; row++) {
      const heightPx = Math.max(16, getRowHeight(row));
      worksheet.getRow(row + 1).height = pxToPoints(heightPx);
    }

    const isDMDCottageReport = sheet?.template?.name === '–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage' ||
                               sheet?.template?.name?.includes('–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage');

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
    for (let row = 0; row < totalRows; row++) {
      let excelCol = 1; // –ü–æ–∑–∏—Ü–∏—è –≤ Excel (1-based)
      for (let col = 0; col < totalCols; col++) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞
        if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
        
        let sourceCol = col;
        // –î–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞: –∫–æ–ª–æ–Ω–∫–∞ 16 –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ 15
        if (sheet?.templateId === 2 && col === 16) {
          sourceCol = 16;
        }
        
        const cellRef = worksheet.getCell(row + 1, excelCol);
        // –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ ‚Äî –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞–¥–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ
        if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç') && row === 0) {
          cellRef.value = null;
        } else {
          cellRef.value = getCellValue(row, sourceCol) as any;
        }

        // –î–ª—è —Å—Ç–æ–ª–±—Ü–∞ A –≤ Excel –¥–µ–ª–∞–µ–º —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω—ã–º
        const baseFmt: any = getCellFormat(row, sourceCol) || {};
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ (–º–∏–Ω–∏–º—É–º 14)
        const withRow2Inc = (sheet?.templateId === 2 && row === 1)
          ? { ...baseFmt, fontSize: Math.max(parseFontSize(baseFmt.fontSize || 0) || 0, 14) }
          : baseFmt;
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–∏—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è:
        // - —Å—Ç–æ–ª–±—Ü–∞ A (col === 0)
        // - –∫–æ–ª–æ–Ω–æ–∫ "–û–±—â–∞—è —Å—É–º–º–∞" (11) –∏ "–î–æ–ø–ª–∞—Ç–∞" (13) –≤ –æ—Ç—á–µ—Ç–µ DMD Cottage –¥–ª—è —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö (row >= 2)
        const shouldBeBold = col === 0 || (isDMDCottageReport && (sourceCol === 11 || sourceCol === 13) && row >= 2);
        const fmt: any = shouldBeBold ? { ...withRow2Inc, fontWeight: 'bold' } : withRow2Inc;
        // –®—Ä–∏—Ñ—Ç
        cellRef.font = {
          name: fmt.fontFamily || undefined,
          size: parseFontSize(fmt.fontSize),
          bold: fmt.fontWeight === 'bold' ? true : undefined,
          italic: fmt.fontStyle === 'italic' ? true : undefined,
          underline: fmt.textDecoration === 'underline' ? true : undefined,
          color: fmt.textColor ? { argb: hexToARGB(fmt.textColor) } : undefined,
        } as any;

        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ + –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
        cellRef.alignment = {
          horizontal: fmt.textAlign || 'left',
          vertical: 'middle',
          wrapText: !!(fmt.whiteSpace === 'normal' || fmt.textWrap === 'wrap'),
        } as any;

        // –ó–∞–ª–∏–≤–∫–∞
        if (fmt.backgroundColor) {
          const argb = hexToARGB(fmt.backgroundColor);
          if (argb) {
            cellRef.fill = {
              type: 'pattern',
              pattern: 'solid',
              fgColor: { argb }
            } as any;
          }
        }

        // –ì—Ä–∞–Ω–∏—Ü—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ: 'all' –∏ 'outer' ‚Üí –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã)
        const makeBorder = (width?: number, style?: string, color?: string) => {
          const s: any = style === 'double' ? 'double' : (width && width >= 2 ? 'medium' : 'thin');
          const c = color ? { argb: hexToARGB(color) } : { argb: 'FF000000' };
          const side: any = { style: s, color: c };
          return { top: side, left: side, bottom: side, right: side } as any;
        };
        if (fmt.border) {
          const b = fmt.border;
          if (b.type === 'all' || b.type === 'outer' || b.type === undefined) {
            cellRef.border = makeBorder(b.width, b.style, b.color);
          }
          // 'inner' –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ, —Ç.–∫. —Ç—Ä–µ–±—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
        }

        // –¢–æ–ª—Å—Ç–∞—è –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ C(2) –∏ G(6) –≤ –æ—Ç—á–µ—Ç–µ DMD Cottage
        if (isDMDCottageReport && (col === 2 || col === 6)) {
          cellRef.border = {
            ...(cellRef.border || {}),
            left: { style: 'medium', color: { argb: 'FF000000' } }
          } as any;
        }
        
        excelCol++;
      }
    }

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —è—á–µ–µ–∫
    const normalizeRange = (r1: number, c1: number, r2: number, c2: number) => {
      const rr1 = Math.max(0, Math.min(r1, r2));
      const rr2 = Math.max(0, Math.max(r1, r2));
      const cc1 = Math.max(0, Math.min(c1, c2));
      const cc2 = Math.max(0, Math.max(c1, c2));
      return { r1: rr1, c1: cc1, r2: rr2, c2: cc2 };
    };
    const mergeKey = (r1: number, c1: number, r2: number, c2: number) => `${r1}-${c1}-${r2}-${c2}`;
    const existingMerges = new Set<string>();
    const mergeRanges: Array<{ r1: number; c1: number; r2: number; c2: number }> = [];
    const addMerge = (r1: number, c1: number, r2: number, c2: number) => {
      const { r1: nr1, c1: nc1, r2: nr2, c2: nc2 } = normalizeRange(r1, c1, r2, c2);
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –ª–∏—Å—Ç–∞
      if (nr1 < 0 || nr2 < 0 || nc1 < 0 || nc2 < 0) return;
      if (nr1 >= totalRows || nr2 >= totalRows) return;
      if (nc1 >= totalCols || nc2 >= totalCols) return;
      if (nr1 === nr2 && nc1 === nc2) return; // –Ω–µ—Ç —Å–º—ã—Å–ª–∞
      const key = mergeKey(nr1, nc1, nr2, nc2);
      if (existingMerges.has(key)) return;
      try {
        worksheet.mergeCells(nr1 + 1, nc1 + 1, nr2 + 1, nc2 + 1);
        existingMerges.add(key);
        mergeRanges.push({ r1: nr1, c1: nc1, r2: nr2, c2: nc2 });
      } catch {}
    };
    // –°–æ–±–∏—Ä–∞–µ–º merges –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
    // if (sheet?.cells && Array.isArray(sheet.cells)) {
    //   const visited = new Set<string>();
    //   for (const cell of sheet.cells) {
    //     if (cell && cell.mergedWith && !visited.has(`${cell.row}-${cell.column}`)) {
    //       const [srStr, scStr] = String(cell.mergedWith).split('-');
    //       const sr = parseInt(srStr, 10);
    //       const sc = parseInt(scStr, 10);
    //       const er = Number(cell.row);
    //       const ec = Number(cell.column);
    //       if (!Number.isNaN(sr) && !Number.isNaN(sc) && !Number.isNaN(er) && !Number.isNaN(ec)) {
    //         for (let r = sr; r <= er; r++) {
    //           for (let c = sc; c <= ec; c++) visited.add(`${r}-${c}`);
    //         }
    //         addMerge(sr, sc, er, ec);
    //       }
    //     }
    //   }
    // }
    const overlaps = (a: {r1:number;c1:number;r2:number;c2:number}, b: {r1:number;c1:number;r2:number;c2:number}) => {
      return !(a.r2 < b.r1 || a.r1 > b.r2 || a.c2 < b.c1 || a.c1 > b.c2);
    };
    // –Ø–≤–Ω—ã–µ merges –¥–ª—è —à–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç')) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      // –ò—Å—Ö–æ–¥–Ω—ã–µ: A1:B1 (0-1), C1:E1 (2-4), F1:P1 (6-13 –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è 5,8,15)
      const visibleCols = [];
      for (let col = 0; col < totalCols; col++) {
        if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
        visibleCols.push(col);
      }
      
      if (visibleCols.length > 0) {
        // A1:B1 –æ—Å—Ç–∞–µ—Ç—Å—è 0:1
        const r1 = { r1: 0, c1: 0, r2: 0, c2: Math.min(1, visibleCols.length - 1) };
        // C1:E1 —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 2:4 (–∫–æ–ª–æ–Ω–∫–∏ 2,3,4 - –∏—Å–∫–ª—é—á–µ–Ω–∞ 5)
        const r2 = { r1: 0, c1: 2, r2: 0, c2: Math.min(4, visibleCols.length - 1) };
        // F1:... –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–ª–æ–Ω–∫–∏ 5 –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ (–±—ã–ª–∞ 6, –Ω–æ 5 –∏—Å–∫–ª—é—á–µ–Ω–∞)
        const r3 = { r1: 0, c1: 5, r2: 0, c2: visibleCols.length - 1 };
        
        const ranges = [r1, r2, r3];
        for (const r of ranges) {
          if (r.c1 <= r.c2 && r.r1 <= r.r2 && r.c2 < visibleCols.length) {
            const conflict = mergeRanges.some((m) => overlaps(m, r));
            if (!conflict) addMerge(r.r1, r.c1, r.r2, r.c2);
          }
        }
      }
    }

    // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Å–ª–∏—Ç—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö, –∫—Ä–æ–º–µ –º–∞—Å—Ç–µ—Ä-—è—á–µ–π–∫–∏ (–≤–µ—Ä—Ö–Ω—è—è –ª–µ–≤–∞—è)
    for (const mr of mergeRanges) {
      for (let r = mr.r1; r <= mr.r2; r++) {
        for (let c = mr.c1; c <= mr.c2; c++) {
          if (r === mr.r1 && c === mr.c1) continue; // –º–∞—Å—Ç–µ—Ä-—è—á–µ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
          const cell = worksheet.getCell(r + 1, c + 1);
          cell.value = null;
        }
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ A1 ‚Äî –ø–æ—Å–ª–µ –º–µ—Ä–¥–∂–µ–π —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
    if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç')) {
      const a1 = worksheet.getCell(1, 1);
      a1.value = getReportDateString();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Å–ª–∏—Ç—ã—Ö –±–ª–æ–∫–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
      // C1 —Ç–µ–ø–µ—Ä—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 3 (–∫–æ–ª–æ–Ω–∫–∞ 2 –∏—Å—Ö–æ–¥–Ω–∞—è + 1)
      const c1 = worksheet.getCell(1, 3);
      c1.value = '–í—ã—Å–µ–ª–µ–Ω–∏–µ';
      
      // G1 —Ç–µ–ø–µ—Ä—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 6 (–±—ã–ª–∞ –∫–æ–ª–æ–Ω–∫–∞ 6, –Ω–æ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è 5 —Å—Ç–∞–ª–∞ –ø–æ–∑–∏—Ü–∏–µ–π 6)
      const g1 = worksheet.getCell(1, 6);
      g1.value = '–ó–∞—Å–µ–ª–µ–Ω–∏–µ';
      
      // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —à–∞–ø–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –º–∞—Å—Ç–µ—Ä-—è—á–µ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª–∏—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      const headerMasters: Array<[number, number]> = [[1, 1], [1, 3], [1, 6]];
      headerMasters.forEach(([r, c]) => {
        try {
          const cell = worksheet.getCell(r, c);
          cell.alignment = { ...(cell.alignment || {}), horizontal: 'center', vertical: 'middle' } as any;
          cell.font = { ...(cell.font || {}), bold: true, size: 16 } as any;
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—Ç—å A1 –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª–æ—Å—å –ø—É—Å—Ç–æ
    if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç')) {
      const enforcedDate = getReportDateString();
      const a1v = worksheet.getCell(1, 1).value;
      if (!a1v || (typeof a1v === 'string' && a1v.trim() === '')) {
        worksheet.getCell(1, 1).value = enforcedDate;
      }
    }

    // –ì—Ä–∞–Ω–∏—Ü—ã –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    if (sheet?.template?.name?.includes('–û—Ç—á–µ—Ç') && totalRows > 1) {
      const thin = { style: 'thin', color: { argb: 'FF000000' } } as any;
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      let visibleColCount = 0;
      for (let col = 0; col < totalCols; col++) {
        if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
        visibleColCount++;
      }
      
      for (let c = 1; c <= visibleColCount; c++) {
        const cell = worksheet.getCell(2, c);
        cell.border = {
          top: thin,
          left: thin,
          bottom: thin,
          right: thin
        } as any;
      }
    }

    // –ñ–∏—Ä–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∫–æ–Ω—Ü–æ–≤ –≥—Ä—É–ø–ø ("X" –∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ "X –¥—É–±–ª—å") –ø–æ –∫–æ–ª–æ–Ω–∫–µ A
    if (isDMDCottageReport) {
      // –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      const visibleCols: number[] = [];
      for (let col = 0; col < totalCols; col++) {
        if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
        visibleCols.push(col);
      }
      const medium = { style: 'medium', color: { argb: 'FF000000' } } as any;
      for (let r = 0; r < totalRows - 1; r++) {
        const v1 = (getCellValue(r, 0) || '').toString().trim().toLowerCase();
        const v2 = (getCellValue(r + 1, 0) || '').toString().trim().toLowerCase();
        if (!v1 || !v2) continue;
        if (v2 === `${v1} –¥—É–±–ª—å`) {
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä—ã (r+1) –ø–æ –≤—Å–µ–º –≤–∏–¥–∏–º—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
          let excelC = 1;
          for (let col = 0; col < totalCols; col++) {
            if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
            const cell = worksheet.getCell((r + 1) + 1, excelC); // r+1 (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞) + 1 –¥–ª—è 1-based
            const existing = cell.border || {};
            cell.border = { ...existing, bottom: medium } as any;
            excelC++;
          }
        }
      }
    }

    // –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
    const safeName = (sheet.name || 'Report').replace(/[\\/?*\[\]:]/g, '').trim().slice(0, 31) || 'Report';
    const dateForName = getReportDateString();
    const fileName = dateForName ? `${safeName} ${dateForName}` : safeName;
    try {
      const buffer = await workbook.xlsx.writeBuffer();
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
    link.download = `${fileName}.xlsx`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XLSX —á–µ—Ä–µ–∑ ExcelJS.writeBuffer:', err);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ; —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ CSV –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
  const handleExportCSV = () => {
    const data: any[][] = [];
    for (let row = 0; row < (sheet.rowCount || 100); row++) {
      const rowData: any[] = [];
      for (let col = 0; col < (sheet.columnCount || 26); col++) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞
        if (sheet?.templateId === 2 && (col === 5 || col === 8 || col === 15)) continue;
        
        let sourceCol = col;
        // –î–ª—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç—á–µ—Ç–∞: –∫–æ–ª–æ–Ω–∫–∞ 16 –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ 15
        if (sheet?.templateId === 2 && col === 16) {
          sourceCol = 16;
        }
        
        rowData.push(getCellValue(row, sourceCol));
      }
      data.push(rowData);
    }
    const ws = XLSX.utils.aoa_to_sheet(data);
    const csvBody = XLSX.utils.sheet_to_csv(ws, { FS: ';' });
    const csvContent = `sep=;\n${csvBody}`;
    // –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel —Å UTF-8
    const bom = new Uint8Array([0xEF, 0xBB, 0xBF]);
    const blob = new Blob([bom, csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.setAttribute('download', `${sheet.name || 'report'}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã)
  const lastAutoResizedDateRef = useRef<string | undefined>(undefined);
  useEffect(() => {
    if (!isReportSheet) return;
    if (!reportDate) return;
    if (lastAutoResizedDateRef.current === reportDate) return;
    if (cells.size === 0) return; // –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —è—á–µ–µ–∫
    if (isAutoResizeRunningRef.current) return; // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –¥–ª—è DMD Cottage –æ—Ç—á–µ—Ç–æ–≤
    if (isDMDCottageReport) {
      console.log('üîÑ –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞');
      hasAutoSortedRef.current = false;
      needsResizeAfterSortRef.current = false;
    }
    
    console.log('üìÖ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞:', reportDate);
    
    Promise.resolve(handleAutoResize()).finally(() => {
      lastAutoResizedDateRef.current = reportDate;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
      if (isDMDCottageReport && !hasAutoSortedRef.current) {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞');
        setTimeout(() => {
          sortByColumnAForDMDCottage();
          hasAutoSortedRef.current = true;
          needsResizeAfterSortRef.current = true;
          calculateDoplataForDMDCottage();
        }, 500);
      }
    });
  }, [reportDate, isReportSheet, cells.size, handleAutoResize, isDMDCottageReport, sortByColumnAForDMDCottage, calculateDoplataForDMDCottage]);

  return (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <FormatToolbar
        selectedCells={selectedRange}
        onFormat={handleFormat}
        onAddRow={handleAddRow}
        onAddColumn={handleAddColumn}
        onShowHistory={handleShowHistory}
        onAutoResize={handleAutoResize}
        userPermissions={userPermissions}
        isReportSheet={isReportSheet}
      />

      {/* –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ */}
      {isReportSheet && (
        <Stack direction="row" spacing={2} sx={{ mb: 2 }}>
          <Button variant="outlined" onClick={handleExportExcel}>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</Button>
          <Button variant="outlined" onClick={handleExportCSV}>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</Button>
        </Stack>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <Paper 
        ref={containerRef}
        sx={{ 
          flex: 1, 
          overflow: 'auto',
          outline: 'none', // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π outline –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
          '&:focus': {
            outline: 'none'
          }
        }} 
        onMouseUp={handleMouseUp}
        onScroll={handleScroll}
        tabIndex={0} // –î–µ–ª–∞–µ–º Paper —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        onFocus={() => {
          // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
          if (!selectedCell) {
            setSelectedCell({ row: 0, column: 0 });
            setSelectedRange({ startRow: 0, endRow: 0, startColumn: 0, endColumn: 0 });
          }
          console.log('–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–∏–ª–∞ —Ñ–æ–∫—É—Å');
        }}
        onMouseDown={(e) => {
          // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ–∫—É—Å –ø—Ä–∏ –∫–ª–∏–∫–µ
          e.currentTarget.focus();
        }}
        onPaste={(e) => {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ paste –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–∞–±–ª–∏—Ü—ã
          console.log('Paste —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–∞–±–ª–∏—Ü—ã');
          if (selectedCell && !editingCell && userPermissions !== 'read') {
            e.preventDefault();
            // –°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
          }
        }}
      >
        <Box ref={gridContainerRef} sx={{ display: 'inline-block', minWidth: '100%' }} key={renderKey}>
          {/* Headers */}
          <Box sx={{ display: 'flex', position: 'sticky', top: 0, zIndex: 1 }}>
            {!hideRowNumbers && <Box sx={{ width: 50, height: 30 }} />}{/* Corner cell */}
            {renderColumnHeaders()}
          </Box>
          {/* –ö–∞—Å—Ç–æ–º–Ω–∞—è —à–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ */}
          {sheet?.template?.name?.includes('–û—Ç—á–µ—Ç') && (
            <Box sx={{ display: 'flex', position: 'sticky', top: 30, zIndex: 1 }}>
              {!hideRowNumbers && <Box sx={{ width: 50, height: 30 }} />}
              {/* A1:B1 - —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ */}
              <Box
                sx={{
                  width: (getColumnWidth(0) + getColumnWidth(1)),
                  height: 30,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#f5f5f5',
                  border: '1px solid #e0e0e0',
                  fontWeight: 'bold',
                  fontSize: '16px',
                  textAlign: 'center',
                }}
              >
                {reportDate ? reportDate.split('-').reverse().join('.') : ''}
              </Box>
              {/* C1:F1 - –í—ã—Å–µ–ª–µ–Ω–∏–µ (–∏—Å–∫–ª—é—á–∞—è –∫–æ–ª–æ–Ω–∫—É 5) */}
              <Box
                sx={{
                  width: [2,3,4,5].filter(col => !(sheet?.templateId === 2 && col === 5)).reduce((acc, col) => acc + getColumnWidth(col), 0),
                  height: 30,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#f5f5f5',
                  border: '1px solid #e0e0e0',
                  borderLeft: sheet?.template?.name === '–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage' ? '2px solid #000000' : '1px solid #e0e0e0',
                  fontWeight: 'bold',
                  fontSize: '16px',
                  textAlign: 'center',
                }}
              >
                –í—ã—Å–µ–ª–µ–Ω–∏–µ
              </Box>
              {/* G1:Q1 (6-16) - –ó–∞—Å–µ–ª–µ–Ω–∏–µ, –∏—Å–∫–ª—é—á–∞—è –∫–æ–ª–æ–Ω–∫–∏ 8 –∏ 15 */}
              <Box
                sx={{
                  width: Array.from({length: 11}, (_, i) => i+6).filter(col => !(sheet?.templateId === 2 && (col === 8 || col === 15))).map(col => getColumnWidth(col)).reduce((a,b)=>a+b,0),
                  height: 30,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#f5f5f5',
                  border: '1px solid #e0e0e0',
                  borderLeft: sheet?.template?.name === '–û—Ç—á–µ—Ç –∑–∞—Å–µ–ª–µ–Ω–∏—è/–≤—ã—Å–µ–ª–µ–Ω–∏—è DMD Cottage' ? '2px solid #000000' : '1px solid #e0e0e0',
                  fontWeight: 'bold',
                  fontSize: '16px',
                  textAlign: 'center',
                }}
              >
                –ó–∞—Å–µ–ª–µ–Ω–∏–µ
              </Box>
            </Box>
          )}
          {/* Grid */}
          {renderGrid()}
        </Box>
      </Paper>

      {/* –î–∏–∞–ª–æ–≥ –∏—Å—Ç–æ—Ä–∏–∏ */}
      {historyCell && (
        <CellHistoryDialog
          open={historyDialogOpen}
          onClose={() => setHistoryDialogOpen(false)}
          sheetId={sheet.id}
          row={historyCell.row}
          column={historyCell.column}
        />
      )}
    </Box>
  );
};

export default Spreadsheet; 